
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000254  00800100  00001702  00001796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001702  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800354  00800354  000019ea  2**0
                  ALLOC
  3 .stab         00003414  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001adf  00000000  00000000  00004e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000068df  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  000068f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005f0  00000000  00000000  000069f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000a0  00000000  00000000  00006fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000349  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e0       	ldi	r30, 0x02	; 2
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 35       	cpi	r26, 0x54	; 84
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a4 e5       	ldi	r26, 0x54	; 84
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 36       	cpi	r26, 0x6B	; 107
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 82 06 	call	0xd04	; 0xd04 <main>
      9e:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initWiznet>:

#endif

// Methode om wiznet mee in te stellen
void initWiznet(void) {
    spi_transmit(MR, (1 << RST));   // Initialiseer registers ethernet shield
      a6:	60 e8       	ldi	r22, 0x80	; 128
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(TMSR, ((1 << S0S0) | (1 << S1S0) | (1 << S2S0) | (1 << S3S0)));    // 2kb grootte
      b0:	65 e5       	ldi	r22, 0x55	; 85
      b2:	8b e1       	ldi	r24, 0x1B	; 27
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(RMSR, ((1 << S0S0) | (1 << S1S0) | (1 << S2S0) | (1 << S3S0)));    // 2kb grootte
      ba:	65 e5       	ldi	r22, 0x55	; 85
      bc:	8a e1       	ldi	r24, 0x1A	; 26
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <spi_transmit>

000000c4 <set_gateway>:
}

// Methode om de bytes uit het gateway array mee te versturen
void set_gateway(void) {
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	0e e0       	ldi	r16, 0x0E	; 14
      ce:	11 e0       	ldi	r17, 0x01	; 1
    for(int i = 0; i < (sizeof(gtw_addr) / sizeof(gtw_addr[0])); ++i) {
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d0 e0       	ldi	r29, 0x00	; 0
        spi_transmit(GAR + i, gtw_addr[i]);
      d4:	f8 01       	movw	r30, r16
      d6:	61 91       	ld	r22, Z+
      d8:	8f 01       	movw	r16, r30
      da:	21 96       	adiw	r28, 0x01	; 1
      dc:	ce 01       	movw	r24, r28
      de:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(RMSR, ((1 << S0S0) | (1 << S1S0) | (1 << S2S0) | (1 << S3S0)));    // 2kb grootte
}

// Methode om de bytes uit het gateway array mee te versturen
void set_gateway(void) {
    for(int i = 0; i < (sizeof(gtw_addr) / sizeof(gtw_addr[0])); ++i) {
      e2:	c4 30       	cpi	r28, 0x04	; 4
      e4:	d1 05       	cpc	r29, r1
      e6:	b1 f7       	brne	.-20     	; 0xd4 <set_gateway+0x10>
        spi_transmit(GAR + i, gtw_addr[i]);
    }
}
      e8:	df 91       	pop	r29
      ea:	cf 91       	pop	r28
      ec:	1f 91       	pop	r17
      ee:	0f 91       	pop	r16
      f0:	08 95       	ret

000000f2 <set_submask>:

// Methode om de bytes uit het subnet array mee te versturen
void set_submask(void) {
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	0a e0       	ldi	r16, 0x0A	; 10
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	c5 e0       	ldi	r28, 0x05	; 5
     100:	d0 e0       	ldi	r29, 0x00	; 0
    for(int i = 0; i < (sizeof(sub_mask) / sizeof(sub_mask[0])); ++i) {
        spi_transmit(SUBR + i, sub_mask[i]);
     102:	f8 01       	movw	r30, r16
     104:	61 91       	ld	r22, Z+
     106:	8f 01       	movw	r16, r30
     108:	ce 01       	movw	r24, r28
     10a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     10e:	21 96       	adiw	r28, 0x01	; 1
    }
}

// Methode om de bytes uit het subnet array mee te versturen
void set_submask(void) {
    for(int i = 0; i < (sizeof(sub_mask) / sizeof(sub_mask[0])); ++i) {
     110:	c9 30       	cpi	r28, 0x09	; 9
     112:	d1 05       	cpc	r29, r1
     114:	b1 f7       	brne	.-20     	; 0x102 <set_submask+0x10>
        spi_transmit(SUBR + i, sub_mask[i]);
    }
}
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	1f 91       	pop	r17
     11c:	0f 91       	pop	r16
     11e:	08 95       	ret

00000120 <set_macaddress>:

// Methode om de bytes uit het macaddress array mee te versturen
void set_macaddress(void) {
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	04 e0       	ldi	r16, 0x04	; 4
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	c9 e0       	ldi	r28, 0x09	; 9
     12e:	d0 e0       	ldi	r29, 0x00	; 0
    for(int i = 0; i < (sizeof(mac_addr) / sizeof(mac_addr[0])); ++i) {
        spi_transmit(SHAR + i, mac_addr[i]);
     130:	f8 01       	movw	r30, r16
     132:	61 91       	ld	r22, Z+
     134:	8f 01       	movw	r16, r30
     136:	ce 01       	movw	r24, r28
     138:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     13c:	21 96       	adiw	r28, 0x01	; 1
    }
}

// Methode om de bytes uit het macaddress array mee te versturen
void set_macaddress(void) {
    for(int i = 0; i < (sizeof(mac_addr) / sizeof(mac_addr[0])); ++i) {
     13e:	cf 30       	cpi	r28, 0x0F	; 15
     140:	d1 05       	cpc	r29, r1
     142:	b1 f7       	brne	.-20     	; 0x130 <set_macaddress+0x10>
        spi_transmit(SHAR + i, mac_addr[i]);
    }
}
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	08 95       	ret

0000014e <set_ipaddress>:

// Methode om de bytes uit het ipadres array mee te versturen
void set_ipaddress(void) {
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 e0       	ldi	r16, 0x00	; 0
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	cf e0       	ldi	r28, 0x0F	; 15
     15c:	d0 e0       	ldi	r29, 0x00	; 0
    for(int i = 0; i < (sizeof(ip_addr) / sizeof(ip_addr[0])); ++i) {
        spi_transmit(SIPR + i, ip_addr[i]);
     15e:	f8 01       	movw	r30, r16
     160:	61 91       	ld	r22, Z+
     162:	8f 01       	movw	r16, r30
     164:	ce 01       	movw	r24, r28
     166:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     16a:	21 96       	adiw	r28, 0x01	; 1
    }
}

// Methode om de bytes uit het ipadres array mee te versturen
void set_ipaddress(void) {
    for(int i = 0; i < (sizeof(ip_addr) / sizeof(ip_addr[0])); ++i) {
     16c:	c3 31       	cpi	r28, 0x13	; 19
     16e:	d1 05       	cpc	r29, r1
     170:	b1 f7       	brne	.-20     	; 0x15e <set_ipaddress+0x10>
        spi_transmit(SIPR + i, ip_addr[i]);
    }
}
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <print_status>:

// Methode om de instellingen mee te printen
void print_status(void) {
     17c:	ff 92       	push	r15
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
           spi_receive(GAR + 2),spi_receive(GAR + 3));
     186:	84 e0       	ldi	r24, 0x04	; 4
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     18e:	18 2f       	mov	r17, r24
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     198:	d8 2f       	mov	r29, r24
    }
}

// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     1a2:	c8 2f       	mov	r28, r24
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     1ac:	1f 92       	push	r1
     1ae:	1f 93       	push	r17
     1b0:	1f 92       	push	r1
     1b2:	df 93       	push	r29
     1b4:	1f 92       	push	r1
     1b6:	cf 93       	push	r28
     1b8:	1f 92       	push	r1
     1ba:	8f 93       	push	r24
     1bc:	8f e5       	ldi	r24, 0x5F	; 95
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	9f 93       	push	r25
     1c2:	8f 93       	push	r24
     1c4:	0e 94 8f 08 	call	0x111e	; 0x111e <printf>
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
     1c8:	8e e0       	ldi	r24, 0x0E	; 14
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     1d0:	f8 2e       	mov	r15, r24
     1d2:	8d e0       	ldi	r24, 0x0D	; 13
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     1da:	08 2f       	mov	r16, r24
     1dc:	8c e0       	ldi	r24, 0x0C	; 12
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     1e4:	18 2f       	mov	r17, r24
     1e6:	8b e0       	ldi	r24, 0x0B	; 11
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     1ee:	d8 2f       	mov	r29, r24
// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
     1f0:	8a e0       	ldi	r24, 0x0A	; 10
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     1f8:	c8 2f       	mov	r28, r24
     1fa:	89 e0       	ldi	r24, 0x09	; 9
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     202:	1f 92       	push	r1
     204:	ff 92       	push	r15
     206:	1f 92       	push	r1
     208:	0f 93       	push	r16
     20a:	1f 92       	push	r1
     20c:	1f 93       	push	r17
     20e:	1f 92       	push	r1
     210:	df 93       	push	r29
     212:	1f 92       	push	r1
     214:	cf 93       	push	r28
     216:	1f 92       	push	r1
     218:	8f 93       	push	r24
     21a:	8c e7       	ldi	r24, 0x7C	; 124
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	9f 93       	push	r25
     220:	8f 93       	push	r24
     222:	0e 94 8f 08 	call	0x111e	; 0x111e <printf>
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
     226:	88 e0       	ldi	r24, 0x08	; 8
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     22e:	18 2f       	mov	r17, r24
     230:	87 e0       	ldi	r24, 0x07	; 7
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     238:	d8 2f       	mov	r29, r24
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
     23a:	86 e0       	ldi	r24, 0x06	; 6
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     242:	c8 2f       	mov	r28, r24
     244:	85 e0       	ldi	r24, 0x05	; 5
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     24c:	1f 92       	push	r1
     24e:	1f 93       	push	r17
     250:	1f 92       	push	r1
     252:	df 93       	push	r29
     254:	1f 92       	push	r1
     256:	cf 93       	push	r28
     258:	1f 92       	push	r1
     25a:	8f 93       	push	r24
     25c:	83 eb       	ldi	r24, 0xB3	; 179
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	9f 93       	push	r25
     262:	8f 93       	push	r24
     264:	0e 94 8f 08 	call	0x111e	; 0x111e <printf>
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
    
    printf("Ip-adres: %d.%d.%d.%d\n\n",spi_receive(SIPR + 0),spi_receive(SIPR + 1),\
           spi_receive(SIPR + 2),spi_receive(SIPR + 3));
     268:	8d b7       	in	r24, 0x3d	; 61
     26a:	9e b7       	in	r25, 0x3e	; 62
     26c:	82 96       	adiw	r24, 0x22	; 34
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	9e bf       	out	0x3e, r25	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	8d bf       	out	0x3d, r24	; 61
     278:	82 e1       	ldi	r24, 0x12	; 18
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     280:	18 2f       	mov	r17, r24
     282:	81 e1       	ldi	r24, 0x11	; 17
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     28a:	d8 2f       	mov	r29, r24
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
    
    printf("Ip-adres: %d.%d.%d.%d\n\n",spi_receive(SIPR + 0),spi_receive(SIPR + 1),\
     28c:	80 e1       	ldi	r24, 0x10	; 16
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     294:	c8 2f       	mov	r28, r24
     296:	8f e0       	ldi	r24, 0x0F	; 15
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     29e:	1f 92       	push	r1
     2a0:	1f 93       	push	r17
     2a2:	1f 92       	push	r1
     2a4:	df 93       	push	r29
     2a6:	1f 92       	push	r1
     2a8:	cf 93       	push	r28
     2aa:	1f 92       	push	r1
     2ac:	8f 93       	push	r24
     2ae:	8e ec       	ldi	r24, 0xCE	; 206
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	9f 93       	push	r25
     2b4:	8f 93       	push	r24
     2b6:	0e 94 8f 08 	call	0x111e	; 0x111e <printf>
     2ba:	8d b7       	in	r24, 0x3d	; 61
     2bc:	9e b7       	in	r25, 0x3e	; 62
     2be:	0a 96       	adiw	r24, 0x0a	; 10
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	9e bf       	out	0x3e, r25	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	8d bf       	out	0x3d, r24	; 61
           spi_receive(SIPR + 2),spi_receive(SIPR + 3));
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	08 95       	ret

000002d6 <lcd_4bit_mode>:
}

void lcd_4bit_mode(void)
{
    // Zet RS laag voor het versturen van een commando
    PORTD &= ~(1 << RS);
     2d6:	5a 98       	cbi	0x0b, 2	; 11
    
    // Pull de enable pin omhoog
    PORTD |= (1 << E);
     2d8:	5b 9a       	sbi	0x0b, 3	; 11
    
    // Zet het lcd in 4 bit mode, (low nibble = 0 = niet aangesloten)
    PORTD &= ~((1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7));
     2da:	8b b1       	in	r24, 0x0b	; 11
     2dc:	8f 70       	andi	r24, 0x0F	; 15
     2de:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (lcd_commandos.bit4 << 4);
     2e0:	9b b1       	in	r25, 0x0b	; 11
     2e2:	80 91 60 03 	lds	r24, 0x0360
     2e6:	82 95       	swap	r24
     2e8:	80 7f       	andi	r24, 0xF0	; 240
     2ea:	89 2b       	or	r24, r25
     2ec:	8b b9       	out	0x0b, r24	; 11
    
    // Pull de enable pin omlaag, bij falling edge wordt de data weggeschreven
    PORTD &= ~(1 << E);
     2ee:	5b 98       	cbi	0x0b, 3	; 11
     2f0:	08 95       	ret

000002f2 <lcd_write_command>:

// Methode om de lcd in 4 bit mode te zetten
void lcd_write_command(uint8_t value)
{
    // Zet RS laag voor het versturen van een commando
    PORTD &= ~(1 << RS);
     2f2:	5a 98       	cbi	0x0b, 2	; 11
    
    // Low nibble
    
    // Pull de enable pin omhoog
    PORTD |= (1 << E);
     2f4:	5b 9a       	sbi	0x0b, 3	; 11
    
    // Schrijft high nibble weg (standaard 0), clear operatie
    PORTD &= ~((1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7));
     2f6:	9b b1       	in	r25, 0x0b	; 11
     2f8:	9f 70       	andi	r25, 0x0F	; 15
     2fa:	9b b9       	out	0x0b, r25	; 11
    
    // Pull de enable pin omlaag, bij falling edge wordt de data weggeschreven
    PORTD &= ~(1 << E);
     2fc:	5b 98       	cbi	0x0b, 3	; 11
    
    // High nibble
    
    // Pull de enable pin omhoog
    PORTD |= (1 << E);
     2fe:	5b 9a       	sbi	0x0b, 3	; 11
    
    // Schrijf de low nibble weg, clear oude data eerst
    PORTD &= ~((1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7));
     300:	9b b1       	in	r25, 0x0b	; 11
     302:	9f 70       	andi	r25, 0x0F	; 15
     304:	9b b9       	out	0x0b, r25	; 11
    PORTD |= value << 4;
     306:	2b b1       	in	r18, 0x0b	; 11
     308:	30 e1       	ldi	r19, 0x10	; 16
     30a:	83 9f       	mul	r24, r19
     30c:	c0 01       	movw	r24, r0
     30e:	11 24       	eor	r1, r1
     310:	28 2b       	or	r18, r24
     312:	2b b9       	out	0x0b, r18	; 11
    
    // Pull de enable pin omlaag, bij falling edge wordt de data weggeschreven
    PORTD &= ~(1 << E);
     314:	5b 98       	cbi	0x0b, 3	; 11
     316:	08 95       	ret

00000318 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     318:	8f e5       	ldi	r24, 0x5F	; 95
     31a:	9a ee       	ldi	r25, 0xEA	; 234
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <lcd_init+0x4>
     320:	00 c0       	rjmp	.+0      	; 0x322 <lcd_init+0xa>
     322:	00 00       	nop
{
    // Wacht op juiste voltage
    _delay_ms(15);
    
    // Zet de poorten op output
    DDRD |= (1 << DB4) | (1 << DB5) | (1 << DB6) | (1 << DB7) | (1 << E) | (1 << RS);
     324:	8a b1       	in	r24, 0x0a	; 10
     326:	8c 6f       	ori	r24, 0xFC	; 252
     328:	8a b9       	out	0x0a, r24	; 10
    
    // Zet de commando's in de struct
    lcd_commandos.clear              = 0b0001;
    lcd_commandos.cursor_home        = 0b0010;
     32a:	81 e2       	ldi	r24, 0x21	; 33
     32c:	80 93 5d 03 	sts	0x035D, r24
    lcd_commandos.cursor_forward     = 0b0110;     // bit[0] = not shifted
    lcd_commandos.cursor_backwards   = 0b0100;     // bit[0] = not shifted
     330:	86 e4       	ldi	r24, 0x46	; 70
     332:	80 93 5e 03 	sts	0x035E, r24
    lcd_commandos.display_on         = 0b1100;     // bit[1] = cursor off | bit[0] = blink off
    lcd_commandos.display_off        = 0b1000;     // bit[1] = cursor off | bit[0] = blink off
     336:	8c e8       	ldi	r24, 0x8C	; 140
     338:	80 93 5f 03 	sts	0x035F, r24
    lcd_commandos.bit4               = 0b0010;     // bit[1] = 4 bits mode
     33c:	e0 e6       	ldi	r30, 0x60	; 96
     33e:	f3 e0       	ldi	r31, 0x03	; 3
     340:	80 81       	ld	r24, Z
     342:	80 7f       	andi	r24, 0xF0	; 240
     344:	82 60       	ori	r24, 0x02	; 2
     346:	80 83       	st	Z, r24

    // Stel de lcd in met de juiste functies
    lcd_4bit_mode();
     348:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_4bit_mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34c:	87 ec       	ldi	r24, 0xC7	; 199
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <lcd_init+0x38>
     354:	00 c0       	rjmp	.+0      	; 0x356 <lcd_init+0x3e>
     356:	00 00       	nop
    _delay_us(50);
    
    // Zet het lcd aan
    lcd_write_command(lcd_commandos.display_on);
     358:	80 91 5f 03 	lds	r24, 0x035F
     35c:	8f 70       	andi	r24, 0x0F	; 15
     35e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_write_command>
     362:	87 ec       	ldi	r24, 0xC7	; 199
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <lcd_init+0x4e>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <lcd_init+0x54>
     36c:	00 00       	nop
    _delay_us(50);
    
    // Clear het display
    lcd_write_command(lcd_commandos.clear);
     36e:	80 91 5d 03 	lds	r24, 0x035D
     372:	8f 70       	andi	r24, 0x0F	; 15
     374:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     378:	8f e3       	ldi	r24, 0x3F	; 63
     37a:	9f e1       	ldi	r25, 0x1F	; 31
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_init+0x64>
     380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_init+0x6a>
     382:	00 00       	nop
     384:	08 95       	ret

00000386 <lcd_write_character>:

// Methode om de juiste waardes op de poorten te zetten
void lcd_write_character(uint8_t value)
{
    // Zet RS hoog voor het versturen van characters
    PORTD |= (1 << RS);
     386:	5a 9a       	sbi	0x0b, 2	; 11
    
    // High nibble
    
    // Pull de enable pin omhoog
    PORTD |= (1 << E);
     388:	5b 9a       	sbi	0x0b, 3	; 11
    
    // Schrijf eerst de high nibble weg
    PORTD &= 0x0F;
     38a:	9b b1       	in	r25, 0x0b	; 11
     38c:	9f 70       	andi	r25, 0x0F	; 15
     38e:	9b b9       	out	0x0b, r25	; 11
    PORTD |= value & 0xF0;
     390:	2b b1       	in	r18, 0x0b	; 11
     392:	98 2f       	mov	r25, r24
     394:	90 7f       	andi	r25, 0xF0	; 240
     396:	92 2b       	or	r25, r18
     398:	9b b9       	out	0x0b, r25	; 11
    
    // Pull de enable pin omlaag, bij falling edge wordt de data weggeschreven
    PORTD &= ~(1 << E);
     39a:	5b 98       	cbi	0x0b, 3	; 11
    
    // Low nibble
    
    // Pull de enable pin omhoog
    PORTD |= (1 << E);
     39c:	5b 9a       	sbi	0x0b, 3	; 11
    
    // Schrijf daarna de low nibble weg
    PORTD &= 0x0F;
     39e:	9b b1       	in	r25, 0x0b	; 11
     3a0:	9f 70       	andi	r25, 0x0F	; 15
     3a2:	9b b9       	out	0x0b, r25	; 11
    PORTD |= value << 4;
     3a4:	2b b1       	in	r18, 0x0b	; 11
     3a6:	30 e1       	ldi	r19, 0x10	; 16
     3a8:	83 9f       	mul	r24, r19
     3aa:	c0 01       	movw	r24, r0
     3ac:	11 24       	eor	r1, r1
     3ae:	28 2b       	or	r18, r24
     3b0:	2b b9       	out	0x0b, r18	; 11
    
    // Pull de enable pin omlaag, bij falling edge wordt de data weggeschreven
    PORTD &= ~(1 << E);
     3b2:	5b 98       	cbi	0x0b, 3	; 11
     3b4:	08 95       	ret

000003b6 <lcd_send_character>:
{
    // Int voor het versturen van het character
    uint8_t data;
    
    // Character A is gelijk aan het getal 97 (ASCII)
    data = lcd_letter_characters[character - 97];
     3b6:	e8 2f       	mov	r30, r24
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	ef 54       	subi	r30, 0x4F	; 79
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
    
    // Schrijft de write command weg op de output poorten
    lcd_write_character(data);
     3be:	80 81       	ld	r24, Z
     3c0:	0e 94 c3 01 	call	0x386	; 0x386 <lcd_write_character>
    
    // Schuift de cursor een plaats op
    lcd_write_command(lcd_commandos.cursor_forward);
     3c4:	80 91 5e 03 	lds	r24, 0x035E
     3c8:	8f 70       	andi	r24, 0x0F	; 15
     3ca:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <lcd_write_command>

000003ce <lcd_print>:
    PORTD &= ~(1 << E);
}

// Methode om een string op het display te zetten
void lcd_print(char *string)
{
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	1f 92       	push	r1
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	18 2f       	mov	r17, r24
    // Cleart het lcd scherm voor een nieuwe string
    lcd_write_command(lcd_commandos.clear);
     3e0:	80 91 5d 03 	lds	r24, 0x035D
     3e4:	8f 70       	andi	r24, 0x0F	; 15
     3e6:	99 83       	std	Y+1, r25	; 0x01
     3e8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_write_command>
     3ec:	af e3       	ldi	r26, 0x3F	; 63
     3ee:	bf e1       	ldi	r27, 0x1F	; 31
     3f0:	11 97       	sbiw	r26, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_print+0x22>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <lcd_print+0x28>
     3f6:	00 00       	nop
     3f8:	e1 2e       	mov	r14, r17
     3fa:	99 81       	ldd	r25, Y+1	; 0x01
     3fc:	f9 2e       	mov	r15, r25
     3fe:	f7 01       	movw	r30, r14
    _delay_ms(2);
    
    // Print de characters uit de string op het lcd
    for (int i = 0; string[i] != '\0'; ++i) {
     400:	80 81       	ld	r24, Z
     402:	88 23       	and	r24, r24
     404:	69 f0       	breq	.+26     	; 0x420 <lcd_print+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     406:	8f e8       	ldi	r24, 0x8F	; 143
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <lcd_print+0x3c>
     40e:	00 c0       	rjmp	.+0      	; 0x410 <lcd_print+0x42>
     410:	00 00       	nop
     412:	9f ef       	ldi	r25, 0xFF	; 255
     414:	e9 1a       	sub	r14, r25
     416:	f9 0a       	sbc	r15, r25
        _delay_us(100);
        lcd_send_character(string[i]);
     418:	80 81       	ld	r24, Z
     41a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_send_character>
     41e:	ef cf       	rjmp	.-34     	; 0x3fe <lcd_print+0x30>
    }
}
     420:	0f 90       	pop	r0
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	08 95       	ret

0000042e <lcd_send_number>:
{
    // Int voor het versturen van het character
    uint8_t data;
    
    // Character 0 is gelijk aan het getal 48 (ASCII)
    data = lcd_number_characters[number - 48];
     42e:	e8 2f       	mov	r30, r24
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	e4 50       	subi	r30, 0x04	; 4
     434:	ff 4f       	sbci	r31, 0xFF	; 255
    
    // Schrijft de write command weg op de output poorten
    lcd_write_character(data);
     436:	80 81       	ld	r24, Z
     438:	0e 94 c3 01 	call	0x386	; 0x386 <lcd_write_character>
    
    // Schuift de cursor een plaats op
    lcd_write_command(lcd_commandos.cursor_forward);
     43c:	80 91 5e 03 	lds	r24, 0x035E
     440:	8f 70       	andi	r24, 0x0F	; 15
     442:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <lcd_write_command>

00000446 <__vector_13>:
    
	return 0;
}

// Timer interrupt, checkt of er op basis van de tiltsensor een alarm moet worden gegenereerd
ISR(TIMER1_OVF_vect) {
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	2f 93       	push	r18
     452:	3f 93       	push	r19
     454:	4f 93       	push	r20
     456:	5f 93       	push	r21
     458:	6f 93       	push	r22
     45a:	7f 93       	push	r23
     45c:	8f 93       	push	r24
     45e:	9f 93       	push	r25
     460:	af 93       	push	r26
     462:	bf 93       	push	r27
     464:	ef 93       	push	r30
     466:	ff 93       	push	r31
    // Leest de tiltsensor uit
    if(tilt_getAlarm() && armed) {
     468:	0e 94 35 04 	call	0x86a	; 0x86a <tilt_getAlarm>
     46c:	89 2b       	or	r24, r25
     46e:	a1 f0       	breq	.+40     	; 0x498 <__vector_13+0x52>
     470:	80 91 36 01 	lds	r24, 0x0136
     474:	88 23       	and	r24, r24
     476:	81 f0       	breq	.+32     	; 0x498 <__vector_13+0x52>
#if DEBUG
        printf("ALARM\n");
     478:	84 ee       	ldi	r24, 0xE4	; 228
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
#endif
        // Print alarm op de lcd
        lcd_print("alarm");
     480:	8a ee       	ldi	r24, 0xEA	; 234
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_print>
        
        // Broadcast een alarm
        udp_broadcast(alarm, 3);
     488:	63 e0       	ldi	r22, 0x03	; 3
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	86 e0       	ldi	r24, 0x06	; 6
     48e:	0e 94 bf 04 	call	0x97e	; 0x97e <udp_broadcast>
        
        // Zet de led aan
        PORTB |= (1 << LED);
     492:	29 9a       	sbi	0x05, 1	; 5
        
        // Zet de buzzer aan
        PORTB |= (1 << BUZZER);
     494:	28 9a       	sbi	0x05, 0	; 5
     496:	09 c0       	rjmp	.+18     	; 0x4aa <__vector_13+0x64>
    } else {
#if DEBUG
        printf("BROADCAST\n");
     498:	80 ef       	ldi	r24, 0xF0	; 240
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
#endif
        // Broadcast een alive
        udp_broadcast(alive, 3);
     4a0:	63 e0       	ldi	r22, 0x03	; 3
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	85 e0       	ldi	r24, 0x05	; 5
     4a6:	0e 94 bf 04 	call	0x97e	; 0x97e <udp_broadcast>
    }
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <spi_init>:
#include "spi.h"

// Methode voor het opzetten van de SPI verbinding
void spi_init(void) {
    // Zet de mosi, sck en ss lijnen op output voor het aansturen van de SPI verbinding
    DDR_SPI = ((1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_SS));
     4cc:	8c e2       	ldi	r24, 0x2C	; 44
     4ce:	84 b9       	out	0x04, r24	; 4
    
    // Schrijft naar SPI control register
    // SPE bit voor SPI enable
    // MSTR bit voor het setten als master
    SPCR = ((1 << SPE) | (1 << MSTR));
     4d0:	80 e5       	ldi	r24, 0x50	; 80
     4d2:	8c bd       	out	0x2c, r24	; 44
     4d4:	08 95       	ret

000004d6 <spi_transmit>:
}

// Methode om met behulp van SPI naar het ethernet shield te transmitten
void spi_transmit(uint16_t address, uint8_t data) {
    SPI_PORT &= ~(1 << SPI_CS);         // Activeert de slave en synchroniseerd
     4d6:	2a 98       	cbi	0x05, 2	; 5
    SPDR = 0xF0;                        // Verstuurt write commando voor transmitten
     4d8:	20 ef       	ldi	r18, 0xF0	; 240
     4da:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     4dc:	0d b4       	in	r0, 0x2d	; 45
     4de:	07 fe       	sbrs	r0, 7
     4e0:	fd cf       	rjmp	.-6      	; 0x4dc <spi_transmit+0x6>
    SPDR = address >> 8;                // Neemt de hoogste byte van het adres en stuurt deze
     4e2:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     4e4:	0d b4       	in	r0, 0x2d	; 45
     4e6:	07 fe       	sbrs	r0, 7
     4e8:	fd cf       	rjmp	.-6      	; 0x4e4 <spi_transmit+0xe>
    SPDR = address;                     // Neemt de laagste byte van het adres en stuurt deze
     4ea:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     4ec:	0d b4       	in	r0, 0x2d	; 45
     4ee:	07 fe       	sbrs	r0, 7
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <spi_transmit+0x16>
    SPDR = data;                        // Verstuurt de data naar het adres
     4f2:	6e bd       	out	0x2e, r22	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     4f4:	0d b4       	in	r0, 0x2d	; 45
     4f6:	07 fe       	sbrs	r0, 7
     4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <spi_transmit+0x1e>
    SPI_PORT |= (1<<SPI_CS);            // Deactiveerd de slave
     4fa:	2a 9a       	sbi	0x05, 2	; 5
     4fc:	08 95       	ret

000004fe <spi_receive>:
}

// Methode om met behulp van SPI data van het ethernet shield te ontvangen
unsigned char spi_receive(uint16_t address) {
    SPI_PORT &= ~(1<<SPI_CS);           // Activeert de slave en synchroniseerd
     4fe:	2a 98       	cbi	0x05, 2	; 5
    SPDR = 0x0F;                        // Verstuurt read commando voor receiven
     500:	2f e0       	ldi	r18, 0x0F	; 15
     502:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     504:	0d b4       	in	r0, 0x2d	; 45
     506:	07 fe       	sbrs	r0, 7
     508:	fd cf       	rjmp	.-6      	; 0x504 <spi_receive+0x6>
    SPDR = address >> 8;                // Neemt de hoogste byte van het adres en stuurt deze
     50a:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     50c:	0d b4       	in	r0, 0x2d	; 45
     50e:	07 fe       	sbrs	r0, 7
     510:	fd cf       	rjmp	.-6      	; 0x50c <spi_receive+0xe>
    SPDR = address;                     // Neemt de laagste byte van het adres en stuurt deze
     512:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     514:	0d b4       	in	r0, 0x2d	; 45
     516:	07 fe       	sbrs	r0, 7
     518:	fd cf       	rjmp	.-6      	; 0x514 <spi_receive+0x16>
    SPDR = 0x00;                        // Dummy data
     51a:	1e bc       	out	0x2e, r1	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     51c:	0d b4       	in	r0, 0x2d	; 45
     51e:	07 fe       	sbrs	r0, 7
     520:	fd cf       	rjmp	.-6      	; 0x51c <spi_receive+0x1e>
    SPI_PORT |= (1<<SPI_CS);            // Deactiveerd de slave
     522:	2a 9a       	sbi	0x05, 2	; 5
    
    return SPDR;                        // Returnt de verstuurde data uit het SPI data register
     524:	8e b5       	in	r24, 0x2e	; 46
}
     526:	08 95       	ret

00000528 <tcp_create_socket>:
// Counter voor het bijhouden van het messagenummer
static int message_number = 0;

// Methode om een TCP socket mee te creeren
void tcp_create_socket(void) {
    spi_transmit(S1MR, (1 << P0));              // Maakt van socket 1 een TCP socket
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	95 e0       	ldi	r25, 0x05	; 5
     52e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    uint16_t port = 30000;                      // Luistert naar data op poort 3000
    spi_transmit(S1PORTH, port >> 8);           // Zet hoogste byte
     532:	65 e7       	ldi	r22, 0x75	; 117
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	95 e0       	ldi	r25, 0x05	; 5
     538:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S1PORTL, port);                // Zet laagste byte
     53c:	60 e3       	ldi	r22, 0x30	; 48
     53e:	85 e0       	ldi	r24, 0x05	; 5
     540:	95 e0       	ldi	r25, 0x05	; 5
     542:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    spi_transmit(S1CR, OPEN);                   // Initialiseert de socket met de instellingen
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	95 e0       	ldi	r25, 0x05	; 5
     54c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    uint8_t status = spi_receive(S1SR);         // Haalt de status op
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	95 e0       	ldi	r25, 0x05	; 5
     554:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
    
    if(status != SOCK_INIT) {                   // Check of de status (SOCK_INIT) klopt met de instellingen
     558:	83 31       	cpi	r24, 0x13	; 19
     55a:	31 f0       	breq	.+12     	; 0x568 <tcp_create_socket+0x40>
        spi_transmit(S1CR, CLOSE);              // Anders sluit de verbinding
     55c:	60 e1       	ldi	r22, 0x10	; 16
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	95 e0       	ldi	r25, 0x05	; 5
     562:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     566:	e0 cf       	rjmp	.-64     	; 0x528 <tcp_create_socket>
     568:	08 95       	ret

0000056a <tcp_disconnect>:
    }
}

// Methode om een disconnect request te versturen
void tcp_disconnect(void) {
    spi_transmit(S1CR, DISCON);
     56a:	68 e0       	ldi	r22, 0x08	; 8
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	95 e0       	ldi	r25, 0x05	; 5
     570:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <spi_transmit>

00000574 <tcp_close_socket>:
}

// Methode om de TCP socket mee te sluiten
void tcp_close_socket(void) {
    spi_transmit(S1CR, CLOSE);                  // Sluit de verbinding
     574:	60 e1       	ldi	r22, 0x10	; 16
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	95 e0       	ldi	r25, 0x05	; 5
     57a:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <spi_transmit>

0000057e <tcp_listen>:
}

// Methode naar een TCP request te luisteren
void tcp_listen(void) {
    // Reset het message nummer voor een volgende verbinding
    message_number = 0;
     57e:	10 92 5a 03 	sts	0x035A, r1
     582:	10 92 59 03 	sts	0x0359, r1
    
    // Laat de socket naar luister naar requests
    spi_transmit(S1CR, LISTEN);
     586:	62 e0       	ldi	r22, 0x02	; 2
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	95 e0       	ldi	r25, 0x05	; 5
     58c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
        
    // Haal de status op
    uint8_t status = spi_receive(S1SR);
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	95 e0       	ldi	r25, 0x05	; 5
     594:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
        
    // Check of de socket goed is ingesteld, verbind anders opnieuw
    if (status != SOCK_LISTEN) {
     598:	84 31       	cpi	r24, 0x14	; 20
     59a:	31 f0       	breq	.+12     	; 0x5a8 <tcp_listen+0x2a>
        spi_transmit(S1CR, CLOSE);
     59c:	60 e1       	ldi	r22, 0x10	; 16
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	95 e0       	ldi	r25, 0x05	; 5
     5a2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     5a6:	eb cf       	rjmp	.-42     	; 0x57e <tcp_listen>
     5a8:	08 95       	ret

000005aa <tcp_to_monitor>:
        tcp_listen();
    }
}

// Methode om data te sturen naar de monitor
void tcp_to_monitor(tcpflag flag, uint8_t data[], int length) {
     5aa:	af 92       	push	r10
     5ac:	bf 92       	push	r11
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	d8 2e       	mov	r13, r24
     5c0:	7b 01       	movw	r14, r22
     5c2:	8a 01       	movw	r16, r20
    
    // Verhoogt het messagenummer met 1
    ++message_number;
     5c4:	20 91 59 03 	lds	r18, 0x0359
     5c8:	30 91 5a 03 	lds	r19, 0x035A
     5cc:	2f 5f       	subi	r18, 0xFF	; 255
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
     5d0:	30 93 5a 03 	sts	0x035A, r19
     5d4:	20 93 59 03 	sts	0x0359, r18
    
    // Vraag de vrije ruimte op voor het versturen van pakket
    // Als deze niet groot genoeg wacht op beschikbare ruimte
    uint16_t size = 0;
    do {
        size = spi_receive(S1TXFSRH);
     5d8:	80 e2       	ldi	r24, 0x20	; 32
     5da:	95 e0       	ldi	r25, 0x05	; 5
     5dc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     5e0:	c8 2f       	mov	r28, r24
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
        size <<= 8;
     5e4:	dc 2f       	mov	r29, r28
     5e6:	cc 27       	eor	r28, r28
        size |= spi_receive(S1TXFSRL);
     5e8:	81 e2       	ldi	r24, 0x21	; 33
     5ea:	95 e0       	ldi	r25, 0x05	; 5
     5ec:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f0:	ef e9       	ldi	r30, 0x9F	; 159
     5f2:	ff e0       	ldi	r31, 0x0F	; 15
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <tcp_to_monitor+0x4a>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <tcp_to_monitor+0x50>
     5fa:	00 00       	nop
     5fc:	c8 2b       	or	r28, r24
        _delay_ms(1);
    }
    while(length > size);
     5fe:	c0 17       	cp	r28, r16
     600:	d1 07       	cpc	r29, r17
     602:	50 f3       	brcs	.-44     	; 0x5d8 <tcp_to_monitor+0x2e>
    
    // Zet het ipadres in het socket geheugen
    spi_transmit(S1DIPR + 0, 10);
     604:	6a e0       	ldi	r22, 0x0A	; 10
     606:	8c e0       	ldi	r24, 0x0C	; 12
     608:	95 e0       	ldi	r25, 0x05	; 5
     60a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S1DIPR + 1, 0);
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	8d e0       	ldi	r24, 0x0D	; 13
     612:	95 e0       	ldi	r25, 0x05	; 5
     614:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S1DIPR + 2, 4);
     618:	64 e0       	ldi	r22, 0x04	; 4
     61a:	8e e0       	ldi	r24, 0x0E	; 14
     61c:	95 e0       	ldi	r25, 0x05	; 5
     61e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S1DIPR + 3, 0);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	8f e0       	ldi	r24, 0x0F	; 15
     626:	95 e0       	ldi	r25, 0x05	; 5
     628:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Zet de destination poort
    spi_transmit(S1DPORTH, 30000 >> 8);
     62c:	65 e7       	ldi	r22, 0x75	; 117
     62e:	80 e1       	ldi	r24, 0x10	; 16
     630:	95 e0       	ldi	r25, 0x05	; 5
     632:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S1DPORTL, 30000 & 0xFF);
     636:	60 e3       	ldi	r22, 0x30	; 48
     638:	81 e1       	ldi	r24, 0x11	; 17
     63a:	95 e0       	ldi	r25, 0x05	; 5
     63c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S1TXWRH) << 8;
     640:	84 e2       	ldi	r24, 0x24	; 36
     642:	95 e0       	ldi	r25, 0x05	; 5
     644:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     648:	c8 2f       	mov	r28, r24
     64a:	d0 e0       	ldi	r29, 0x00	; 0
     64c:	dc 2f       	mov	r29, r28
     64e:	cc 27       	eor	r28, r28
    pointer |= spi_receive(S1TXWRL);
     650:	85 e2       	ldi	r24, 0x25	; 37
     652:	95 e0       	ldi	r25, 0x05	; 5
     654:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     658:	c8 2b       	or	r28, r24
    
    // Bereken het start adres
    uint16_t address = S1TXBASE + (pointer & 0x07FF);
     65a:	ce 01       	movw	r24, r28
     65c:	97 70       	andi	r25, 0x07	; 7
    
    // Schrijft de flag weg in het socketgeheugen
    spi_transmit(address, flag);
     65e:	6d 2d       	mov	r22, r13
     660:	98 5b       	subi	r25, 0xB8	; 184
     662:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    ++pointer;
    
    // Schrijf de high byte van het message nummer weg
    address = S1TXBASE + (pointer & 0x07FF);
    spi_transmit(address, message_number >> 8);
     666:	60 91 5a 03 	lds	r22, 0x035A
    // Bereken het start adres
    uint16_t address = S1TXBASE + (pointer & 0x07FF);
    
    // Schrijft de flag weg in het socketgeheugen
    spi_transmit(address, flag);
    ++pointer;
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
    
    // Schrijf de high byte van het message nummer weg
    address = S1TXBASE + (pointer & 0x07FF);
     66e:	97 70       	andi	r25, 0x07	; 7
    spi_transmit(address, message_number >> 8);
     670:	98 5b       	subi	r25, 0xB8	; 184
     672:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    ++pointer;
     676:	ce 01       	movw	r24, r28
     678:	02 96       	adiw	r24, 0x02	; 2
    
    // Schrijf de low byte van het message nummer weg
    address = S1TXBASE + (pointer & 0x07FF);
     67a:	97 70       	andi	r25, 0x07	; 7
    spi_transmit(address, message_number);
     67c:	60 91 59 03 	lds	r22, 0x0359
     680:	98 5b       	subi	r25, 0xB8	; 184
     682:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    ++pointer;
     686:	6e 01       	movw	r12, r28
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	cf 0e       	add	r12, r31
     68c:	d1 1c       	adc	r13, r1
    
    // Schrijft de data weg in het geheugen
    for (int i = 0; i < length; ++i) {
     68e:	e7 01       	movw	r28, r14
    ++pointer;
    
    // Schrijf de low byte van het message nummer weg
    address = S1TXBASE + (pointer & 0x07FF);
    spi_transmit(address, message_number);
    ++pointer;
     690:	c6 01       	movw	r24, r12
     692:	9e 01       	movw	r18, r28
     694:	2e 19       	sub	r18, r14
     696:	3f 09       	sbc	r19, r15
    
    // Schrijft de data weg in het geheugen
    for (int i = 0; i < length; ++i) {
     698:	20 17       	cp	r18, r16
     69a:	31 07       	cpc	r19, r17
     69c:	5c f4       	brge	.+22     	; 0x6b4 <tcp_to_monitor+0x10a>
        address = S1TXBASE + ((pointer++) & 0x07FF);
     69e:	5c 01       	movw	r10, r24
     6a0:	2f ef       	ldi	r18, 0xFF	; 255
     6a2:	a2 1a       	sub	r10, r18
     6a4:	b2 0a       	sbc	r11, r18
        spi_transmit(address, data[i]);
     6a6:	69 91       	ld	r22, Y+
    spi_transmit(address, message_number);
    ++pointer;
    
    // Schrijft de data weg in het geheugen
    for (int i = 0; i < length; ++i) {
        address = S1TXBASE + ((pointer++) & 0x07FF);
     6a8:	97 70       	andi	r25, 0x07	; 7
        spi_transmit(address, data[i]);
     6aa:	98 5b       	subi	r25, 0xB8	; 184
     6ac:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(address, message_number);
    ++pointer;
    
    // Schrijft de data weg in het geheugen
    for (int i = 0; i < length; ++i) {
        address = S1TXBASE + ((pointer++) & 0x07FF);
     6b0:	c5 01       	movw	r24, r10
     6b2:	ef cf       	rjmp	.-34     	; 0x692 <tcp_to_monitor+0xe8>
     6b4:	17 ff       	sbrs	r17, 7
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <tcp_to_monitor+0x112>
     6b8:	00 e0       	ldi	r16, 0x00	; 0
     6ba:	10 e0       	ldi	r17, 0x00	; 0
     6bc:	0c 0d       	add	r16, r12
     6be:	1d 1d       	adc	r17, r13
        spi_transmit(address, data[i]);
    }
    
    // Berg de pointer weer op
    spi_transmit(S1TXWRH, pointer >> 8);
     6c0:	61 2f       	mov	r22, r17
     6c2:	84 e2       	ldi	r24, 0x24	; 36
     6c4:	95 e0       	ldi	r25, 0x05	; 5
     6c6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S1TXWRL, pointer);
     6ca:	60 2f       	mov	r22, r16
     6cc:	85 e2       	ldi	r24, 0x25	; 37
     6ce:	95 e0       	ldi	r25, 0x05	; 5
     6d0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Verstuurt het pakket
    spi_transmit(S1CR, SEND);
     6d4:	60 e2       	ldi	r22, 0x20	; 32
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	95 e0       	ldi	r25, 0x05	; 5
     6da:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Wacht op het versturen (0x00 = verstuurd)
    while(spi_receive(S1CR));
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	95 e0       	ldi	r25, 0x05	; 5
     6e2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     6e6:	81 11       	cpse	r24, r1
     6e8:	fa cf       	rjmp	.-12     	; 0x6de <tcp_to_monitor+0x134>
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	08 95       	ret

00000700 <tcp_from_monitor>:

// Methode om data mee te ontvangen
void tcp_from_monitor(uint8_t buffer[]) {
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
    // Vraag de grootte van de binnenkomende data op
    uint16_t size = spi_receive(S1RXRSRH) << 8;
     716:	86 e2       	ldi	r24, 0x26	; 38
     718:	95 e0       	ldi	r25, 0x05	; 5
     71a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     71e:	08 2f       	mov	r16, r24
     720:	10 e0       	ldi	r17, 0x00	; 0
     722:	10 2f       	mov	r17, r16
     724:	00 27       	eor	r16, r16
    size |= spi_receive(S1RXRSRL);
     726:	87 e2       	ldi	r24, 0x27	; 39
     728:	95 e0       	ldi	r25, 0x05	; 5
     72a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     72e:	08 2b       	or	r16, r24
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S1RXRRH) << 8;
     730:	88 e2       	ldi	r24, 0x28	; 40
     732:	95 e0       	ldi	r25, 0x05	; 5
     734:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     738:	e8 2e       	mov	r14, r24
     73a:	f1 2c       	mov	r15, r1
     73c:	fe 2c       	mov	r15, r14
     73e:	ee 24       	eor	r14, r14
    pointer |= spi_receive(S1RXRRL);
     740:	89 e2       	ldi	r24, 0x29	; 41
     742:	95 e0       	ldi	r25, 0x05	; 5
     744:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     748:	e8 2a       	or	r14, r24
    
    // Bereken de offset
    uint16_t offset = pointer & 0x07FF;
     74a:	97 01       	movw	r18, r14
     74c:	37 70       	andi	r19, 0x07	; 7
    
    // Overflow van de databuffer
    if (offset + size > 2000) {
     74e:	20 0f       	add	r18, r16
     750:	31 1f       	adc	r19, r17
     752:	21 3d       	cpi	r18, 0xD1	; 209
     754:	37 40       	sbci	r19, 0x07	; 7
     756:	70 f5       	brcc	.+92     	; 0x7b4 <tcp_from_monitor+0xb4>
     758:	68 01       	movw	r12, r16
     75a:	cc 0e       	add	r12, r28
     75c:	dd 1e       	adc	r13, r29
     75e:	57 01       	movw	r10, r14
     760:	ac 1a       	sub	r10, r28
     762:	bd 0a       	sbc	r11, r29
     764:	c5 01       	movw	r24, r10
     766:	8c 0f       	add	r24, r28
     768:	9d 1f       	adc	r25, r29
        // Doe niets
    } else {
        // Berekent het adres met de pointer en mask
        // Haalt de data op uit het geheugen minus de eerste 8 header bytes
        uint16_t address;
        for (int i = 0; i < size; ++i) {
     76a:	cc 15       	cp	r28, r12
     76c:	dd 05       	cpc	r29, r13
     76e:	31 f0       	breq	.+12     	; 0x77c <tcp_from_monitor+0x7c>
            address = S1RXBASE + ((pointer++) & 0x07FF);
     770:	97 70       	andi	r25, 0x07	; 7
            buffer[i] = spi_receive(address);
     772:	98 59       	subi	r25, 0x98	; 152
     774:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     778:	89 93       	st	Y+, r24
     77a:	f4 cf       	rjmp	.-24     	; 0x764 <tcp_from_monitor+0x64>
     77c:	0e 0d       	add	r16, r14
     77e:	1f 1d       	adc	r17, r15
        }
        
        // Harde nul voor string
        buffer[size] = '\0';
     780:	18 82       	st	Y, r1
        
        // Berg de pointer weer op
        spi_transmit(S1RXRRH, pointer >> 8);
     782:	61 2f       	mov	r22, r17
     784:	88 e2       	ldi	r24, 0x28	; 40
     786:	95 e0       	ldi	r25, 0x05	; 5
     788:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
        spi_transmit(S1RXRRL, pointer);
     78c:	60 2f       	mov	r22, r16
     78e:	89 e2       	ldi	r24, 0x29	; 41
     790:	95 e0       	ldi	r25, 0x05	; 5
     792:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
        
        // Registreer dat het pakket is opgehaald
        spi_transmit(S1CR, RECV);
     796:	60 e4       	ldi	r22, 0x40	; 64
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	95 e0       	ldi	r25, 0x05	; 5
    }
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	cf 90       	pop	r12
     7ac:	bf 90       	pop	r11
     7ae:	af 90       	pop	r10
        // Berg de pointer weer op
        spi_transmit(S1RXRRH, pointer >> 8);
        spi_transmit(S1RXRRL, pointer);
        
        // Registreer dat het pakket is opgehaald
        spi_transmit(S1CR, RECV);
     7b0:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <spi_transmit>
    }
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	08 95       	ret

000007ca <tilt_analogRead>:
int tilt_analogRead(uint8_t adcPin)
{
    int ADCval;
    //ADMUX is het ADC multiplexer selection register, hier wordt de pin  gezet die wordt meegegeven als parameter.
    // Dit kan gedaan worden met enkel "=", omdat dit het eerste is wat gezet wordt.
    ADMUX = adcPin;
     7ca:	80 93 7c 00 	sts	0x007C, r24
    // De AVcc met een externe condensator wordt gezet op de AREF pin
    ADMUX |= (1 << REFS0 | 0 << REFS1);
     7ce:	80 91 7c 00 	lds	r24, 0x007C
     7d2:	80 64       	ori	r24, 0x40	; 64
     7d4:	80 93 7c 00 	sts	0x007C, r24
    //  maak het register weer vrij
    ADMUX &= ~(1 << ADLAR);
     7d8:	80 91 7c 00 	lds	r24, 0x007C
     7dc:	8f 7d       	andi	r24, 0xDF	; 223
     7de:	80 93 7c 00 	sts	0x007C, r24

    // De prescaler wordt hier op 128 gezet voor de 8Mhz
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     7e2:	80 91 7a 00 	lds	r24, 0x007A
     7e6:	87 60       	ori	r24, 0x07	; 7
     7e8:	80 93 7a 00 	sts	0x007A, r24
    // De ADC wordt ge-enabled
    ADCSRA |= (1 << ADEN);
     7ec:	80 91 7a 00 	lds	r24, 0x007A
     7f0:	80 68       	ori	r24, 0x80	; 128
     7f2:	80 93 7a 00 	sts	0x007A, r24

    //De ADSC bit wordt gezet, daarmee wordt de de conversie gestart.
    ADCSRA |= (1 << ADSC);
     7f6:	80 91 7a 00 	lds	r24, 0x007A
     7fa:	80 64       	ori	r24, 0x40	; 64
     7fc:	80 93 7a 00 	sts	0x007A, r24

    // Door deze regel blijft hij wachten tot de conversie klaar is.
    // zolang de bit op 1 staat wacht hij.
    while(ADCSRA & (1 << ADSC));
     800:	80 91 7a 00 	lds	r24, 0x007A
     804:	86 fd       	sbrc	r24, 6
     806:	fc cf       	rjmp	.-8      	; 0x800 <tilt_analogRead+0x36>

    // Op de plek van de ADCval wordt ADCL opgeslagen.
    // Vervolgens wordt de ADCH gelezen en opgeslagen hierdoor kan de ADC weer opnieuw gebruikt worden.
    ADCval = ADCL;
     808:	20 91 78 00 	lds	r18, 0x0078
    ADCval = (ADCH << 8) + ADCval;
     80c:	80 91 79 00 	lds	r24, 0x0079
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	98 2f       	mov	r25, r24
     814:	88 27       	eor	r24, r24

    return ADCval;
}
     816:	82 0f       	add	r24, r18
     818:	91 1d       	adc	r25, r1
     81a:	08 95       	ret

0000081c <tilt_start>:

void tilt_start(void){
	xAs = tilt_analogRead(0);
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <tilt_analogRead>
     822:	90 93 62 03 	sts	0x0362, r25
     826:	80 93 61 03 	sts	0x0361, r24
 	yAs = tilt_analogRead(1);
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <tilt_analogRead>
     830:	90 93 64 03 	sts	0x0364, r25
     834:	80 93 63 03 	sts	0x0363, r24
     838:	08 95       	ret

0000083a <tilt_check>:
	return alarmOn;
}

void tilt_check(int x, int y) {
    int tempX = (x)-xAs;
    int tempY = (y)-yAs;
     83a:	20 91 63 03 	lds	r18, 0x0363
     83e:	30 91 64 03 	lds	r19, 0x0364
   	tilt_check(x,y);					//Kijk of er een verandering is opgetreden ten opzichte van de beginstand.
	return alarmOn;
}

void tilt_check(int x, int y) {
    int tempX = (x)-xAs;
     842:	40 91 61 03 	lds	r20, 0x0361
     846:	50 91 62 03 	lds	r21, 0x0362
     84a:	84 1b       	sub	r24, r20
     84c:	95 0b       	sbc	r25, r21
    int tempY = (y)-yAs;
    if(tempX >50 || tempY > 50) {
     84e:	c3 97       	sbiw	r24, 0x33	; 51
     850:	2c f4       	brge	.+10     	; 0x85c <tilt_check+0x22>
	return alarmOn;
}

void tilt_check(int x, int y) {
    int tempX = (x)-xAs;
    int tempY = (y)-yAs;
     852:	62 1b       	sub	r22, r18
     854:	73 0b       	sbc	r23, r19
    if(tempX >50 || tempY > 50) {
     856:	63 33       	cpi	r22, 0x33	; 51
     858:	71 05       	cpc	r23, r1
     85a:	34 f0       	brlt	.+12     	; 0x868 <tilt_check+0x2e>
	alarmOn = 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	90 93 5c 03 	sts	0x035C, r25
     864:	80 93 5b 03 	sts	0x035B, r24
     868:	08 95       	ret

0000086a <tilt_getAlarm>:
void tilt_start(void){
	xAs = tilt_analogRead(0);
 	yAs = tilt_analogRead(1);
}

int tilt_getAlarm(void) {
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
   	int x = tilt_analogRead(0);				//Lees x waarde uit
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 e5 03 	call	0x7ca	; 0x7ca <tilt_analogRead>
     874:	ec 01       	movw	r28, r24
  	int y = tilt_analogRead(1);				//Lees x waarde uit
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	0e 94 e5 03 	call	0x7ca	; 0x7ca <tilt_analogRead>
   	tilt_check(x,y);					//Kijk of er een verandering is opgetreden ten opzichte van de beginstand.
     87c:	bc 01       	movw	r22, r24
     87e:	ce 01       	movw	r24, r28
     880:	0e 94 1d 04 	call	0x83a	; 0x83a <tilt_check>
	return alarmOn;
}
     884:	80 91 5b 03 	lds	r24, 0x035B
     888:	90 91 5c 03 	lds	r25, 0x035C
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <tilt_reset>:
	alarmOn = 1;
    }
}

void tilt_reset(void) {
	alarmOn = 0;
     892:	10 92 5c 03 	sts	0x035C, r1
     896:	10 92 5b 03 	sts	0x035B, r1
	xAs = tilt_analogRead(0);
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <tilt_analogRead>
     8a0:	90 93 62 03 	sts	0x0362, r25
     8a4:	80 93 61 03 	sts	0x0361, r24
 	yAs = tilt_analogRead(1);
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <tilt_analogRead>
     8ae:	90 93 64 03 	sts	0x0364, r25
     8b2:	80 93 63 03 	sts	0x0363, r24
     8b6:	08 95       	ret

000008b8 <usart_init>:
#include "uart.h"

// Methode voor het opzetten van de USART verbinding
// Zet de baudrate, rx/tx en het frame formaat
void usart_init(uint16_t baudRate) {
    uint16_t ubrr = ((F_CPU / 16) / baudRate) - 1;         // Berekent de baudrate voor de usart
     8b8:	9c 01       	movw	r18, r24
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	60 e4       	ldi	r22, 0x40	; 64
     8c0:	72 e4       	ldi	r23, 0x42	; 66
     8c2:	8f e0       	ldi	r24, 0x0F	; 15
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__udivmodsi4>
     8ca:	21 50       	subi	r18, 0x01	; 1
     8cc:	31 09       	sbc	r19, r1
    UBRR0H = ubrr >> 8;                                    // Zet de hig byte in het usart baudrate register
     8ce:	30 93 c5 00 	sts	0x00C5, r19
    UBRR0L = ubrr;                                         // Zet de low byte in het usart baudrate register
     8d2:	20 93 c4 00 	sts	0x00C4, r18
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);                  // Zet zowel tx (transmit) als rx (receive) aan
     8d6:	88 e1       	ldi	r24, 0x18	; 24
     8d8:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);                // Frame formaat(8N1), 8 bits, geen par, 1 stopb
     8dc:	86 e0       	ldi	r24, 0x06	; 6
     8de:	80 93 c2 00 	sts	0x00C2, r24
     8e2:	08 95       	ret

000008e4 <usart_transmit>:
}

// Methode om met behulp van USART data te transmitten
// Wordt gebruikt door de stream om character mee te verzenden
int usart_transmit(char data, FILE *stream) {
     8e4:	cf 93       	push	r28
     8e6:	c8 2f       	mov	r28, r24
    // Als er een newline character binnenkomt wordt hier een carriage return aan toegevoegd
    if (data == '\n') usart_transmit('\r', stream);
     8e8:	8a 30       	cpi	r24, 0x0A	; 10
     8ea:	19 f4       	brne	.+6      	; 0x8f2 <usart_transmit+0xe>
     8ec:	8d e0       	ldi	r24, 0x0D	; 13
     8ee:	0e 94 72 04 	call	0x8e4	; 0x8e4 <usart_transmit>
    
    // Wachten op een lege buffer door het checken op de empty flag
    while (!(UCSR0A & (1 << UDRE0)));
     8f2:	80 91 c0 00 	lds	r24, 0x00C0
     8f6:	85 ff       	sbrs	r24, 5
     8f8:	fc cf       	rjmp	.-8      	; 0x8f2 <usart_transmit+0xe>
    
    // Zet de data in het data register om te transmitten
    UDR0 = data;
     8fa:	c0 93 c6 00 	sts	0x00C6, r28
    
    // Geen errors
    return 0;
}
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <usart_receive>:

// Methode om met behulp USART data te ontvangen
// Wordt gebruikt door de stream om character mee te ontvangen
char usart_receive(FILE *stream) {
     906:	cf 93       	push	r28
     908:	bc 01       	movw	r22, r24
    // Character om data op te slaan
    char data;
    
    // Wachten op binnenkomende data door te checken op de complete flag
    while (!(UCSR0A & (1 << RXC0)));
     90a:	80 91 c0 00 	lds	r24, 0x00C0
     90e:	87 ff       	sbrs	r24, 7
     910:	fc cf       	rjmp	.-8      	; 0x90a <usart_receive+0x4>
    
    // Haal de data op uit het register
    data = UDR0;
     912:	c0 91 c6 00 	lds	r28, 0x00C6
    
    // Echo input naar de seriele monitor
    usart_transmit(data, stream);
     916:	8c 2f       	mov	r24, r28
     918:	0e 94 72 04 	call	0x8e4	; 0x8e4 <usart_transmit>
    
    // Return de data
    return data;
}
     91c:	8c 2f       	mov	r24, r28
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <usart_flush>:

// Methode om de buffer te flusen
void usart_flush(void) {
    unsigned char dummy;
    while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
     922:	80 91 c0 00 	lds	r24, 0x00C0
     926:	87 ff       	sbrs	r24, 7
     928:	03 c0       	rjmp	.+6      	; 0x930 <usart_flush+0xe>
     92a:	80 91 c6 00 	lds	r24, 0x00C6
     92e:	f9 cf       	rjmp	.-14     	; 0x922 <usart_flush>
}
     930:	08 95       	ret

00000932 <udp_create_socket>:
#include "udp.h"
#include "uart.h"

// Methode om een UDP socket mee te creeren
void udp_create_socket(void) {
    spi_transmit(S0MR, (1 << P1));              // Maakt van socket 0 een UDP socket
     932:	62 e0       	ldi	r22, 0x02	; 2
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	94 e0       	ldi	r25, 0x04	; 4
     938:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    uint16_t port = 30000;                      // Luistert naar data op poort 3000
    spi_transmit(S0PORTH, port >> 8);           // Zet hoogste byte
     93c:	65 e7       	ldi	r22, 0x75	; 117
     93e:	84 e0       	ldi	r24, 0x04	; 4
     940:	94 e0       	ldi	r25, 0x04	; 4
     942:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0PORTL, port);                // Zet laagste byte
     946:	60 e3       	ldi	r22, 0x30	; 48
     948:	85 e0       	ldi	r24, 0x05	; 5
     94a:	94 e0       	ldi	r25, 0x04	; 4
     94c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    spi_transmit(S0CR, OPEN);                   // Initialiseert de socket met de instellingen
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	94 e0       	ldi	r25, 0x04	; 4
     956:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    uint8_t status = spi_receive(S0SR);         // Haalt de status op
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	94 e0       	ldi	r25, 0x04	; 4
     95e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
    
    if(status != SOCK_UDP) {                    // Check of de status (SOCK_UDP) klopt met de instellingen
     962:	82 32       	cpi	r24, 0x22	; 34
     964:	31 f0       	breq	.+12     	; 0x972 <udp_create_socket+0x40>
        spi_transmit(S0CR, CLOSE);              // Anders sluit de verbinding
     966:	60 e1       	ldi	r22, 0x10	; 16
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	94 e0       	ldi	r25, 0x04	; 4
     96c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     970:	e0 cf       	rjmp	.-64     	; 0x932 <udp_create_socket>
     972:	08 95       	ret

00000974 <udp_close_socket>:
    }
}

// Methode om de UDP socket mee te sluiten
void udp_close_socket(void) {
    spi_transmit(S0CR, CLOSE);                  // Sluit de verbinding
     974:	60 e1       	ldi	r22, 0x10	; 16
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	94 e0       	ldi	r25, 0x04	; 4
     97a:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <spi_transmit>

0000097e <udp_broadcast>:
}

// Methode om mee te broadcasten
void udp_broadcast(udpflag flag, int length) {
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	28 97       	sbiw	r28, 0x08	; 8
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	d8 2e       	mov	r13, r24
     9a0:	8b 01       	movw	r16, r22
    
    // Vraag de vrije ruimte op voor het versturen van pakket
    // Als deze niet groot genoeg wacht op beschikbare ruimte
    uint16_t size = 0;
    do {
        size = spi_receive(S0TXFSRH);
     9a2:	80 e2       	ldi	r24, 0x20	; 32
     9a4:	94 e0       	ldi	r25, 0x04	; 4
     9a6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     9aa:	e8 2e       	mov	r14, r24
     9ac:	f1 2c       	mov	r15, r1
        size <<= 8;
     9ae:	fe 2c       	mov	r15, r14
     9b0:	ee 24       	eor	r14, r14
        size |= spi_receive(S0TXFSRL);
     9b2:	81 e2       	ldi	r24, 0x21	; 33
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     9ba:	ef e9       	ldi	r30, 0x9F	; 159
     9bc:	ff e0       	ldi	r31, 0x0F	; 15
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <udp_broadcast+0x40>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <udp_broadcast+0x46>
     9c4:	00 00       	nop
     9c6:	e8 2a       	or	r14, r24
        _delay_ms(1);
    }
    while(length > size);
     9c8:	e0 16       	cp	r14, r16
     9ca:	f1 06       	cpc	r15, r17
     9cc:	50 f3       	brcs	.-44     	; 0x9a2 <udp_broadcast+0x24>
    
    // Zet het ipadres op broadcast
    spi_transmit(S0DIPR + 0, 255);
     9ce:	6f ef       	ldi	r22, 0xFF	; 255
     9d0:	8c e0       	ldi	r24, 0x0C	; 12
     9d2:	94 e0       	ldi	r25, 0x04	; 4
     9d4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0DIPR + 1, 255);
     9d8:	6f ef       	ldi	r22, 0xFF	; 255
     9da:	8d e0       	ldi	r24, 0x0D	; 13
     9dc:	94 e0       	ldi	r25, 0x04	; 4
     9de:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0DIPR + 2, 255);
     9e2:	6f ef       	ldi	r22, 0xFF	; 255
     9e4:	8e e0       	ldi	r24, 0x0E	; 14
     9e6:	94 e0       	ldi	r25, 0x04	; 4
     9e8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0DIPR + 3, 255);
     9ec:	6f ef       	ldi	r22, 0xFF	; 255
     9ee:	8f e0       	ldi	r24, 0x0F	; 15
     9f0:	94 e0       	ldi	r25, 0x04	; 4
     9f2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Zet de destination poort
    spi_transmit(S0DPORTH, 30000 >> 8);
     9f6:	65 e7       	ldi	r22, 0x75	; 117
     9f8:	80 e1       	ldi	r24, 0x10	; 16
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0DPORTL, 30000 & 0xFF);
     a00:	60 e3       	ldi	r22, 0x30	; 48
     a02:	81 e1       	ldi	r24, 0x11	; 17
     a04:	94 e0       	ldi	r25, 0x04	; 4
     a06:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S0TXWRH) << 8;
     a0a:	84 e2       	ldi	r24, 0x24	; 36
     a0c:	94 e0       	ldi	r25, 0x04	; 4
     a0e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     a12:	08 2f       	mov	r16, r24
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	10 2f       	mov	r17, r16
     a18:	00 27       	eor	r16, r16
    pointer |= spi_receive(S0TXWRL);
     a1a:	85 e2       	ldi	r24, 0x25	; 37
     a1c:	94 e0       	ldi	r25, 0x04	; 4
     a1e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     a22:	08 2b       	or	r16, r24
    
    // Berekent het adres met de pointer en mask
    uint16_t address = S0TXBASE + (pointer & 0x07FF);
     a24:	c8 01       	movw	r24, r16
     a26:	97 70       	andi	r25, 0x07	; 7
    
    // Schrijft de flag weg in het socketgeheugen
    spi_transmit(address, flag);
     a28:	6d 2d       	mov	r22, r13
     a2a:	90 5c       	subi	r25, 0xC0	; 192
     a2c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    int ip_addr[]  = {10, 0, 4, 1};
     a30:	88 e0       	ldi	r24, 0x08	; 8
     a32:	e7 e5       	ldi	r30, 0x57	; 87
     a34:	f1 e0       	ldi	r31, 0x01	; 1
     a36:	de 01       	movw	r26, r28
     a38:	11 96       	adiw	r26, 0x01	; 1
     a3a:	01 90       	ld	r0, Z+
     a3c:	0d 92       	st	X+, r0
     a3e:	8a 95       	dec	r24
     a40:	e1 f7       	brne	.-8      	; 0xa3a <udp_broadcast+0xbc>
     a42:	ce 01       	movw	r24, r28
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	6c 01       	movw	r12, r24
     a48:	ee 24       	eor	r14, r14
     a4a:	e3 94       	inc	r14
     a4c:	f1 2c       	mov	r15, r1
    for (int i = 0; i < 4; ++i) {
        address = S0TXBASE + (pointer++ & 0x07FF);
        spi_transmit(address, ip_addr[i]);
     a4e:	f6 01       	movw	r30, r12
     a50:	60 81       	ld	r22, Z
     a52:	f2 e0       	ldi	r31, 0x02	; 2
     a54:	cf 0e       	add	r12, r31
     a56:	d1 1c       	adc	r13, r1
     a58:	c7 01       	movw	r24, r14
     a5a:	80 0f       	add	r24, r16
     a5c:	91 1f       	adc	r25, r17
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    int ip_addr[]  = {10, 0, 4, 1};
    for (int i = 0; i < 4; ++i) {
        address = S0TXBASE + (pointer++ & 0x07FF);
     a5e:	97 70       	andi	r25, 0x07	; 7
        spi_transmit(address, ip_addr[i]);
     a60:	90 5c       	subi	r25, 0xC0	; 192
     a62:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	e8 1a       	sub	r14, r24
     a6a:	f8 0a       	sbc	r15, r24
    spi_transmit(address, flag);
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    int ip_addr[]  = {10, 0, 4, 1};
    for (int i = 0; i < 4; ++i) {
     a6c:	95 e0       	ldi	r25, 0x05	; 5
     a6e:	e9 16       	cp	r14, r25
     a70:	f1 04       	cpc	r15, r1
     a72:	69 f7       	brne	.-38     	; 0xa4e <udp_broadcast+0xd0>
     a74:	0b 5f       	subi	r16, 0xFB	; 251
     a76:	1f 4f       	sbci	r17, 0xFF	; 255
        address = S0TXBASE + (pointer++ & 0x07FF);
        spi_transmit(address, ip_addr[i]);
    }
    
    // Berg de pointer weer op
    spi_transmit(S0TXWRH, pointer >> 8);
     a78:	61 2f       	mov	r22, r17
     a7a:	84 e2       	ldi	r24, 0x24	; 36
     a7c:	94 e0       	ldi	r25, 0x04	; 4
     a7e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0TXWRL, pointer);
     a82:	60 2f       	mov	r22, r16
     a84:	85 e2       	ldi	r24, 0x25	; 37
     a86:	94 e0       	ldi	r25, 0x04	; 4
     a88:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Verstuurt het pakket
    spi_transmit(S0CR, SEND);
     a8c:	60 e2       	ldi	r22, 0x20	; 32
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	94 e0       	ldi	r25, 0x04	; 4
     a92:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Wacht op het versturen (0x00 = verstuurd)
    while(spi_receive(S0CR));
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     a9e:	81 11       	cpse	r24, r1
     aa0:	fa cf       	rjmp	.-12     	; 0xa96 <udp_broadcast+0x118>
    
    // Sluit de verbinding
    // SPI_Transmit(S0CR, CLOSE);
}
     aa2:	28 96       	adiw	r28, 0x08	; 8
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	08 95       	ret

00000ac0 <udp_to_monitor>:

// Methode om data te sturen naar de monitor
void udp_to_monitor(udpflag flag, uint8_t data[], int length) {
     ac0:	8f 92       	push	r8
     ac2:	9f 92       	push	r9
     ac4:	af 92       	push	r10
     ac6:	bf 92       	push	r11
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	00 d0       	rcall	.+0      	; 0xada <udp_to_monitor+0x1a>
     ada:	00 d0       	rcall	.+0      	; 0xadc <udp_to_monitor+0x1c>
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	f8 2e       	mov	r15, r24
     ae2:	5b 01       	movw	r10, r22
     ae4:	6a 01       	movw	r12, r20
    
    // Vraag de vrije ruimte op voor het versturen van pakket
    // Als deze niet groot genoeg wacht op beschikbare ruimte
    uint16_t size = 0;
    do {
        size = spi_receive(S0TXFSRH);
     ae6:	80 e2       	ldi	r24, 0x20	; 32
     ae8:	94 e0       	ldi	r25, 0x04	; 4
     aea:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     aee:	08 2f       	mov	r16, r24
     af0:	10 e0       	ldi	r17, 0x00	; 0
        size <<= 8;
     af2:	10 2f       	mov	r17, r16
     af4:	00 27       	eor	r16, r16
        size |= spi_receive(S0TXFSRL);
     af6:	81 e2       	ldi	r24, 0x21	; 33
     af8:	94 e0       	ldi	r25, 0x04	; 4
     afa:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     afe:	ef e9       	ldi	r30, 0x9F	; 159
     b00:	ff e0       	ldi	r31, 0x0F	; 15
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <udp_to_monitor+0x42>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <udp_to_monitor+0x48>
     b08:	00 00       	nop
     b0a:	08 2b       	or	r16, r24
        _delay_ms(1);
    }
    while(length > size);
     b0c:	0c 15       	cp	r16, r12
     b0e:	1d 05       	cpc	r17, r13
     b10:	50 f3       	brcs	.-44     	; 0xae6 <udp_to_monitor+0x26>
    spi_transmit(S0DIPR + 1, 0);
    spi_transmit(S0DIPR + 2, 4);
    spi_transmit(S0DIPR + 3, 0);

#else
    spi_transmit(S0DIPR + 0, 192);
     b12:	60 ec       	ldi	r22, 0xC0	; 192
     b14:	8c e0       	ldi	r24, 0x0C	; 12
     b16:	94 e0       	ldi	r25, 0x04	; 4
     b18:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0DIPR + 1, 168);
     b1c:	68 ea       	ldi	r22, 0xA8	; 168
     b1e:	8d e0       	ldi	r24, 0x0D	; 13
     b20:	94 e0       	ldi	r25, 0x04	; 4
     b22:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0DIPR + 2, 178);
     b26:	62 eb       	ldi	r22, 0xB2	; 178
     b28:	8e e0       	ldi	r24, 0x0E	; 14
     b2a:	94 e0       	ldi	r25, 0x04	; 4
     b2c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0DIPR + 3, 12);
     b30:	6c e0       	ldi	r22, 0x0C	; 12
     b32:	8f e0       	ldi	r24, 0x0F	; 15
     b34:	94 e0       	ldi	r25, 0x04	; 4
     b36:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
#endif
    
    // Zet de destination poort
    spi_transmit(S0DPORTH, 30000 >> 8);
     b3a:	65 e7       	ldi	r22, 0x75	; 117
     b3c:	80 e1       	ldi	r24, 0x10	; 16
     b3e:	94 e0       	ldi	r25, 0x04	; 4
     b40:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0DPORTL, 30000 & 0xFF);
     b44:	60 e3       	ldi	r22, 0x30	; 48
     b46:	81 e1       	ldi	r24, 0x11	; 17
     b48:	94 e0       	ldi	r25, 0x04	; 4
     b4a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S0TXWRH) << 8;
     b4e:	84 e2       	ldi	r24, 0x24	; 36
     b50:	94 e0       	ldi	r25, 0x04	; 4
     b52:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     b56:	08 2f       	mov	r16, r24
     b58:	10 e0       	ldi	r17, 0x00	; 0
     b5a:	10 2f       	mov	r17, r16
     b5c:	00 27       	eor	r16, r16
    pointer |= spi_receive(S0TXWRL);
     b5e:	85 e2       	ldi	r24, 0x25	; 37
     b60:	94 e0       	ldi	r25, 0x04	; 4
     b62:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     b66:	08 2b       	or	r16, r24
    
    // Berekent het adres met de pointer en mask
    uint16_t address = S0TXBASE + (pointer & 0x07FF);
     b68:	c8 01       	movw	r24, r16
     b6a:	97 70       	andi	r25, 0x07	; 7
    
    // Schrijft de flag weg in het socketgeheugen
    spi_transmit(address, flag);
     b6c:	6f 2d       	mov	r22, r15
     b6e:	90 5c       	subi	r25, 0xC0	; 192
     b70:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    char ip_addr[]  = {'1','0','4','1'};
     b74:	81 e3       	ldi	r24, 0x31	; 49
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	90 e3       	ldi	r25, 0x30	; 48
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	94 e3       	ldi	r25, 0x34	; 52
     b7e:	9b 83       	std	Y+3, r25	; 0x03
     b80:	8c 83       	std	Y+4, r24	; 0x04
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	4c 01       	movw	r8, r24
     b88:	ee 24       	eor	r14, r14
     b8a:	e3 94       	inc	r14
     b8c:	f1 2c       	mov	r15, r1
    for (int i = 0; i < 4; ++i) {
        address = S0TXBASE + (pointer++ & 0x07FF);
        spi_transmit(address, ip_addr[i]);
     b8e:	f4 01       	movw	r30, r8
     b90:	61 91       	ld	r22, Z+
     b92:	4f 01       	movw	r8, r30
     b94:	c7 01       	movw	r24, r14
     b96:	80 0f       	add	r24, r16
     b98:	91 1f       	adc	r25, r17
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    char ip_addr[]  = {'1','0','4','1'};
    for (int i = 0; i < 4; ++i) {
        address = S0TXBASE + (pointer++ & 0x07FF);
     b9a:	97 70       	andi	r25, 0x07	; 7
        spi_transmit(address, ip_addr[i]);
     b9c:	90 5c       	subi	r25, 0xC0	; 192
     b9e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     ba2:	ff ef       	ldi	r31, 0xFF	; 255
     ba4:	ef 1a       	sub	r14, r31
     ba6:	ff 0a       	sbc	r15, r31
    spi_transmit(address, flag);
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    char ip_addr[]  = {'1','0','4','1'};
    for (int i = 0; i < 4; ++i) {
     ba8:	25 e0       	ldi	r18, 0x05	; 5
     baa:	e2 16       	cp	r14, r18
     bac:	f1 04       	cpc	r15, r1
     bae:	79 f7       	brne	.-34     	; 0xb8e <udp_to_monitor+0xce>
     bb0:	0b 5f       	subi	r16, 0xFB	; 251
     bb2:	1f 4f       	sbci	r17, 0xFF	; 255
     bb4:	75 01       	movw	r14, r10
        address = S0TXBASE + (pointer++ & 0x07FF);
     bb6:	c8 01       	movw	r24, r16
     bb8:	97 01       	movw	r18, r14
     bba:	2a 19       	sub	r18, r10
     bbc:	3b 09       	sbc	r19, r11
        spi_transmit(address, ip_addr[i]);
    }
    
    // Schrijft de buffer weg in het socketgeheugen
    for (int i = 0; i < length; ++i) {
     bbe:	2c 15       	cp	r18, r12
     bc0:	3d 05       	cpc	r19, r13
     bc2:	6c f4       	brge	.+26     	; 0xbde <udp_to_monitor+0x11e>
        address = S0TXBASE + ((pointer++) & 0x07FF);
     bc4:	4c 01       	movw	r8, r24
     bc6:	ef ef       	ldi	r30, 0xFF	; 255
     bc8:	8e 1a       	sub	r8, r30
     bca:	9e 0a       	sbc	r9, r30
        spi_transmit(address, data[i]);
     bcc:	f7 01       	movw	r30, r14
     bce:	61 91       	ld	r22, Z+
     bd0:	7f 01       	movw	r14, r30
        spi_transmit(address, ip_addr[i]);
    }
    
    // Schrijft de buffer weg in het socketgeheugen
    for (int i = 0; i < length; ++i) {
        address = S0TXBASE + ((pointer++) & 0x07FF);
     bd2:	97 70       	andi	r25, 0x07	; 7
        spi_transmit(address, data[i]);
     bd4:	90 5c       	subi	r25, 0xC0	; 192
     bd6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
        spi_transmit(address, ip_addr[i]);
    }
    
    // Schrijft de buffer weg in het socketgeheugen
    for (int i = 0; i < length; ++i) {
        address = S0TXBASE + ((pointer++) & 0x07FF);
     bda:	c4 01       	movw	r24, r8
     bdc:	ed cf       	rjmp	.-38     	; 0xbb8 <udp_to_monitor+0xf8>
     bde:	d7 fe       	sbrs	r13, 7
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <udp_to_monitor+0x126>
     be2:	c1 2c       	mov	r12, r1
     be4:	d1 2c       	mov	r13, r1
     be6:	c0 0e       	add	r12, r16
     be8:	d1 1e       	adc	r13, r17
        spi_transmit(address, data[i]);
    }
    
    // Berg de pointer weer op
    spi_transmit(S0TXWRH, pointer >> 8);
     bea:	6d 2d       	mov	r22, r13
     bec:	84 e2       	ldi	r24, 0x24	; 36
     bee:	94 e0       	ldi	r25, 0x04	; 4
     bf0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    spi_transmit(S0TXWRL, pointer);
     bf4:	6c 2d       	mov	r22, r12
     bf6:	85 e2       	ldi	r24, 0x25	; 37
     bf8:	94 e0       	ldi	r25, 0x04	; 4
     bfa:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Verstuurt het pakket
    spi_transmit(S0CR, SEND);
     bfe:	60 e2       	ldi	r22, 0x20	; 32
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	94 e0       	ldi	r25, 0x04	; 4
     c04:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
    
    // Wacht op het versturen (0x00 = verstuurd)
    while(spi_receive(S0CR));
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	94 e0       	ldi	r25, 0x04	; 4
     c0c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     c10:	81 11       	cpse	r24, r1
     c12:	fa cf       	rjmp	.-12     	; 0xc08 <udp_to_monitor+0x148>
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	cf 90       	pop	r12
     c2c:	bf 90       	pop	r11
     c2e:	af 90       	pop	r10
     c30:	9f 90       	pop	r9
     c32:	8f 90       	pop	r8
     c34:	08 95       	ret

00000c36 <udp_from_monitor>:
     c36:	8f 92       	push	r8
     c38:	9f 92       	push	r9
     c3a:	af 92       	push	r10
     c3c:	bf 92       	push	r11
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	7c 01       	movw	r14, r24
     c50:	86 e2       	ldi	r24, 0x26	; 38
     c52:	94 e0       	ldi	r25, 0x04	; 4
     c54:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     c58:	c8 2f       	mov	r28, r24
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
     c5c:	dc 2f       	mov	r29, r28
     c5e:	cc 27       	eor	r28, r28
     c60:	87 e2       	ldi	r24, 0x27	; 39
     c62:	94 e0       	ldi	r25, 0x04	; 4
     c64:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     c68:	c8 2b       	or	r28, r24
     c6a:	8e 01       	movw	r16, r28
     c6c:	08 50       	subi	r16, 0x08	; 8
     c6e:	11 09       	sbc	r17, r1
     c70:	88 e2       	ldi	r24, 0x28	; 40
     c72:	94 e0       	ldi	r25, 0x04	; 4
     c74:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     c78:	c8 2e       	mov	r12, r24
     c7a:	d1 2c       	mov	r13, r1
     c7c:	dc 2c       	mov	r13, r12
     c7e:	cc 24       	eor	r12, r12
     c80:	89 e2       	ldi	r24, 0x29	; 41
     c82:	94 e0       	ldi	r25, 0x04	; 4
     c84:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     c88:	96 01       	movw	r18, r12
     c8a:	28 2b       	or	r18, r24
     c8c:	c9 01       	movw	r24, r18
     c8e:	5c 01       	movw	r10, r24
     c90:	38 e0       	ldi	r19, 0x08	; 8
     c92:	a3 0e       	add	r10, r19
     c94:	b1 1c       	adc	r11, r1
     c96:	67 01       	movw	r12, r14
     c98:	c8 0f       	add	r28, r24
     c9a:	d9 1f       	adc	r29, r25
     c9c:	95 01       	movw	r18, r10
     c9e:	2c 17       	cp	r18, r28
     ca0:	3d 07       	cpc	r19, r29
     ca2:	71 f0       	breq	.+28     	; 0xcc0 <udp_from_monitor+0x8a>
     ca4:	49 01       	movw	r8, r18
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	88 1a       	sub	r8, r24
     caa:	98 0a       	sbc	r9, r24
     cac:	c9 01       	movw	r24, r18
     cae:	97 70       	andi	r25, 0x07	; 7
     cb0:	90 5a       	subi	r25, 0xA0	; 160
     cb2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     cb6:	f6 01       	movw	r30, r12
     cb8:	81 93       	st	Z+, r24
     cba:	6f 01       	movw	r12, r30
     cbc:	94 01       	movw	r18, r8
     cbe:	ef cf       	rjmp	.-34     	; 0xc9e <udp_from_monitor+0x68>
     cc0:	e8 01       	movw	r28, r16
     cc2:	ca 0d       	add	r28, r10
     cc4:	db 1d       	adc	r29, r11
     cc6:	f7 01       	movw	r30, r14
     cc8:	e0 0f       	add	r30, r16
     cca:	f1 1f       	adc	r31, r17
     ccc:	10 82       	st	Z, r1
     cce:	6d 2f       	mov	r22, r29
     cd0:	88 e2       	ldi	r24, 0x28	; 40
     cd2:	94 e0       	ldi	r25, 0x04	; 4
     cd4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     cd8:	6c 2f       	mov	r22, r28
     cda:	89 e2       	ldi	r24, 0x29	; 41
     cdc:	94 e0       	ldi	r25, 0x04	; 4
     cde:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <spi_transmit>
     ce2:	60 e4       	ldi	r22, 0x40	; 64
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	94 e0       	ldi	r25, 0x04	; 4
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	9f 90       	pop	r9
     cfe:	8f 90       	pop	r8
     d00:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <spi_transmit>

00000d04 <main>:

// Geeft aan met nul en 1 of de node gearmed is
uint8_t armed = 1;

// De main methode voor het uitvoeren van de acties
int main(void) {
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	c1 50       	subi	r28, 0x01	; 1
     d0e:	d2 40       	sbci	r29, 0x02	; 2
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
    // Geen interrupts voor het instellen van de node
    cli();
     d1a:	f8 94       	cli

    // Zet USART op
    usart_init(9600);
     d1c:	80 e8       	ldi	r24, 0x80	; 128
     d1e:	95 e2       	ldi	r25, 0x25	; 37
     d20:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <usart_init>
    
     // Stdin/stdout lezen en schrijven via uart
    stdout = stdin = &uart;
     d24:	89 e4       	ldi	r24, 0x49	; 73
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	90 93 66 03 	sts	0x0366, r25
     d2c:	80 93 65 03 	sts	0x0365, r24
     d30:	90 93 68 03 	sts	0x0368, r25
     d34:	80 93 67 03 	sts	0x0367, r24
	
    // Kalibreer de tiltsensor
    tilt_start();
     d38:	0e 94 0e 04 	call	0x81c	; 0x81c <tilt_start>
    
    // Zet SPI op
    spi_init();
     d3c:	0e 94 66 02 	call	0x4cc	; 0x4cc <spi_init>
    
    // Zet en configureer het lcd display
    lcd_init();
     d40:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_init>
    
     // Configureert de wiznet
    initWiznet();
     d44:	0e 94 53 00 	call	0xa6	; 0xa6 <initWiznet>
    
    // Configureert de netwerk instellingen
    set_gateway();
     d48:	0e 94 62 00 	call	0xc4	; 0xc4 <set_gateway>
    set_submask();
     d4c:	0e 94 79 00 	call	0xf2	; 0xf2 <set_submask>
    set_macaddress();
     d50:	0e 94 90 00 	call	0x120	; 0x120 <set_macaddress>
    set_ipaddress();
     d54:	0e 94 a7 00 	call	0x14e	; 0x14e <set_ipaddress>
	
    // Print de instellingen
    print_status();
     d58:	0e 94 be 00 	call	0x17c	; 0x17c <print_status>

    // Buffer voor het ontvangen en versturen van data
    uint8_t receiveddata[512];
    
    // Zend een register bij startup en print op lcd
    udp_broadcast(reg, 8);
     d5c:	68 e0       	ldi	r22, 0x08	; 8
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	0e 94 bf 04 	call	0x97e	; 0x97e <udp_broadcast>
    
    // Led poort op output
    DDRB |= (1 << LED);
     d66:	21 9a       	sbi	0x04, 1	; 4
    
    // Buzzer poort op output
    DDRB |= (1 << BUZZER);
     d68:	20 9a       	sbi	0x04, 0	; 4
    
    // Schakel timer overflow interrupts in
    TIMSK1 |= (1 << TOIE1);
     d6a:	80 91 6f 00 	lds	r24, 0x006F
     d6e:	81 60       	ori	r24, 0x01	; 1
     d70:	80 93 6f 00 	sts	0x006F, r24
    
    // Stel de timer in met prescaler 1024
    TCCR1B |= ((1 << CS12) | (1 << CS10));
     d74:	80 91 81 00 	lds	r24, 0x0081
     d78:	85 60       	ori	r24, 0x05	; 5
     d7a:	80 93 81 00 	sts	0x0081, r24
    
    // Zet interrupts aan voor het alarm
    sei();
     d7e:	78 94       	sei
    
    // Print de status
    armed ? lcd_print("armed") : lcd_print("disarmed");
     d80:	80 91 36 01 	lds	r24, 0x0136
     d84:	88 23       	and	r24, r24
     d86:	71 f0       	breq	.+28     	; 0xda4 <main+0xa0>
     d88:	89 ee       	ldi	r24, 0xE9	; 233
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_print>
                printf("TCP verbinding opgezet\n");
#endif
                // Checkt op binenkomende data
                if(spi_receive(S1RXRSRH) || spi_receive(S1RXRSRL)) {
                    // Schrijft de binnenkomende data weg in de meegegeven buffer
                    tcp_from_monitor(receiveddata);
     d90:	8e 01       	movw	r16, r28
     d92:	0f 5f       	subi	r16, 0xFF	; 255
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
                    
#if DEBUG           // Print de data in de buffer
                    printf("\nTCP data ontvangen: %s\n", receiveddata);
     d96:	48 e6       	ldi	r20, 0x68	; 104
     d98:	e4 2e       	mov	r14, r20
     d9a:	42 e0       	ldi	r20, 0x02	; 2
     d9c:	f4 2e       	mov	r15, r20
                            if(authorised) {
                                uint8_t on = receiveddata[3];
                                if (on) {
                                    lcd_print("armed");
                                    // Armed de node en schakelt het alarm in
                                    armed = 1;
     d9e:	dd 24       	eor	r13, r13
     da0:	d3 94       	inc	r13
     da2:	27 c0       	rjmp	.+78     	; 0xdf2 <main+0xee>
    
    // Zet interrupts aan voor het alarm
    sei();
    
    // Print de status
    armed ? lcd_print("armed") : lcd_print("disarmed");
     da4:	86 ee       	ldi	r24, 0xE6	; 230
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	f1 cf       	rjmp	.-30     	; 0xd8c <main+0x88>
        
        switch (udpstatus) {
            // Gesloten socket
            case SOCK_CLOSED:
#if DEBUG
                printf("UDP socket gesloten\n");
     daa:	8f ee       	ldi	r24, 0xEF	; 239
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	cf 5f       	subi	r28, 0xFF	; 255
     db0:	dd 4f       	sbci	r29, 0xFD	; 253
     db2:	28 83       	st	Y, r18
     db4:	c1 50       	subi	r28, 0x01	; 1
     db6:	d2 40       	sbci	r29, 0x02	; 2
     db8:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
#endif
                // Maak een udp socket aan
                udp_create_socket();
     dbc:	0e 94 99 04 	call	0x932	; 0x932 <udp_create_socket>
                break;
            
            // Werkende UDP socket
            case SOCK_UDP:
#if DEBUG
                printf("UDP socket geopend\n");
     dc0:	cf 5f       	subi	r28, 0xFF	; 255
     dc2:	dd 4f       	sbci	r29, 0xFD	; 253
     dc4:	28 81       	ld	r18, Y
     dc6:	c1 50       	subi	r28, 0x01	; 1
     dc8:	d2 40       	sbci	r29, 0x02	; 2
                */
                 
                break;
        }
        
        switch (tcpstatus) {
     dca:	24 31       	cpi	r18, 0x14	; 20
     dcc:	e9 f1       	breq	.+122    	; 0xe48 <main+0x144>
     dce:	88 f5       	brcc	.+98     	; 0xe32 <main+0x12e>
     dd0:	21 11       	cpse	r18, r1
     dd2:	28 c0       	rjmp	.+80     	; 0xe24 <main+0x120>
            // Gesloten socket
            case SOCK_CLOSED:
#if DEBUG
                printf("TCP socket gesloten\n");
     dd4:	86 e1       	ldi	r24, 0x16	; 22
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
#endif
                // Maak een tcp socket aan
                tcp_create_socket();
     ddc:	0e 94 94 02 	call	0x528	; 0x528 <tcp_create_socket>
     de0:	ef ef       	ldi	r30, 0xFF	; 255
     de2:	f3 ed       	ldi	r31, 0xD3	; 211
     de4:	20 e3       	ldi	r18, 0x30	; 48
     de6:	e1 50       	subi	r30, 0x01	; 1
     de8:	f0 40       	sbci	r31, 0x00	; 0
     dea:	20 40       	sbci	r18, 0x00	; 0
     dec:	e1 f7       	brne	.-8      	; 0xde6 <main+0xe2>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <main+0xec>
     df0:	00 00       	nop
    // Print de status
    armed ? lcd_print("armed") : lcd_print("disarmed");
    
    while(1) {
        // Lees de status van zowel de udp als tcp socket
        uint8_t udpstatus = spi_receive(S0SR);
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	94 e0       	ldi	r25, 0x04	; 4
     df6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     dfa:	c8 2e       	mov	r12, r24
        uint8_t tcpstatus = spi_receive(S1SR);
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	95 e0       	ldi	r25, 0x05	; 5
     e00:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     e04:	28 2f       	mov	r18, r24
        
        switch (udpstatus) {
     e06:	cc 20       	and	r12, r12
     e08:	81 f2       	breq	.-96     	; 0xdaa <main+0xa6>
     e0a:	32 e2       	ldi	r19, 0x22	; 34
     e0c:	c3 12       	cpse	r12, r19
     e0e:	dd cf       	rjmp	.-70     	; 0xdca <main+0xc6>
                break;
            
            // Werkende UDP socket
            case SOCK_UDP:
#if DEBUG
                printf("UDP socket geopend\n");
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	cf 5f       	subi	r28, 0xFF	; 255
     e16:	dd 4f       	sbci	r29, 0xFD	; 253
     e18:	28 83       	st	Y, r18
     e1a:	c1 50       	subi	r28, 0x01	; 1
     e1c:	d2 40       	sbci	r29, 0x02	; 2
     e1e:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
     e22:	ce cf       	rjmp	.-100    	; 0xdc0 <main+0xbc>
                */
                 
                break;
        }
        
        switch (tcpstatus) {
     e24:	23 31       	cpi	r18, 0x13	; 19
     e26:	e1 f6       	brne	.-72     	; 0xde0 <main+0xdc>
                break;
       
            // TCP socket geinitialiseerd
            case SOCK_INIT:
#if DEBUG
                printf("TCP socket geopend\n");
     e28:	8a e2       	ldi	r24, 0x2A	; 42
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
     e30:	29 c1       	rjmp	.+594    	; 0x1084 <main+0x380>
                */
                 
                break;
        }
        
        switch (tcpstatus) {
     e32:	27 31       	cpi	r18, 0x17	; 23
     e34:	71 f0       	breq	.+28     	; 0xe52 <main+0x14e>
     e36:	2c 31       	cpi	r18, 0x1C	; 28
     e38:	99 f6       	brne	.-90     	; 0xde0 <main+0xdc>
                break;
            
            // TCP sluit request
            case SOCK_CLOSE_WAIT:
#if DEBUG
                printf("TCP close request ontvangen\n");
     e3a:	88 ec       	ldi	r24, 0xC8	; 200
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
#endif
                // Monitor wordt uitgelogd
                authorised = 0;
     e42:	10 92 54 03 	sts	0x0354, r1
     e46:	1e c1       	rjmp	.+572    	; 0x1084 <main+0x380>
                break;
            
            // TCP serversocket listen
            case SOCK_LISTEN:
#if DEBUG
                printf("TCPServer luisteren\n");
     e48:	8d e3       	ldi	r24, 0x3D	; 61
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
#endif
                break;
     e50:	c7 cf       	rjmp	.-114    	; 0xde0 <main+0xdc>
            
            // TCP verbinding opgezet
            case SOCK_ESTABLISHED:
#if DEBUG
                printf("TCP verbinding opgezet\n");
     e52:	81 e5       	ldi	r24, 0x51	; 81
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
#endif
                // Checkt op binenkomende data
                if(spi_receive(S1RXRSRH) || spi_receive(S1RXRSRL)) {
     e5a:	86 e2       	ldi	r24, 0x26	; 38
     e5c:	95 e0       	ldi	r25, 0x05	; 5
     e5e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     e62:	88 23       	and	r24, r24
     e64:	09 f1       	breq	.+66     	; 0xea8 <main+0x1a4>
                    // Schrijft de binnenkomende data weg in de meegegeven buffer
                    tcp_from_monitor(receiveddata);
     e66:	c8 01       	movw	r24, r16
     e68:	0e 94 80 03 	call	0x700	; 0x700 <tcp_from_monitor>
                    
#if DEBUG           // Print de data in de buffer
                    printf("\nTCP data ontvangen: %s\n", receiveddata);
     e6c:	1f 93       	push	r17
     e6e:	0f 93       	push	r16
     e70:	ff 92       	push	r15
     e72:	ef 92       	push	r14
     e74:	0e 94 8f 08 	call	0x111e	; 0x111e <printf>
#endif
                    // Stuur een acknowledge
                    uint8_t flag = receiveddata[0];
                    uint16_t messagenumber = (receiveddata[1] << 8) | receiveddata[2];
                    
                    switch (flag) {
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	09 f4       	brne	.+2      	; 0xe88 <main+0x184>
     e86:	a5 c0       	rjmp	.+330    	; 0xfd2 <main+0x2ce>
     e88:	30 f4       	brcc	.+12     	; 0xe96 <main+0x192>
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	a1 f0       	breq	.+40     	; 0xeb6 <main+0x1b2>
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	09 f4       	brne	.+2      	; 0xe94 <main+0x190>
     e92:	5f c0       	rjmp	.+190    	; 0xf52 <main+0x24e>
     e94:	a5 cf       	rjmp	.-182    	; 0xde0 <main+0xdc>
     e96:	85 30       	cpi	r24, 0x05	; 5
     e98:	09 f4       	brne	.+2      	; 0xe9c <main+0x198>
     e9a:	c8 c0       	rjmp	.+400    	; 0x102c <main+0x328>
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <main+0x19c>
     e9e:	b0 c0       	rjmp	.+352    	; 0x1000 <main+0x2fc>
     ea0:	86 30       	cpi	r24, 0x06	; 6
     ea2:	09 f4       	brne	.+2      	; 0xea6 <main+0x1a2>
     ea4:	d7 c0       	rjmp	.+430    	; 0x1054 <main+0x350>
     ea6:	9c cf       	rjmp	.-200    	; 0xde0 <main+0xdc>
            case SOCK_ESTABLISHED:
#if DEBUG
                printf("TCP verbinding opgezet\n");
#endif
                // Checkt op binenkomende data
                if(spi_receive(S1RXRSRH) || spi_receive(S1RXRSRL)) {
     ea8:	87 e2       	ldi	r24, 0x27	; 39
     eaa:	95 e0       	ldi	r25, 0x05	; 5
     eac:	0e 94 7f 02 	call	0x4fe	; 0x4fe <spi_receive>
     eb0:	81 11       	cpse	r24, r1
     eb2:	d9 cf       	rjmp	.-78     	; 0xe66 <main+0x162>
     eb4:	95 cf       	rjmp	.-214    	; 0xde0 <main+0xdc>
                                
                            }
                            break;
                        case login:
                            // Telt het aantal matchende characters
                            while (password[password_index % 10][counter] == receiveddata[counter + 3]) {
     eb6:	80 91 57 03 	lds	r24, 0x0357
     eba:	90 91 58 03 	lds	r25, 0x0358
     ebe:	6a e0       	ldi	r22, 0x0A	; 10
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	0e 94 45 08 	call	0x108a	; 0x108a <__divmodhi4>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	89 5c       	subi	r24, 0xC9	; 201
     ecc:	9e 4f       	sbci	r25, 0xFE	; 254
     ece:	fc 01       	movw	r30, r24
     ed0:	20 81       	ld	r18, Z
     ed2:	31 81       	ldd	r19, Z+1	; 0x01
     ed4:	80 91 55 03 	lds	r24, 0x0355
     ed8:	90 91 56 03 	lds	r25, 0x0356
     edc:	d9 01       	movw	r26, r18
     ede:	a8 0f       	add	r26, r24
     ee0:	b9 1f       	adc	r27, r25
     ee2:	e4 e0       	ldi	r30, 0x04	; 4
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	ec 0f       	add	r30, r28
     ee8:	fd 1f       	adc	r31, r29
     eea:	e8 0f       	add	r30, r24
     eec:	f9 1f       	adc	r31, r25
     eee:	5c 91       	ld	r21, X
     ef0:	40 81       	ld	r20, Z
     ef2:	54 13       	cpse	r21, r20
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <main+0x1fe>
                                ++counter;
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	90 93 56 03 	sts	0x0356, r25
     efc:	80 93 55 03 	sts	0x0355, r24
     f00:	e9 cf       	rjmp	.-46     	; 0xed4 <main+0x1d0>
                            }
                            
                            // Checkt of er 9 characters zijn geteld
                            // 8 van het wachtwoord + 1 niet matchend character
                            if (counter == 9) {
     f02:	09 97       	sbiw	r24, 0x09	; 9
     f04:	81 f4       	brne	.+32     	; 0xf26 <main+0x222>
                                authorised = 1;
     f06:	d0 92 54 03 	sts	0x0354, r13
#if DEBUG
                                printf("Gebruiker ingelogd\n");
     f0a:	81 e8       	ldi	r24, 0x81	; 129
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
#endif
                                // Verhoogt de index voor een volgende wachtwoord
                                ++password_index;
     f12:	80 91 57 03 	lds	r24, 0x0357
     f16:	90 91 58 03 	lds	r25, 0x0358
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	90 93 58 03 	sts	0x0358, r25
     f20:	80 93 57 03 	sts	0x0357, r24
     f24:	5d cf       	rjmp	.-326    	; 0xde0 <main+0xdc>
                            } else {
                                // Laat de buzzer afgaan met 3 korte beeps
                                printf("Incorrect wachtwoord\n");
     f26:	84 e9       	ldi	r24, 0x94	; 148
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	0e 94 a3 08 	call	0x1146	; 0x1146 <puts>
     f2e:	86 e0       	ldi	r24, 0x06	; 6
     f30:	90 e0       	ldi	r25, 0x00	; 0
                                
                                // Laat de buzzer 3 keer afgaan
                                for (int i = 0; i < 6; ++i) {
                                    PORTB ^= (1 << BUZZER);
     f32:	25 b1       	in	r18, 0x05	; 5
     f34:	2d 25       	eor	r18, r13
     f36:	25 b9       	out	0x05, r18	; 5
     f38:	ff ef       	ldi	r31, 0xFF	; 255
     f3a:	29 e6       	ldi	r18, 0x69	; 105
     f3c:	38 e1       	ldi	r19, 0x18	; 24
     f3e:	f1 50       	subi	r31, 0x01	; 1
     f40:	20 40       	sbci	r18, 0x00	; 0
     f42:	30 40       	sbci	r19, 0x00	; 0
     f44:	e1 f7       	brne	.-8      	; 0xf3e <main+0x23a>
     f46:	00 c0       	rjmp	.+0      	; 0xf48 <main+0x244>
     f48:	00 00       	nop
     f4a:	01 97       	sbiw	r24, 0x01	; 1
                            } else {
                                // Laat de buzzer afgaan met 3 korte beeps
                                printf("Incorrect wachtwoord\n");
                                
                                // Laat de buzzer 3 keer afgaan
                                for (int i = 0; i < 6; ++i) {
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	89 f7       	brne	.-30     	; 0xf32 <main+0x22e>
     f50:	47 cf       	rjmp	.-370    	; 0xde0 <main+0xdc>
                                }
                            }
                            
                            break;
                        case buzz:
                            if(authorised) {
     f52:	80 91 54 03 	lds	r24, 0x0354
     f56:	88 23       	and	r24, r24
     f58:	09 f4       	brne	.+2      	; 0xf5c <main+0x258>
     f5a:	42 cf       	rjmp	.-380    	; 0xde0 <main+0xdc>
                                // Print de status
                                lcd_print("buzzertest");
     f5c:	89 ea       	ldi	r24, 0xA9	; 169
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_print>
                                
                                // Lees de timer waarde uit
                                uint32_t time = ((uint32_t) receiveddata[3]) << 24;
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
                                time |= ((uint32_t) receiveddata[4]) << 16;
     f66:	4d 81       	ldd	r20, Y+5	; 0x05
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	ba 01       	movw	r22, r20
     f70:	55 27       	eor	r21, r21
     f72:	44 27       	eor	r20, r20
     f74:	78 2b       	or	r23, r24
                                time |= receiveddata[5] << 8;
                                time |= receiveddata[6];
     f76:	8f 81       	ldd	r24, Y+7	; 0x07
                                lcd_print("buzzertest");
                                
                                // Lees de timer waarde uit
                                uint32_t time = ((uint32_t) receiveddata[3]) << 24;
                                time |= ((uint32_t) receiveddata[4]) << 16;
                                time |= receiveddata[5] << 8;
     f78:	48 2b       	or	r20, r24
     f7a:	8e 81       	ldd	r24, Y+6	; 0x06
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	98 2f       	mov	r25, r24
     f80:	88 27       	eor	r24, r24
     f82:	aa 27       	eor	r26, r26
     f84:	97 fd       	sbrc	r25, 7
     f86:	a0 95       	com	r26
     f88:	ba 2f       	mov	r27, r26
                                time |= receiveddata[6];
     f8a:	48 2b       	or	r20, r24
     f8c:	59 2b       	or	r21, r25
     f8e:	6a 2b       	or	r22, r26
     f90:	7b 2b       	or	r23, r27
                                
                                // Zet de buzzer aan
                                PORTB |= (1 << BUZZER);
     f92:	28 9a       	sbi	0x05, 0	; 5
                                
                                // Voert een delay uit met de timer waarde
                                for (uint32_t i = 0; i < time; ++i) {
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	dc 01       	movw	r26, r24
     f9a:	84 17       	cp	r24, r20
     f9c:	95 07       	cpc	r25, r21
     f9e:	a6 07       	cpc	r26, r22
     fa0:	b7 07       	cpc	r27, r23
     fa2:	51 f0       	breq	.+20     	; 0xfb8 <main+0x2b4>
     fa4:	ef e9       	ldi	r30, 0x9F	; 159
     fa6:	ff e0       	ldi	r31, 0x0F	; 15
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <main+0x2a4>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <main+0x2aa>
     fae:	00 00       	nop
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	a1 1d       	adc	r26, r1
     fb4:	b1 1d       	adc	r27, r1
     fb6:	f1 cf       	rjmp	.-30     	; 0xf9a <main+0x296>
                                    _delay_ms(1);
                                }
                                
                                // Zet de buzzer uit
                                PORTB &= ~(1 << BUZZER);
     fb8:	28 98       	cbi	0x05, 0	; 5
                                
                                // Reset status
                                armed ? lcd_print("armed") : lcd_print("disarmed");
     fba:	80 91 36 01 	lds	r24, 0x0136
     fbe:	88 23       	and	r24, r24
     fc0:	19 f0       	breq	.+6      	; 0xfc8 <main+0x2c4>
     fc2:	89 ee       	ldi	r24, 0xE9	; 233
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <main+0x2c8>
     fc8:	86 ee       	ldi	r24, 0xE6	; 230
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_print>
     fd0:	07 cf       	rjmp	.-498    	; 0xde0 <main+0xdc>
                            }
                            break;
                        case lamp:
                            if(authorised) {
     fd2:	80 91 54 03 	lds	r24, 0x0354
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <main+0x2d8>
     fda:	02 cf       	rjmp	.-508    	; 0xde0 <main+0xdc>
                                // Print de status
                                lcd_print("lamptest");
     fdc:	84 eb       	ldi	r24, 0xB4	; 180
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_print>
                               
                                uint8_t on = receiveddata[3];
                                if (on) {
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	88 23       	and	r24, r24
     fe8:	11 f0       	breq	.+4      	; 0xfee <main+0x2ea>
                                    // Zet de led aan
                                    PORTB |= (1 << LED);
     fea:	29 9a       	sbi	0x05, 1	; 5
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <main+0x2ec>
                                } else {
                                    // Zet de led uit
                                    PORTB &= ~(1 << LED);
     fee:	29 98       	cbi	0x05, 1	; 5
     ff0:	ff ef       	ldi	r31, 0xFF	; 255
     ff2:	23 ed       	ldi	r18, 0xD3	; 211
     ff4:	30 e3       	ldi	r19, 0x30	; 48
     ff6:	f1 50       	subi	r31, 0x01	; 1
     ff8:	20 40       	sbci	r18, 0x00	; 0
     ffa:	30 40       	sbci	r19, 0x00	; 0
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <main+0x2f2>
     ffe:	3f c0       	rjmp	.+126    	; 0x107e <main+0x37a>
                                // Reset status
                                armed ? lcd_print("armed") : lcd_print("disarmed");
                            }
                            break;
                        case arm:
                            if(authorised) {
    1000:	80 91 54 03 	lds	r24, 0x0354
    1004:	88 23       	and	r24, r24
    1006:	09 f4       	brne	.+2      	; 0x100a <main+0x306>
    1008:	eb ce       	rjmp	.-554    	; 0xde0 <main+0xdc>
                                uint8_t on = receiveddata[3];
                                if (on) {
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	88 23       	and	r24, r24
    100e:	39 f0       	breq	.+14     	; 0x101e <main+0x31a>
                                    lcd_print("armed");
    1010:	89 ee       	ldi	r24, 0xE9	; 233
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_print>
                                    // Armed de node en schakelt het alarm in
                                    armed = 1;
    1018:	d0 92 36 01 	sts	0x0136, r13
    101c:	e1 ce       	rjmp	.-574    	; 0xde0 <main+0xdc>
                                } else {
                                    lcd_print("disarmed");
    101e:	86 ee       	ldi	r24, 0xE6	; 230
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_print>
                                    // Disarmed de node en schakelt het alarm uit
                                    armed = 0;
    1026:	10 92 36 01 	sts	0x0136, r1
    102a:	da ce       	rjmp	.-588    	; 0xde0 <main+0xdc>
                                }
                            }
                            break;
                        case reset:
                            if(authorised) {
    102c:	80 91 54 03 	lds	r24, 0x0354
    1030:	88 23       	and	r24, r24
    1032:	09 f4       	brne	.+2      	; 0x1036 <main+0x332>
    1034:	d5 ce       	rjmp	.-598    	; 0xde0 <main+0xdc>
                                // Print de status
                                lcd_print("reset");
    1036:	8d eb       	ldi	r24, 0xBD	; 189
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_print>
                                
                                // Unregister de node
                                udp_broadcast(unr, 10);
    103e:	6a e0       	ldi	r22, 0x0A	; 10
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	84 e0       	ldi	r24, 0x04	; 4
    1044:	0e 94 bf 04 	call	0x97e	; 0x97e <udp_broadcast>
                                
                                // Reset de node, instellingen worden hersteld
                                WDTCSR |= (1 << WDE);
    1048:	80 91 60 00 	lds	r24, 0x0060
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	80 93 60 00 	sts	0x0060, r24
    1052:	c6 ce       	rjmp	.-628    	; 0xde0 <main+0xdc>
                            }
                            break;
                        case ping:
                            if(authorised) {
    1054:	80 91 54 03 	lds	r24, 0x0354
    1058:	88 23       	and	r24, r24
    105a:	09 f4       	brne	.+2      	; 0x105e <main+0x35a>
    105c:	c1 ce       	rjmp	.-638    	; 0xde0 <main+0xdc>
                                // Print de status
                                lcd_print("ping");
    105e:	83 ec       	ldi	r24, 0xC3	; 195
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_print>
                                
                                // Broadcast een acknowledge
                                udp_broadcast(udpack, 3);
    1066:	63 e0       	ldi	r22, 0x03	; 3
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	0e 94 bf 04 	call	0x97e	; 0x97e <udp_broadcast>
    1070:	4f ef       	ldi	r20, 0xFF	; 255
    1072:	83 ed       	ldi	r24, 0xD3	; 211
    1074:	90 e3       	ldi	r25, 0x30	; 48
    1076:	41 50       	subi	r20, 0x01	; 1
    1078:	80 40       	sbci	r24, 0x00	; 0
    107a:	90 40       	sbci	r25, 0x00	; 0
    107c:	e1 f7       	brne	.-8      	; 0x1076 <main+0x372>
    107e:	00 c0       	rjmp	.+0      	; 0x1080 <main+0x37c>
    1080:	00 00       	nop
    1082:	9b cf       	rjmp	.-202    	; 0xfba <main+0x2b6>
#endif
                // Monitor wordt uitgelogd
                authorised = 0;
                
                // Socket luistert naar nieuwe requests
                tcp_listen();
    1084:	0e 94 bf 02 	call	0x57e	; 0x57e <tcp_listen>
                
                break;
    1088:	ab ce       	rjmp	.-682    	; 0xde0 <main+0xdc>

0000108a <__divmodhi4>:
    108a:	97 fb       	bst	r25, 7
    108c:	07 2e       	mov	r0, r23
    108e:	16 f4       	brtc	.+4      	; 0x1094 <__divmodhi4+0xa>
    1090:	00 94       	com	r0
    1092:	07 d0       	rcall	.+14     	; 0x10a2 <__divmodhi4_neg1>
    1094:	77 fd       	sbrc	r23, 7
    1096:	09 d0       	rcall	.+18     	; 0x10aa <__divmodhi4_neg2>
    1098:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodhi4>
    109c:	07 fc       	sbrc	r0, 7
    109e:	05 d0       	rcall	.+10     	; 0x10aa <__divmodhi4_neg2>
    10a0:	3e f4       	brtc	.+14     	; 0x10b0 <__divmodhi4_exit>

000010a2 <__divmodhi4_neg1>:
    10a2:	90 95       	com	r25
    10a4:	81 95       	neg	r24
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	08 95       	ret

000010aa <__divmodhi4_neg2>:
    10aa:	70 95       	com	r23
    10ac:	61 95       	neg	r22
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255

000010b0 <__divmodhi4_exit>:
    10b0:	08 95       	ret

000010b2 <__udivmodsi4>:
    10b2:	a1 e2       	ldi	r26, 0x21	; 33
    10b4:	1a 2e       	mov	r1, r26
    10b6:	aa 1b       	sub	r26, r26
    10b8:	bb 1b       	sub	r27, r27
    10ba:	fd 01       	movw	r30, r26
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <__udivmodsi4_ep>

000010be <__udivmodsi4_loop>:
    10be:	aa 1f       	adc	r26, r26
    10c0:	bb 1f       	adc	r27, r27
    10c2:	ee 1f       	adc	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	a2 17       	cp	r26, r18
    10c8:	b3 07       	cpc	r27, r19
    10ca:	e4 07       	cpc	r30, r20
    10cc:	f5 07       	cpc	r31, r21
    10ce:	20 f0       	brcs	.+8      	; 0x10d8 <__udivmodsi4_ep>
    10d0:	a2 1b       	sub	r26, r18
    10d2:	b3 0b       	sbc	r27, r19
    10d4:	e4 0b       	sbc	r30, r20
    10d6:	f5 0b       	sbc	r31, r21

000010d8 <__udivmodsi4_ep>:
    10d8:	66 1f       	adc	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	88 1f       	adc	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	1a 94       	dec	r1
    10e2:	69 f7       	brne	.-38     	; 0x10be <__udivmodsi4_loop>
    10e4:	60 95       	com	r22
    10e6:	70 95       	com	r23
    10e8:	80 95       	com	r24
    10ea:	90 95       	com	r25
    10ec:	9b 01       	movw	r18, r22
    10ee:	ac 01       	movw	r20, r24
    10f0:	bd 01       	movw	r22, r26
    10f2:	cf 01       	movw	r24, r30
    10f4:	08 95       	ret

000010f6 <__udivmodhi4>:
    10f6:	aa 1b       	sub	r26, r26
    10f8:	bb 1b       	sub	r27, r27
    10fa:	51 e1       	ldi	r21, 0x11	; 17
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <__udivmodhi4_ep>

000010fe <__udivmodhi4_loop>:
    10fe:	aa 1f       	adc	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	a6 17       	cp	r26, r22
    1104:	b7 07       	cpc	r27, r23
    1106:	10 f0       	brcs	.+4      	; 0x110c <__udivmodhi4_ep>
    1108:	a6 1b       	sub	r26, r22
    110a:	b7 0b       	sbc	r27, r23

0000110c <__udivmodhi4_ep>:
    110c:	88 1f       	adc	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	5a 95       	dec	r21
    1112:	a9 f7       	brne	.-22     	; 0x10fe <__udivmodhi4_loop>
    1114:	80 95       	com	r24
    1116:	90 95       	com	r25
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	08 95       	ret

0000111e <printf>:
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e9       	ldi	r30, 0x95	; 149
    1124:	f8 e0       	ldi	r31, 0x08	; 8
    1126:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__prologue_saves__+0x20>
    112a:	fe 01       	movw	r30, r28
    112c:	35 96       	adiw	r30, 0x05	; 5
    112e:	61 91       	ld	r22, Z+
    1130:	71 91       	ld	r23, Z+
    1132:	af 01       	movw	r20, r30
    1134:	80 91 67 03 	lds	r24, 0x0367
    1138:	90 91 68 03 	lds	r25, 0x0368
    113c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <vfprintf>
    1140:	e2 e0       	ldi	r30, 0x02	; 2
    1142:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__epilogue_restores__+0x20>

00001146 <puts>:
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	e0 91 67 03 	lds	r30, 0x0367
    1152:	f0 91 68 03 	lds	r31, 0x0368
    1156:	23 81       	ldd	r18, Z+3	; 0x03
    1158:	21 ff       	sbrs	r18, 1
    115a:	1b c0       	rjmp	.+54     	; 0x1192 <puts+0x4c>
    115c:	ec 01       	movw	r28, r24
    115e:	00 e0       	ldi	r16, 0x00	; 0
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	89 91       	ld	r24, Y+
    1164:	60 91 67 03 	lds	r22, 0x0367
    1168:	70 91 68 03 	lds	r23, 0x0368
    116c:	db 01       	movw	r26, r22
    116e:	18 96       	adiw	r26, 0x08	; 8
    1170:	ed 91       	ld	r30, X+
    1172:	fc 91       	ld	r31, X
    1174:	19 97       	sbiw	r26, 0x09	; 9
    1176:	88 23       	and	r24, r24
    1178:	31 f0       	breq	.+12     	; 0x1186 <puts+0x40>
    117a:	09 95       	icall
    117c:	89 2b       	or	r24, r25
    117e:	89 f3       	breq	.-30     	; 0x1162 <puts+0x1c>
    1180:	0f ef       	ldi	r16, 0xFF	; 255
    1182:	1f ef       	ldi	r17, 0xFF	; 255
    1184:	ee cf       	rjmp	.-36     	; 0x1162 <puts+0x1c>
    1186:	8a e0       	ldi	r24, 0x0A	; 10
    1188:	09 95       	icall
    118a:	89 2b       	or	r24, r25
    118c:	11 f4       	brne	.+4      	; 0x1192 <puts+0x4c>
    118e:	c8 01       	movw	r24, r16
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <puts+0x50>
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	9f ef       	ldi	r25, 0xFF	; 255
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <vfprintf>:
    11a0:	ac e0       	ldi	r26, 0x0C	; 12
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e6 ed       	ldi	r30, 0xD6	; 214
    11a6:	f8 e0       	ldi	r31, 0x08	; 8
    11a8:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__prologue_saves__>
    11ac:	7c 01       	movw	r14, r24
    11ae:	6b 01       	movw	r12, r22
    11b0:	8a 01       	movw	r16, r20
    11b2:	fc 01       	movw	r30, r24
    11b4:	17 82       	std	Z+7, r1	; 0x07
    11b6:	16 82       	std	Z+6, r1	; 0x06
    11b8:	83 81       	ldd	r24, Z+3	; 0x03
    11ba:	81 ff       	sbrs	r24, 1
    11bc:	bd c1       	rjmp	.+890    	; 0x1538 <vfprintf+0x398>
    11be:	ce 01       	movw	r24, r28
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	4c 01       	movw	r8, r24
    11c4:	f7 01       	movw	r30, r14
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	f6 01       	movw	r30, r12
    11ca:	93 fd       	sbrc	r25, 3
    11cc:	85 91       	lpm	r24, Z+
    11ce:	93 ff       	sbrs	r25, 3
    11d0:	81 91       	ld	r24, Z+
    11d2:	6f 01       	movw	r12, r30
    11d4:	88 23       	and	r24, r24
    11d6:	09 f4       	brne	.+2      	; 0x11da <vfprintf+0x3a>
    11d8:	ab c1       	rjmp	.+854    	; 0x1530 <vfprintf+0x390>
    11da:	85 32       	cpi	r24, 0x25	; 37
    11dc:	39 f4       	brne	.+14     	; 0x11ec <vfprintf+0x4c>
    11de:	93 fd       	sbrc	r25, 3
    11e0:	85 91       	lpm	r24, Z+
    11e2:	93 ff       	sbrs	r25, 3
    11e4:	81 91       	ld	r24, Z+
    11e6:	6f 01       	movw	r12, r30
    11e8:	85 32       	cpi	r24, 0x25	; 37
    11ea:	29 f4       	brne	.+10     	; 0x11f6 <vfprintf+0x56>
    11ec:	b7 01       	movw	r22, r14
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    11f4:	e7 cf       	rjmp	.-50     	; 0x11c4 <vfprintf+0x24>
    11f6:	51 2c       	mov	r5, r1
    11f8:	31 2c       	mov	r3, r1
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	20 32       	cpi	r18, 0x20	; 32
    11fe:	a0 f4       	brcc	.+40     	; 0x1228 <vfprintf+0x88>
    1200:	8b 32       	cpi	r24, 0x2B	; 43
    1202:	69 f0       	breq	.+26     	; 0x121e <vfprintf+0x7e>
    1204:	30 f4       	brcc	.+12     	; 0x1212 <vfprintf+0x72>
    1206:	80 32       	cpi	r24, 0x20	; 32
    1208:	59 f0       	breq	.+22     	; 0x1220 <vfprintf+0x80>
    120a:	83 32       	cpi	r24, 0x23	; 35
    120c:	69 f4       	brne	.+26     	; 0x1228 <vfprintf+0x88>
    120e:	20 61       	ori	r18, 0x10	; 16
    1210:	2c c0       	rjmp	.+88     	; 0x126a <vfprintf+0xca>
    1212:	8d 32       	cpi	r24, 0x2D	; 45
    1214:	39 f0       	breq	.+14     	; 0x1224 <vfprintf+0x84>
    1216:	80 33       	cpi	r24, 0x30	; 48
    1218:	39 f4       	brne	.+14     	; 0x1228 <vfprintf+0x88>
    121a:	21 60       	ori	r18, 0x01	; 1
    121c:	26 c0       	rjmp	.+76     	; 0x126a <vfprintf+0xca>
    121e:	22 60       	ori	r18, 0x02	; 2
    1220:	24 60       	ori	r18, 0x04	; 4
    1222:	23 c0       	rjmp	.+70     	; 0x126a <vfprintf+0xca>
    1224:	28 60       	ori	r18, 0x08	; 8
    1226:	21 c0       	rjmp	.+66     	; 0x126a <vfprintf+0xca>
    1228:	27 fd       	sbrc	r18, 7
    122a:	27 c0       	rjmp	.+78     	; 0x127a <vfprintf+0xda>
    122c:	30 ed       	ldi	r19, 0xD0	; 208
    122e:	38 0f       	add	r19, r24
    1230:	3a 30       	cpi	r19, 0x0A	; 10
    1232:	78 f4       	brcc	.+30     	; 0x1252 <vfprintf+0xb2>
    1234:	26 ff       	sbrs	r18, 6
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <vfprintf+0xa4>
    1238:	fa e0       	ldi	r31, 0x0A	; 10
    123a:	5f 9e       	mul	r5, r31
    123c:	30 0d       	add	r19, r0
    123e:	11 24       	eor	r1, r1
    1240:	53 2e       	mov	r5, r19
    1242:	13 c0       	rjmp	.+38     	; 0x126a <vfprintf+0xca>
    1244:	8a e0       	ldi	r24, 0x0A	; 10
    1246:	38 9e       	mul	r3, r24
    1248:	30 0d       	add	r19, r0
    124a:	11 24       	eor	r1, r1
    124c:	33 2e       	mov	r3, r19
    124e:	20 62       	ori	r18, 0x20	; 32
    1250:	0c c0       	rjmp	.+24     	; 0x126a <vfprintf+0xca>
    1252:	8e 32       	cpi	r24, 0x2E	; 46
    1254:	21 f4       	brne	.+8      	; 0x125e <vfprintf+0xbe>
    1256:	26 fd       	sbrc	r18, 6
    1258:	6b c1       	rjmp	.+726    	; 0x1530 <vfprintf+0x390>
    125a:	20 64       	ori	r18, 0x40	; 64
    125c:	06 c0       	rjmp	.+12     	; 0x126a <vfprintf+0xca>
    125e:	8c 36       	cpi	r24, 0x6C	; 108
    1260:	11 f4       	brne	.+4      	; 0x1266 <vfprintf+0xc6>
    1262:	20 68       	ori	r18, 0x80	; 128
    1264:	02 c0       	rjmp	.+4      	; 0x126a <vfprintf+0xca>
    1266:	88 36       	cpi	r24, 0x68	; 104
    1268:	41 f4       	brne	.+16     	; 0x127a <vfprintf+0xda>
    126a:	f6 01       	movw	r30, r12
    126c:	93 fd       	sbrc	r25, 3
    126e:	85 91       	lpm	r24, Z+
    1270:	93 ff       	sbrs	r25, 3
    1272:	81 91       	ld	r24, Z+
    1274:	6f 01       	movw	r12, r30
    1276:	81 11       	cpse	r24, r1
    1278:	c1 cf       	rjmp	.-126    	; 0x11fc <vfprintf+0x5c>
    127a:	98 2f       	mov	r25, r24
    127c:	9f 7d       	andi	r25, 0xDF	; 223
    127e:	95 54       	subi	r25, 0x45	; 69
    1280:	93 30       	cpi	r25, 0x03	; 3
    1282:	28 f4       	brcc	.+10     	; 0x128e <vfprintf+0xee>
    1284:	0c 5f       	subi	r16, 0xFC	; 252
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	ff e3       	ldi	r31, 0x3F	; 63
    128a:	f9 83       	std	Y+1, r31	; 0x01
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <vfprintf+0x108>
    128e:	83 36       	cpi	r24, 0x63	; 99
    1290:	31 f0       	breq	.+12     	; 0x129e <vfprintf+0xfe>
    1292:	83 37       	cpi	r24, 0x73	; 115
    1294:	71 f0       	breq	.+28     	; 0x12b2 <vfprintf+0x112>
    1296:	83 35       	cpi	r24, 0x53	; 83
    1298:	09 f0       	breq	.+2      	; 0x129c <vfprintf+0xfc>
    129a:	5b c0       	rjmp	.+182    	; 0x1352 <vfprintf+0x1b2>
    129c:	22 c0       	rjmp	.+68     	; 0x12e2 <vfprintf+0x142>
    129e:	f8 01       	movw	r30, r16
    12a0:	80 81       	ld	r24, Z
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	0e 5f       	subi	r16, 0xFE	; 254
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	44 24       	eor	r4, r4
    12aa:	43 94       	inc	r4
    12ac:	51 2c       	mov	r5, r1
    12ae:	54 01       	movw	r10, r8
    12b0:	15 c0       	rjmp	.+42     	; 0x12dc <vfprintf+0x13c>
    12b2:	38 01       	movw	r6, r16
    12b4:	f2 e0       	ldi	r31, 0x02	; 2
    12b6:	6f 0e       	add	r6, r31
    12b8:	71 1c       	adc	r7, r1
    12ba:	f8 01       	movw	r30, r16
    12bc:	a0 80       	ld	r10, Z
    12be:	b1 80       	ldd	r11, Z+1	; 0x01
    12c0:	26 ff       	sbrs	r18, 6
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <vfprintf+0x12a>
    12c4:	65 2d       	mov	r22, r5
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <vfprintf+0x12e>
    12ca:	6f ef       	ldi	r22, 0xFF	; 255
    12cc:	7f ef       	ldi	r23, 0xFF	; 255
    12ce:	c5 01       	movw	r24, r10
    12d0:	2c 87       	std	Y+12, r18	; 0x0c
    12d2:	0e 94 ad 0a 	call	0x155a	; 0x155a <strnlen>
    12d6:	2c 01       	movw	r4, r24
    12d8:	83 01       	movw	r16, r6
    12da:	2c 85       	ldd	r18, Y+12	; 0x0c
    12dc:	2f 77       	andi	r18, 0x7F	; 127
    12de:	22 2e       	mov	r2, r18
    12e0:	17 c0       	rjmp	.+46     	; 0x1310 <vfprintf+0x170>
    12e2:	38 01       	movw	r6, r16
    12e4:	f2 e0       	ldi	r31, 0x02	; 2
    12e6:	6f 0e       	add	r6, r31
    12e8:	71 1c       	adc	r7, r1
    12ea:	f8 01       	movw	r30, r16
    12ec:	a0 80       	ld	r10, Z
    12ee:	b1 80       	ldd	r11, Z+1	; 0x01
    12f0:	26 ff       	sbrs	r18, 6
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <vfprintf+0x15a>
    12f4:	65 2d       	mov	r22, r5
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <vfprintf+0x15e>
    12fa:	6f ef       	ldi	r22, 0xFF	; 255
    12fc:	7f ef       	ldi	r23, 0xFF	; 255
    12fe:	c5 01       	movw	r24, r10
    1300:	2c 87       	std	Y+12, r18	; 0x0c
    1302:	0e 94 a2 0a 	call	0x1544	; 0x1544 <strnlen_P>
    1306:	2c 01       	movw	r4, r24
    1308:	2c 85       	ldd	r18, Y+12	; 0x0c
    130a:	20 68       	ori	r18, 0x80	; 128
    130c:	22 2e       	mov	r2, r18
    130e:	83 01       	movw	r16, r6
    1310:	23 fc       	sbrc	r2, 3
    1312:	1b c0       	rjmp	.+54     	; 0x134a <vfprintf+0x1aa>
    1314:	83 2d       	mov	r24, r3
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	48 16       	cp	r4, r24
    131a:	59 06       	cpc	r5, r25
    131c:	b0 f4       	brcc	.+44     	; 0x134a <vfprintf+0x1aa>
    131e:	b7 01       	movw	r22, r14
    1320:	80 e2       	ldi	r24, 0x20	; 32
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    1328:	3a 94       	dec	r3
    132a:	f4 cf       	rjmp	.-24     	; 0x1314 <vfprintf+0x174>
    132c:	f5 01       	movw	r30, r10
    132e:	27 fc       	sbrc	r2, 7
    1330:	85 91       	lpm	r24, Z+
    1332:	27 fe       	sbrs	r2, 7
    1334:	81 91       	ld	r24, Z+
    1336:	5f 01       	movw	r10, r30
    1338:	b7 01       	movw	r22, r14
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    1340:	31 10       	cpse	r3, r1
    1342:	3a 94       	dec	r3
    1344:	f1 e0       	ldi	r31, 0x01	; 1
    1346:	4f 1a       	sub	r4, r31
    1348:	51 08       	sbc	r5, r1
    134a:	41 14       	cp	r4, r1
    134c:	51 04       	cpc	r5, r1
    134e:	71 f7       	brne	.-36     	; 0x132c <vfprintf+0x18c>
    1350:	e5 c0       	rjmp	.+458    	; 0x151c <vfprintf+0x37c>
    1352:	84 36       	cpi	r24, 0x64	; 100
    1354:	11 f0       	breq	.+4      	; 0x135a <vfprintf+0x1ba>
    1356:	89 36       	cpi	r24, 0x69	; 105
    1358:	39 f5       	brne	.+78     	; 0x13a8 <vfprintf+0x208>
    135a:	f8 01       	movw	r30, r16
    135c:	27 ff       	sbrs	r18, 7
    135e:	07 c0       	rjmp	.+14     	; 0x136e <vfprintf+0x1ce>
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	0c 5f       	subi	r16, 0xFC	; 252
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
    136c:	08 c0       	rjmp	.+16     	; 0x137e <vfprintf+0x1de>
    136e:	60 81       	ld	r22, Z
    1370:	71 81       	ldd	r23, Z+1	; 0x01
    1372:	88 27       	eor	r24, r24
    1374:	77 fd       	sbrc	r23, 7
    1376:	80 95       	com	r24
    1378:	98 2f       	mov	r25, r24
    137a:	0e 5f       	subi	r16, 0xFE	; 254
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	2f 76       	andi	r18, 0x6F	; 111
    1380:	b2 2e       	mov	r11, r18
    1382:	97 ff       	sbrs	r25, 7
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <vfprintf+0x1f8>
    1386:	90 95       	com	r25
    1388:	80 95       	com	r24
    138a:	70 95       	com	r23
    138c:	61 95       	neg	r22
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	8f 4f       	sbci	r24, 0xFF	; 255
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	20 68       	ori	r18, 0x80	; 128
    1396:	b2 2e       	mov	r11, r18
    1398:	2a e0       	ldi	r18, 0x0A	; 10
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	a4 01       	movw	r20, r8
    139e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__ultoa_invert>
    13a2:	a8 2e       	mov	r10, r24
    13a4:	a8 18       	sub	r10, r8
    13a6:	44 c0       	rjmp	.+136    	; 0x1430 <vfprintf+0x290>
    13a8:	85 37       	cpi	r24, 0x75	; 117
    13aa:	29 f4       	brne	.+10     	; 0x13b6 <vfprintf+0x216>
    13ac:	2f 7e       	andi	r18, 0xEF	; 239
    13ae:	b2 2e       	mov	r11, r18
    13b0:	2a e0       	ldi	r18, 0x0A	; 10
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	25 c0       	rjmp	.+74     	; 0x1400 <vfprintf+0x260>
    13b6:	f2 2f       	mov	r31, r18
    13b8:	f9 7f       	andi	r31, 0xF9	; 249
    13ba:	bf 2e       	mov	r11, r31
    13bc:	8f 36       	cpi	r24, 0x6F	; 111
    13be:	c1 f0       	breq	.+48     	; 0x13f0 <vfprintf+0x250>
    13c0:	18 f4       	brcc	.+6      	; 0x13c8 <vfprintf+0x228>
    13c2:	88 35       	cpi	r24, 0x58	; 88
    13c4:	79 f0       	breq	.+30     	; 0x13e4 <vfprintf+0x244>
    13c6:	b4 c0       	rjmp	.+360    	; 0x1530 <vfprintf+0x390>
    13c8:	80 37       	cpi	r24, 0x70	; 112
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <vfprintf+0x232>
    13cc:	88 37       	cpi	r24, 0x78	; 120
    13ce:	21 f0       	breq	.+8      	; 0x13d8 <vfprintf+0x238>
    13d0:	af c0       	rjmp	.+350    	; 0x1530 <vfprintf+0x390>
    13d2:	2f 2f       	mov	r18, r31
    13d4:	20 61       	ori	r18, 0x10	; 16
    13d6:	b2 2e       	mov	r11, r18
    13d8:	b4 fe       	sbrs	r11, 4
    13da:	0d c0       	rjmp	.+26     	; 0x13f6 <vfprintf+0x256>
    13dc:	8b 2d       	mov	r24, r11
    13de:	84 60       	ori	r24, 0x04	; 4
    13e0:	b8 2e       	mov	r11, r24
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <vfprintf+0x256>
    13e4:	24 ff       	sbrs	r18, 4
    13e6:	0a c0       	rjmp	.+20     	; 0x13fc <vfprintf+0x25c>
    13e8:	9f 2f       	mov	r25, r31
    13ea:	96 60       	ori	r25, 0x06	; 6
    13ec:	b9 2e       	mov	r11, r25
    13ee:	06 c0       	rjmp	.+12     	; 0x13fc <vfprintf+0x25c>
    13f0:	28 e0       	ldi	r18, 0x08	; 8
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <vfprintf+0x260>
    13f6:	20 e1       	ldi	r18, 0x10	; 16
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <vfprintf+0x260>
    13fc:	20 e1       	ldi	r18, 0x10	; 16
    13fe:	32 e0       	ldi	r19, 0x02	; 2
    1400:	f8 01       	movw	r30, r16
    1402:	b7 fe       	sbrs	r11, 7
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <vfprintf+0x274>
    1406:	60 81       	ld	r22, Z
    1408:	71 81       	ldd	r23, Z+1	; 0x01
    140a:	82 81       	ldd	r24, Z+2	; 0x02
    140c:	93 81       	ldd	r25, Z+3	; 0x03
    140e:	0c 5f       	subi	r16, 0xFC	; 252
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <vfprintf+0x280>
    1414:	60 81       	ld	r22, Z
    1416:	71 81       	ldd	r23, Z+1	; 0x01
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 5f       	subi	r16, 0xFE	; 254
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	a4 01       	movw	r20, r8
    1422:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__ultoa_invert>
    1426:	a8 2e       	mov	r10, r24
    1428:	a8 18       	sub	r10, r8
    142a:	fb 2d       	mov	r31, r11
    142c:	ff 77       	andi	r31, 0x7F	; 127
    142e:	bf 2e       	mov	r11, r31
    1430:	b6 fe       	sbrs	r11, 6
    1432:	0b c0       	rjmp	.+22     	; 0x144a <vfprintf+0x2aa>
    1434:	2b 2d       	mov	r18, r11
    1436:	2e 7f       	andi	r18, 0xFE	; 254
    1438:	a5 14       	cp	r10, r5
    143a:	50 f4       	brcc	.+20     	; 0x1450 <vfprintf+0x2b0>
    143c:	b4 fe       	sbrs	r11, 4
    143e:	0a c0       	rjmp	.+20     	; 0x1454 <vfprintf+0x2b4>
    1440:	b2 fc       	sbrc	r11, 2
    1442:	08 c0       	rjmp	.+16     	; 0x1454 <vfprintf+0x2b4>
    1444:	2b 2d       	mov	r18, r11
    1446:	2e 7e       	andi	r18, 0xEE	; 238
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <vfprintf+0x2b4>
    144a:	7a 2c       	mov	r7, r10
    144c:	2b 2d       	mov	r18, r11
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <vfprintf+0x2b6>
    1450:	7a 2c       	mov	r7, r10
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <vfprintf+0x2b6>
    1454:	75 2c       	mov	r7, r5
    1456:	24 ff       	sbrs	r18, 4
    1458:	0d c0       	rjmp	.+26     	; 0x1474 <vfprintf+0x2d4>
    145a:	fe 01       	movw	r30, r28
    145c:	ea 0d       	add	r30, r10
    145e:	f1 1d       	adc	r31, r1
    1460:	80 81       	ld	r24, Z
    1462:	80 33       	cpi	r24, 0x30	; 48
    1464:	11 f4       	brne	.+4      	; 0x146a <vfprintf+0x2ca>
    1466:	29 7e       	andi	r18, 0xE9	; 233
    1468:	09 c0       	rjmp	.+18     	; 0x147c <vfprintf+0x2dc>
    146a:	22 ff       	sbrs	r18, 2
    146c:	06 c0       	rjmp	.+12     	; 0x147a <vfprintf+0x2da>
    146e:	73 94       	inc	r7
    1470:	73 94       	inc	r7
    1472:	04 c0       	rjmp	.+8      	; 0x147c <vfprintf+0x2dc>
    1474:	82 2f       	mov	r24, r18
    1476:	86 78       	andi	r24, 0x86	; 134
    1478:	09 f0       	breq	.+2      	; 0x147c <vfprintf+0x2dc>
    147a:	73 94       	inc	r7
    147c:	23 fd       	sbrc	r18, 3
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <vfprintf+0x306>
    1480:	20 ff       	sbrs	r18, 0
    1482:	06 c0       	rjmp	.+12     	; 0x1490 <vfprintf+0x2f0>
    1484:	5a 2c       	mov	r5, r10
    1486:	73 14       	cp	r7, r3
    1488:	18 f4       	brcc	.+6      	; 0x1490 <vfprintf+0x2f0>
    148a:	53 0c       	add	r5, r3
    148c:	57 18       	sub	r5, r7
    148e:	73 2c       	mov	r7, r3
    1490:	73 14       	cp	r7, r3
    1492:	68 f4       	brcc	.+26     	; 0x14ae <vfprintf+0x30e>
    1494:	b7 01       	movw	r22, r14
    1496:	80 e2       	ldi	r24, 0x20	; 32
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	2c 87       	std	Y+12, r18	; 0x0c
    149c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    14a0:	73 94       	inc	r7
    14a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14a4:	f5 cf       	rjmp	.-22     	; 0x1490 <vfprintf+0x2f0>
    14a6:	73 14       	cp	r7, r3
    14a8:	10 f4       	brcc	.+4      	; 0x14ae <vfprintf+0x30e>
    14aa:	37 18       	sub	r3, r7
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <vfprintf+0x310>
    14ae:	31 2c       	mov	r3, r1
    14b0:	24 ff       	sbrs	r18, 4
    14b2:	12 c0       	rjmp	.+36     	; 0x14d8 <vfprintf+0x338>
    14b4:	b7 01       	movw	r22, r14
    14b6:	80 e3       	ldi	r24, 0x30	; 48
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	2c 87       	std	Y+12, r18	; 0x0c
    14bc:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    14c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14c2:	22 ff       	sbrs	r18, 2
    14c4:	17 c0       	rjmp	.+46     	; 0x14f4 <vfprintf+0x354>
    14c6:	21 ff       	sbrs	r18, 1
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <vfprintf+0x330>
    14ca:	88 e5       	ldi	r24, 0x58	; 88
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <vfprintf+0x334>
    14d0:	88 e7       	ldi	r24, 0x78	; 120
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	b7 01       	movw	r22, r14
    14d6:	0c c0       	rjmp	.+24     	; 0x14f0 <vfprintf+0x350>
    14d8:	82 2f       	mov	r24, r18
    14da:	86 78       	andi	r24, 0x86	; 134
    14dc:	59 f0       	breq	.+22     	; 0x14f4 <vfprintf+0x354>
    14de:	21 fd       	sbrc	r18, 1
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <vfprintf+0x346>
    14e2:	80 e2       	ldi	r24, 0x20	; 32
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <vfprintf+0x348>
    14e6:	8b e2       	ldi	r24, 0x2B	; 43
    14e8:	27 fd       	sbrc	r18, 7
    14ea:	8d e2       	ldi	r24, 0x2D	; 45
    14ec:	b7 01       	movw	r22, r14
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    14f4:	a5 14       	cp	r10, r5
    14f6:	38 f4       	brcc	.+14     	; 0x1506 <vfprintf+0x366>
    14f8:	b7 01       	movw	r22, r14
    14fa:	80 e3       	ldi	r24, 0x30	; 48
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    1502:	5a 94       	dec	r5
    1504:	f7 cf       	rjmp	.-18     	; 0x14f4 <vfprintf+0x354>
    1506:	aa 94       	dec	r10
    1508:	f4 01       	movw	r30, r8
    150a:	ea 0d       	add	r30, r10
    150c:	f1 1d       	adc	r31, r1
    150e:	80 81       	ld	r24, Z
    1510:	b7 01       	movw	r22, r14
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    1518:	a1 10       	cpse	r10, r1
    151a:	f5 cf       	rjmp	.-22     	; 0x1506 <vfprintf+0x366>
    151c:	33 20       	and	r3, r3
    151e:	09 f4       	brne	.+2      	; 0x1522 <vfprintf+0x382>
    1520:	51 ce       	rjmp	.-862    	; 0x11c4 <vfprintf+0x24>
    1522:	b7 01       	movw	r22, r14
    1524:	80 e2       	ldi	r24, 0x20	; 32
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 b8 0a 	call	0x1570	; 0x1570 <fputc>
    152c:	3a 94       	dec	r3
    152e:	f6 cf       	rjmp	.-20     	; 0x151c <vfprintf+0x37c>
    1530:	f7 01       	movw	r30, r14
    1532:	86 81       	ldd	r24, Z+6	; 0x06
    1534:	97 81       	ldd	r25, Z+7	; 0x07
    1536:	02 c0       	rjmp	.+4      	; 0x153c <vfprintf+0x39c>
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	9f ef       	ldi	r25, 0xFF	; 255
    153c:	2c 96       	adiw	r28, 0x0c	; 12
    153e:	e2 e1       	ldi	r30, 0x12	; 18
    1540:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__epilogue_restores__>

00001544 <strnlen_P>:
    1544:	fc 01       	movw	r30, r24
    1546:	05 90       	lpm	r0, Z+
    1548:	61 50       	subi	r22, 0x01	; 1
    154a:	70 40       	sbci	r23, 0x00	; 0
    154c:	01 10       	cpse	r0, r1
    154e:	d8 f7       	brcc	.-10     	; 0x1546 <strnlen_P+0x2>
    1550:	80 95       	com	r24
    1552:	90 95       	com	r25
    1554:	8e 0f       	add	r24, r30
    1556:	9f 1f       	adc	r25, r31
    1558:	08 95       	ret

0000155a <strnlen>:
    155a:	fc 01       	movw	r30, r24
    155c:	61 50       	subi	r22, 0x01	; 1
    155e:	70 40       	sbci	r23, 0x00	; 0
    1560:	01 90       	ld	r0, Z+
    1562:	01 10       	cpse	r0, r1
    1564:	d8 f7       	brcc	.-10     	; 0x155c <strnlen+0x2>
    1566:	80 95       	com	r24
    1568:	90 95       	com	r25
    156a:	8e 0f       	add	r24, r30
    156c:	9f 1f       	adc	r25, r31
    156e:	08 95       	ret

00001570 <fputc>:
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	18 2f       	mov	r17, r24
    157a:	09 2f       	mov	r16, r25
    157c:	eb 01       	movw	r28, r22
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	81 fd       	sbrc	r24, 1
    1582:	03 c0       	rjmp	.+6      	; 0x158a <fputc+0x1a>
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	9f ef       	ldi	r25, 0xFF	; 255
    1588:	20 c0       	rjmp	.+64     	; 0x15ca <fputc+0x5a>
    158a:	82 ff       	sbrs	r24, 2
    158c:	10 c0       	rjmp	.+32     	; 0x15ae <fputc+0x3e>
    158e:	4e 81       	ldd	r20, Y+6	; 0x06
    1590:	5f 81       	ldd	r21, Y+7	; 0x07
    1592:	2c 81       	ldd	r18, Y+4	; 0x04
    1594:	3d 81       	ldd	r19, Y+5	; 0x05
    1596:	42 17       	cp	r20, r18
    1598:	53 07       	cpc	r21, r19
    159a:	7c f4       	brge	.+30     	; 0x15ba <fputc+0x4a>
    159c:	e8 81       	ld	r30, Y
    159e:	f9 81       	ldd	r31, Y+1	; 0x01
    15a0:	9f 01       	movw	r18, r30
    15a2:	2f 5f       	subi	r18, 0xFF	; 255
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	39 83       	std	Y+1, r19	; 0x01
    15a8:	28 83       	st	Y, r18
    15aa:	10 83       	st	Z, r17
    15ac:	06 c0       	rjmp	.+12     	; 0x15ba <fputc+0x4a>
    15ae:	e8 85       	ldd	r30, Y+8	; 0x08
    15b0:	f9 85       	ldd	r31, Y+9	; 0x09
    15b2:	81 2f       	mov	r24, r17
    15b4:	09 95       	icall
    15b6:	89 2b       	or	r24, r25
    15b8:	29 f7       	brne	.-54     	; 0x1584 <fputc+0x14>
    15ba:	2e 81       	ldd	r18, Y+6	; 0x06
    15bc:	3f 81       	ldd	r19, Y+7	; 0x07
    15be:	2f 5f       	subi	r18, 0xFF	; 255
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	3f 83       	std	Y+7, r19	; 0x07
    15c4:	2e 83       	std	Y+6, r18	; 0x06
    15c6:	81 2f       	mov	r24, r17
    15c8:	90 2f       	mov	r25, r16
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <__ultoa_invert>:
    15d4:	fa 01       	movw	r30, r20
    15d6:	aa 27       	eor	r26, r26
    15d8:	28 30       	cpi	r18, 0x08	; 8
    15da:	51 f1       	breq	.+84     	; 0x1630 <__ultoa_invert+0x5c>
    15dc:	20 31       	cpi	r18, 0x10	; 16
    15de:	81 f1       	breq	.+96     	; 0x1640 <__ultoa_invert+0x6c>
    15e0:	e8 94       	clt
    15e2:	6f 93       	push	r22
    15e4:	6e 7f       	andi	r22, 0xFE	; 254
    15e6:	6e 5f       	subi	r22, 0xFE	; 254
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	8f 4f       	sbci	r24, 0xFF	; 255
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	af 4f       	sbci	r26, 0xFF	; 255
    15f0:	b1 e0       	ldi	r27, 0x01	; 1
    15f2:	3e d0       	rcall	.+124    	; 0x1670 <__ultoa_invert+0x9c>
    15f4:	b4 e0       	ldi	r27, 0x04	; 4
    15f6:	3c d0       	rcall	.+120    	; 0x1670 <__ultoa_invert+0x9c>
    15f8:	67 0f       	add	r22, r23
    15fa:	78 1f       	adc	r23, r24
    15fc:	89 1f       	adc	r24, r25
    15fe:	9a 1f       	adc	r25, r26
    1600:	a1 1d       	adc	r26, r1
    1602:	68 0f       	add	r22, r24
    1604:	79 1f       	adc	r23, r25
    1606:	8a 1f       	adc	r24, r26
    1608:	91 1d       	adc	r25, r1
    160a:	a1 1d       	adc	r26, r1
    160c:	6a 0f       	add	r22, r26
    160e:	71 1d       	adc	r23, r1
    1610:	81 1d       	adc	r24, r1
    1612:	91 1d       	adc	r25, r1
    1614:	a1 1d       	adc	r26, r1
    1616:	20 d0       	rcall	.+64     	; 0x1658 <__ultoa_invert+0x84>
    1618:	09 f4       	brne	.+2      	; 0x161c <__ultoa_invert+0x48>
    161a:	68 94       	set
    161c:	3f 91       	pop	r19
    161e:	2a e0       	ldi	r18, 0x0A	; 10
    1620:	26 9f       	mul	r18, r22
    1622:	11 24       	eor	r1, r1
    1624:	30 19       	sub	r19, r0
    1626:	30 5d       	subi	r19, 0xD0	; 208
    1628:	31 93       	st	Z+, r19
    162a:	de f6       	brtc	.-74     	; 0x15e2 <__ultoa_invert+0xe>
    162c:	cf 01       	movw	r24, r30
    162e:	08 95       	ret
    1630:	46 2f       	mov	r20, r22
    1632:	47 70       	andi	r20, 0x07	; 7
    1634:	40 5d       	subi	r20, 0xD0	; 208
    1636:	41 93       	st	Z+, r20
    1638:	b3 e0       	ldi	r27, 0x03	; 3
    163a:	0f d0       	rcall	.+30     	; 0x165a <__ultoa_invert+0x86>
    163c:	c9 f7       	brne	.-14     	; 0x1630 <__ultoa_invert+0x5c>
    163e:	f6 cf       	rjmp	.-20     	; 0x162c <__ultoa_invert+0x58>
    1640:	46 2f       	mov	r20, r22
    1642:	4f 70       	andi	r20, 0x0F	; 15
    1644:	40 5d       	subi	r20, 0xD0	; 208
    1646:	4a 33       	cpi	r20, 0x3A	; 58
    1648:	18 f0       	brcs	.+6      	; 0x1650 <__ultoa_invert+0x7c>
    164a:	49 5d       	subi	r20, 0xD9	; 217
    164c:	31 fd       	sbrc	r19, 1
    164e:	40 52       	subi	r20, 0x20	; 32
    1650:	41 93       	st	Z+, r20
    1652:	02 d0       	rcall	.+4      	; 0x1658 <__ultoa_invert+0x84>
    1654:	a9 f7       	brne	.-22     	; 0x1640 <__ultoa_invert+0x6c>
    1656:	ea cf       	rjmp	.-44     	; 0x162c <__ultoa_invert+0x58>
    1658:	b4 e0       	ldi	r27, 0x04	; 4
    165a:	a6 95       	lsr	r26
    165c:	97 95       	ror	r25
    165e:	87 95       	ror	r24
    1660:	77 95       	ror	r23
    1662:	67 95       	ror	r22
    1664:	ba 95       	dec	r27
    1666:	c9 f7       	brne	.-14     	; 0x165a <__ultoa_invert+0x86>
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	61 05       	cpc	r22, r1
    166c:	71 05       	cpc	r23, r1
    166e:	08 95       	ret
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	0a 2e       	mov	r0, r26
    1676:	06 94       	lsr	r0
    1678:	57 95       	ror	r21
    167a:	47 95       	ror	r20
    167c:	37 95       	ror	r19
    167e:	27 95       	ror	r18
    1680:	ba 95       	dec	r27
    1682:	c9 f7       	brne	.-14     	; 0x1676 <__ultoa_invert+0xa2>
    1684:	62 0f       	add	r22, r18
    1686:	73 1f       	adc	r23, r19
    1688:	84 1f       	adc	r24, r20
    168a:	95 1f       	adc	r25, r21
    168c:	a0 1d       	adc	r26, r0
    168e:	08 95       	ret

00001690 <__prologue_saves__>:
    1690:	2f 92       	push	r2
    1692:	3f 92       	push	r3
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	8f 92       	push	r8
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	ca 1b       	sub	r28, r26
    16ba:	db 0b       	sbc	r29, r27
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	09 94       	ijmp

000016c8 <__epilogue_restores__>:
    16c8:	2a 88       	ldd	r2, Y+18	; 0x12
    16ca:	39 88       	ldd	r3, Y+17	; 0x11
    16cc:	48 88       	ldd	r4, Y+16	; 0x10
    16ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    16d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    16d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    16d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    16d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    16d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    16da:	b9 84       	ldd	r11, Y+9	; 0x09
    16dc:	c8 84       	ldd	r12, Y+8	; 0x08
    16de:	df 80       	ldd	r13, Y+7	; 0x07
    16e0:	ee 80       	ldd	r14, Y+6	; 0x06
    16e2:	fd 80       	ldd	r15, Y+5	; 0x05
    16e4:	0c 81       	ldd	r16, Y+4	; 0x04
    16e6:	1b 81       	ldd	r17, Y+3	; 0x03
    16e8:	aa 81       	ldd	r26, Y+2	; 0x02
    16ea:	b9 81       	ldd	r27, Y+1	; 0x01
    16ec:	ce 0f       	add	r28, r30
    16ee:	d1 1d       	adc	r29, r1
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	ed 01       	movw	r28, r26
    16fc:	08 95       	ret

000016fe <_exit>:
    16fe:	f8 94       	cli

00001700 <__stop_program>:
    1700:	ff cf       	rjmp	.-2      	; 0x1700 <__stop_program>
