
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021c  00800100  000011cc  00001260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080031c  0080031c  0000147c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023ad  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a88  00000000  00000000  00003a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b2e  00000000  00000000  000044ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000528  00000000  00000000  00004fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000503  00000000  00000000  00005504  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001754  00000000  00000000  00005a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  0000715b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 32       	cpi	r26, 0x2F	; 47
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
      9e:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initWiznet>:

#endif

// Methode om wiznet mee in te stellen
void initWiznet(void) {
    spi_transmit(MR, (1 << RST));   // Initialiseer registers ethernet shield
      a6:	60 e8       	ldi	r22, 0x80	; 128
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(TMSR, ((1 << S0S0) | (1 << S1S0) | (1 << S2S0) | (1 << S3S0)));    // 2kb grootte
      b0:	65 e5       	ldi	r22, 0x55	; 85
      b2:	8b e1       	ldi	r24, 0x1B	; 27
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(RMSR, ((1 << S0S0) | (1 << S1S0) | (1 << S2S0) | (1 << S3S0)));    // 2kb grootte
      ba:	65 e5       	ldi	r22, 0x55	; 85
      bc:	8a e1       	ldi	r24, 0x1A	; 26
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
      c4:	08 95       	ret

000000c6 <set_gateway>:
}

// Methode om de bytes uit het gateway array mee te versturen
void set_gateway(void) {
      c6:	0f 93       	push	r16
      c8:	1f 93       	push	r17
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	0e e0       	ldi	r16, 0x0E	; 14
      d0:	11 e0       	ldi	r17, 0x01	; 1
    for(int i = 0; i < (sizeof(gtw_addr) / sizeof(gtw_addr[0])); ++i) {
      d2:	c0 e0       	ldi	r28, 0x00	; 0
      d4:	d0 e0       	ldi	r29, 0x00	; 0
        spi_transmit(GAR + i, gtw_addr[i]);
      d6:	f8 01       	movw	r30, r16
      d8:	61 91       	ld	r22, Z+
      da:	8f 01       	movw	r16, r30
      dc:	21 96       	adiw	r28, 0x01	; 1
      de:	ce 01       	movw	r24, r28
      e0:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(RMSR, ((1 << S0S0) | (1 << S1S0) | (1 << S2S0) | (1 << S3S0)));    // 2kb grootte
}

// Methode om de bytes uit het gateway array mee te versturen
void set_gateway(void) {
    for(int i = 0; i < (sizeof(gtw_addr) / sizeof(gtw_addr[0])); ++i) {
      e4:	c4 30       	cpi	r28, 0x04	; 4
      e6:	d1 05       	cpc	r29, r1
      e8:	b1 f7       	brne	.-20     	; 0xd6 <set_gateway+0x10>
        spi_transmit(GAR + i, gtw_addr[i]);
    }
}
      ea:	df 91       	pop	r29
      ec:	cf 91       	pop	r28
      ee:	1f 91       	pop	r17
      f0:	0f 91       	pop	r16
      f2:	08 95       	ret

000000f4 <set_submask>:

// Methode om de bytes uit het subnet array mee te versturen
void set_submask(void) {
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	0a e0       	ldi	r16, 0x0A	; 10
      fe:	11 e0       	ldi	r17, 0x01	; 1
     100:	c5 e0       	ldi	r28, 0x05	; 5
     102:	d0 e0       	ldi	r29, 0x00	; 0
    for(int i = 0; i < (sizeof(sub_mask) / sizeof(sub_mask[0])); ++i) {
        spi_transmit(SUBR + i, sub_mask[i]);
     104:	f8 01       	movw	r30, r16
     106:	61 91       	ld	r22, Z+
     108:	8f 01       	movw	r16, r30
     10a:	ce 01       	movw	r24, r28
     10c:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
     110:	21 96       	adiw	r28, 0x01	; 1
    }
}

// Methode om de bytes uit het subnet array mee te versturen
void set_submask(void) {
    for(int i = 0; i < (sizeof(sub_mask) / sizeof(sub_mask[0])); ++i) {
     112:	c9 30       	cpi	r28, 0x09	; 9
     114:	d1 05       	cpc	r29, r1
     116:	b1 f7       	brne	.-20     	; 0x104 <set_submask+0x10>
        spi_transmit(SUBR + i, sub_mask[i]);
    }
}
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	08 95       	ret

00000122 <set_macaddress>:

// Methode om de bytes uit het macaddress array mee te versturen
void set_macaddress(void) {
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	04 e0       	ldi	r16, 0x04	; 4
     12c:	11 e0       	ldi	r17, 0x01	; 1
     12e:	c9 e0       	ldi	r28, 0x09	; 9
     130:	d0 e0       	ldi	r29, 0x00	; 0
    for(int i = 0; i < (sizeof(mac_addr) / sizeof(mac_addr[0])); ++i) {
        spi_transmit(SHAR + i, mac_addr[i]);
     132:	f8 01       	movw	r30, r16
     134:	61 91       	ld	r22, Z+
     136:	8f 01       	movw	r16, r30
     138:	ce 01       	movw	r24, r28
     13a:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
     13e:	21 96       	adiw	r28, 0x01	; 1
    }
}

// Methode om de bytes uit het macaddress array mee te versturen
void set_macaddress(void) {
    for(int i = 0; i < (sizeof(mac_addr) / sizeof(mac_addr[0])); ++i) {
     140:	cf 30       	cpi	r28, 0x0F	; 15
     142:	d1 05       	cpc	r29, r1
     144:	b1 f7       	brne	.-20     	; 0x132 <set_macaddress+0x10>
        spi_transmit(SHAR + i, mac_addr[i]);
    }
}
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	1f 91       	pop	r17
     14c:	0f 91       	pop	r16
     14e:	08 95       	ret

00000150 <set_ipaddress>:

// Methode om de bytes uit het ipadres array mee te versturen
void set_ipaddress(void) {
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	cf e0       	ldi	r28, 0x0F	; 15
     15e:	d0 e0       	ldi	r29, 0x00	; 0
    for(int i = 0; i < (sizeof(ip_addr) / sizeof(ip_addr[0])); ++i) {
        spi_transmit(SIPR + i, ip_addr[i]);
     160:	f8 01       	movw	r30, r16
     162:	61 91       	ld	r22, Z+
     164:	8f 01       	movw	r16, r30
     166:	ce 01       	movw	r24, r28
     168:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
     16c:	21 96       	adiw	r28, 0x01	; 1
    }
}

// Methode om de bytes uit het ipadres array mee te versturen
void set_ipaddress(void) {
    for(int i = 0; i < (sizeof(ip_addr) / sizeof(ip_addr[0])); ++i) {
     16e:	c3 31       	cpi	r28, 0x13	; 19
     170:	d1 05       	cpc	r29, r1
     172:	b1 f7       	brne	.-20     	; 0x160 <set_ipaddress+0x10>
        spi_transmit(SIPR + i, ip_addr[i]);
    }
}
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	08 95       	ret

0000017e <print_status>:

// Methode om de instellingen mee te printen
void print_status(void) {
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
           spi_receive(GAR + 2),spi_receive(GAR + 3));
     188:	84 e0       	ldi	r24, 0x04	; 4
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     190:	18 2f       	mov	r17, r24
     192:	83 e0       	ldi	r24, 0x03	; 3
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     19a:	d8 2f       	mov	r29, r24
    }
}

// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     1a4:	c8 2f       	mov	r28, r24
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     1ae:	1f 92       	push	r1
     1b0:	1f 93       	push	r17
     1b2:	1f 92       	push	r1
     1b4:	df 93       	push	r29
     1b6:	1f 92       	push	r1
     1b8:	cf 93       	push	r28
     1ba:	1f 92       	push	r1
     1bc:	8f 93       	push	r24
     1be:	8b e3       	ldi	r24, 0x3B	; 59
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	9f 93       	push	r25
     1c4:	8f 93       	push	r24
     1c6:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <printf>
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
     1ca:	8e e0       	ldi	r24, 0x0E	; 14
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     1d2:	f8 2e       	mov	r15, r24
     1d4:	8d e0       	ldi	r24, 0x0D	; 13
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     1dc:	08 2f       	mov	r16, r24
     1de:	8c e0       	ldi	r24, 0x0C	; 12
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     1e6:	18 2f       	mov	r17, r24
     1e8:	8b e0       	ldi	r24, 0x0B	; 11
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     1f0:	d8 2f       	mov	r29, r24
// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
     1f2:	8a e0       	ldi	r24, 0x0A	; 10
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     1fa:	c8 2f       	mov	r28, r24
     1fc:	89 e0       	ldi	r24, 0x09	; 9
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     204:	1f 92       	push	r1
     206:	ff 92       	push	r15
     208:	1f 92       	push	r1
     20a:	0f 93       	push	r16
     20c:	1f 92       	push	r1
     20e:	1f 93       	push	r17
     210:	1f 92       	push	r1
     212:	df 93       	push	r29
     214:	1f 92       	push	r1
     216:	cf 93       	push	r28
     218:	1f 92       	push	r1
     21a:	8f 93       	push	r24
     21c:	88 e5       	ldi	r24, 0x58	; 88
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <printf>
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
     228:	88 e0       	ldi	r24, 0x08	; 8
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     230:	18 2f       	mov	r17, r24
     232:	87 e0       	ldi	r24, 0x07	; 7
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     23a:	d8 2f       	mov	r29, r24
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
     23c:	86 e0       	ldi	r24, 0x06	; 6
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     244:	c8 2f       	mov	r28, r24
     246:	85 e0       	ldi	r24, 0x05	; 5
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     24e:	1f 92       	push	r1
     250:	1f 93       	push	r17
     252:	1f 92       	push	r1
     254:	df 93       	push	r29
     256:	1f 92       	push	r1
     258:	cf 93       	push	r28
     25a:	1f 92       	push	r1
     25c:	8f 93       	push	r24
     25e:	8f e8       	ldi	r24, 0x8F	; 143
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	9f 93       	push	r25
     264:	8f 93       	push	r24
     266:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <printf>
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
    
    printf("Ip-adres: %d.%d.%d.%d\n\n",spi_receive(SIPR + 0),spi_receive(SIPR + 1),\
           spi_receive(SIPR + 2),spi_receive(SIPR + 3));
     26a:	8d b7       	in	r24, 0x3d	; 61
     26c:	9e b7       	in	r25, 0x3e	; 62
     26e:	82 96       	adiw	r24, 0x22	; 34
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	9e bf       	out	0x3e, r25	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	8d bf       	out	0x3d, r24	; 61
     27a:	82 e1       	ldi	r24, 0x12	; 18
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     282:	18 2f       	mov	r17, r24
     284:	81 e1       	ldi	r24, 0x11	; 17
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     28c:	d8 2f       	mov	r29, r24
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
    
    printf("Ip-adres: %d.%d.%d.%d\n\n",spi_receive(SIPR + 0),spi_receive(SIPR + 1),\
     28e:	80 e1       	ldi	r24, 0x10	; 16
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     296:	c8 2f       	mov	r28, r24
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     2a0:	1f 92       	push	r1
     2a2:	1f 93       	push	r17
     2a4:	1f 92       	push	r1
     2a6:	df 93       	push	r29
     2a8:	1f 92       	push	r1
     2aa:	cf 93       	push	r28
     2ac:	1f 92       	push	r1
     2ae:	8f 93       	push	r24
     2b0:	8a ea       	ldi	r24, 0xAA	; 170
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	9f 93       	push	r25
     2b6:	8f 93       	push	r24
     2b8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <printf>
     2bc:	8d b7       	in	r24, 0x3d	; 61
     2be:	9e b7       	in	r25, 0x3e	; 62
     2c0:	0a 96       	adiw	r24, 0x0a	; 10
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	9e bf       	out	0x3e, r25	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	8d bf       	out	0x3d, r24	; 61
           spi_receive(SIPR + 2),spi_receive(SIPR + 3));
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	08 95       	ret

000002d8 <main>:

// Geeft aan met nul en 1 of de node gearmed is
uint8_t armed = 1;

// De main methode voor het uitvoeren van de acties
int main(void) {
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	c2 50       	subi	r28, 0x02	; 2
     2e2:	d2 40       	sbci	r29, 0x02	; 2
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
    // Geen interrupts voor het instellen van de node
    cli();
     2ee:	f8 94       	cli

    // Zet USART op
    usart_init(9600);
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	95 e2       	ldi	r25, 0x25	; 37
     2f4:	0e 94 aa 04 	call	0x954	; 0x954 <usart_init>
    
     // Stdin/stdout lezen en schrijven via uart
    stdout = stdin = &uart;
     2f8:	85 e2       	ldi	r24, 0x25	; 37
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 2a 03 	sts	0x032A, r25
     300:	80 93 29 03 	sts	0x0329, r24
     304:	90 93 2c 03 	sts	0x032C, r25
     308:	80 93 2b 03 	sts	0x032B, r24
	
    // Kalibreer de tiltsensor
    tilt_start();
     30c:	0e 94 6f 04 	call	0x8de	; 0x8de <tilt_start>
    
    // Zet SPI op
    spi_init();
     310:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_init>
    
    // Zet en configureer het lcd display
    // lcd_init();
    
     // Configureert de wiznet
    initWiznet();
     314:	0e 94 53 00 	call	0xa6	; 0xa6 <initWiznet>
    
    // Configureert de netwerk instellingen
    set_gateway();
     318:	0e 94 63 00 	call	0xc6	; 0xc6 <set_gateway>
    set_submask();
     31c:	0e 94 7a 00 	call	0xf4	; 0xf4 <set_submask>
    set_macaddress();
     320:	0e 94 91 00 	call	0x122	; 0x122 <set_macaddress>
    set_ipaddress();
     324:	0e 94 a8 00 	call	0x150	; 0x150 <set_ipaddress>
	
    // Print de instellingen
    print_status();
     328:	0e 94 bf 00 	call	0x17e	; 0x17e <print_status>

    // Buffer voor het ontvangen en versturen van data
    uint8_t receiveddata[512];
    
    // Zend een register bij startup
    udp_broadcast(reg, 8);
     32c:	68 e0       	ldi	r22, 0x08	; 8
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	0e 94 03 05 	call	0xa06	; 0xa06 <udp_broadcast>
    
    // Led poort op output
    DDRB |= (1 << LED);
     336:	21 9a       	sbi	0x04, 1	; 4
    
    // Buzzer poort op output
    DDRB |= (1 << BUZZER);
     338:	20 9a       	sbi	0x04, 0	; 4
    
    // Schakel timer overflow interrupts in
    TIMSK1 |= (1 << TOIE1);
     33a:	ef e6       	ldi	r30, 0x6F	; 111
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	80 81       	ld	r24, Z
     340:	81 60       	ori	r24, 0x01	; 1
     342:	80 83       	st	Z, r24
    
    // Stel de timer in met prescaler 1024
    TCCR1B |= ((1 << CS12) | (1 << CS10));
     344:	e1 e8       	ldi	r30, 0x81	; 129
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	85 60       	ori	r24, 0x05	; 5
     34c:	80 83       	st	Z, r24
    
    // Zet interrupts aan voor het alarm
    sei();
     34e:	78 94       	sei
                printf("TCP verbinding opgezet\n");
#endif
                // Checkt op binenkomende data
                if(spi_receive(S1RXRSRH) || spi_receive(S1RXRSRL)) {
                    // Schrijft de binnenkomende data weg in de meegegeven buffer
                    tcp_from_monitor(receiveddata);
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	cf 5f       	subi	r28, 0xFF	; 255
     356:	dd 4f       	sbci	r29, 0xFD	; 253
     358:	99 83       	std	Y+1, r25	; 0x01
     35a:	88 83       	st	Y, r24
     35c:	c1 50       	subi	r28, 0x01	; 1
     35e:	d2 40       	sbci	r29, 0x02	; 2
                    
#if DEBUG           // Print de data in de buffer
                    printf("\nTCP data ontvangen: %s\n", receiveddata);
     360:	0f 2e       	mov	r0, r31
     362:	fb e3       	ldi	r31, 0x3B	; 59
     364:	ef 2e       	mov	r14, r31
     366:	f2 e0       	ldi	r31, 0x02	; 2
     368:	ff 2e       	mov	r15, r31
     36a:	f0 2d       	mov	r31, r0
                                PORTB &= ~(1 << BUZZER);
                            }
                            break;
                        case lamp:
                            if(authorised) {
                                printf("Lamp");
     36c:	0f 2e       	mov	r0, r31
     36e:	fc e7       	ldi	r31, 0x7C	; 124
     370:	8f 2e       	mov	r8, r31
     372:	f2 e0       	ldi	r31, 0x02	; 2
     374:	9f 2e       	mov	r9, r31
     376:	f0 2d       	mov	r31, r0
                                }
                            }
                            break;
                        case reset:
                            if(authorised) {
                                printf("Reset");
     378:	0f 2e       	mov	r0, r31
     37a:	f0 e9       	ldi	r31, 0x90	; 144
     37c:	af 2e       	mov	r10, r31
     37e:	f2 e0       	ldi	r31, 0x02	; 2
     380:	bf 2e       	mov	r11, r31
     382:	f0 2d       	mov	r31, r0
                                
                                // Unregister de node
                                udp_broadcast(unr, 10);
                                
                                // Reset de node, instellingen worden hersteld
                                WDTCSR |= (1 << WDE);
     384:	0f 2e       	mov	r0, r31
     386:	f0 e6       	ldi	r31, 0x60	; 96
     388:	6f 2e       	mov	r6, r31
     38a:	71 2c       	mov	r7, r1
     38c:	f0 2d       	mov	r31, r0
                                if (on) {
                                    printf("Armed");
                                    // Armed de node en schakelt het alarm in
                                    armed = 1;
                                } else {
                                    printf("Disarmed");
     38e:	0f 2e       	mov	r0, r31
     390:	f7 e8       	ldi	r31, 0x87	; 135
     392:	4f 2e       	mov	r4, r31
     394:	f2 e0       	ldi	r31, 0x02	; 2
     396:	5f 2e       	mov	r5, r31
     398:	f0 2d       	mov	r31, r0
                            if(authorised) {
                                uint8_t on = receiveddata[3];
                                if (on) {
                                    printf("Armed");
                                    // Armed de node en schakelt het alarm in
                                    armed = 1;
     39a:	33 24       	eor	r3, r3
     39c:	33 94       	inc	r3
                                
                                // Zet de buzzer aan
                                PORTB |= (1 << BUZZER);
                                
                                // Voert een delay uit met de timer waarde
                                for (uint32_t i = 0; i < time; ++i) {
     39e:	21 2c       	mov	r2, r1
    // Zet interrupts aan voor het alarm
    sei();
    
    while(1) {
        // Lees de status van zowel de udp als tcp socket
        uint8_t udpstatus = spi_receive(S0SR);
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	94 e0       	ldi	r25, 0x04	; 4
     3a4:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     3a8:	08 2f       	mov	r16, r24
        uint8_t tcpstatus = spi_receive(S1SR);
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	95 e0       	ldi	r25, 0x05	; 5
     3ae:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     3b2:	18 2f       	mov	r17, r24
        
        switch (udpstatus) {
     3b4:	00 23       	and	r16, r16
     3b6:	19 f0       	breq	.+6      	; 0x3be <main+0xe6>
     3b8:	02 32       	cpi	r16, 0x22	; 34
     3ba:	41 f0       	breq	.+16     	; 0x3cc <main+0xf4>
     3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <main+0xfc>
            // Gesloten socket
            case SOCK_CLOSED:
#if DEBUG
                printf("UDP socket gesloten\n");
     3be:	82 ec       	ldi	r24, 0xC2	; 194
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
#endif
                // Maak een udp socket aan
                udp_create_socket();
     3c6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <udp_create_socket>
                break;
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <main+0xfc>
            
            // Werkende UDP socket
            case SOCK_UDP:
#if DEBUG
                printf("UDP socket geopend\n");
     3cc:	86 ed       	ldi	r24, 0xD6	; 214
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
                */
                 
                break;
        }
        
        switch (tcpstatus) {
     3d4:	14 31       	cpi	r17, 0x14	; 20
     3d6:	d1 f0       	breq	.+52     	; 0x40c <main+0x134>
     3d8:	28 f4       	brcc	.+10     	; 0x3e4 <main+0x10c>
     3da:	11 23       	and	r17, r17
     3dc:	49 f0       	breq	.+18     	; 0x3f0 <main+0x118>
     3de:	13 31       	cpi	r17, 0x13	; 19
     3e0:	71 f0       	breq	.+28     	; 0x3fe <main+0x126>
     3e2:	43 c1       	rjmp	.+646    	; 0x66a <main+0x392>
     3e4:	17 31       	cpi	r17, 0x17	; 23
     3e6:	b9 f0       	breq	.+46     	; 0x416 <main+0x13e>
     3e8:	1c 31       	cpi	r17, 0x1C	; 28
     3ea:	09 f4       	brne	.+2      	; 0x3ee <main+0x116>
     3ec:	36 c1       	rjmp	.+620    	; 0x65a <main+0x382>
     3ee:	3d c1       	rjmp	.+634    	; 0x66a <main+0x392>
            // Gesloten socket
            case SOCK_CLOSED:
#if DEBUG
                printf("TCP socket gesloten\n");
     3f0:	89 ee       	ldi	r24, 0xE9	; 233
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
#endif
                // Maak een tcp socket aan
                tcp_create_socket();
     3f8:	0e 94 ac 03 	call	0x758	; 0x758 <tcp_create_socket>
                
                break;
     3fc:	36 c1       	rjmp	.+620    	; 0x66a <main+0x392>
       
            // TCP socket geinitialiseerd
            case SOCK_INIT:
#if DEBUG
                printf("TCP socket geopend\n");
     3fe:	8d ef       	ldi	r24, 0xFD	; 253
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
#endif
                // Luister naar binnenkomende request
                tcp_listen();
     406:	0e 94 ce 03 	call	0x79c	; 0x79c <tcp_listen>
                
                break;
     40a:	2f c1       	rjmp	.+606    	; 0x66a <main+0x392>
            
            // TCP serversocket listen
            case SOCK_LISTEN:
#if DEBUG
                printf("TCPServer luisteren\n");
     40c:	80 e1       	ldi	r24, 0x10	; 16
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
#endif
                break;
     414:	2a c1       	rjmp	.+596    	; 0x66a <main+0x392>
            
            // TCP verbinding opgezet
            case SOCK_ESTABLISHED:
#if DEBUG
                printf("TCP verbinding opgezet\n");
     416:	84 e2       	ldi	r24, 0x24	; 36
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
#endif
                // Checkt op binenkomende data
                if(spi_receive(S1RXRSRH) || spi_receive(S1RXRSRL)) {
     41e:	86 e2       	ldi	r24, 0x26	; 38
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     426:	81 11       	cpse	r24, r1
     428:	07 c0       	rjmp	.+14     	; 0x438 <main+0x160>
     42a:	87 e2       	ldi	r24, 0x27	; 39
     42c:	95 e0       	ldi	r25, 0x05	; 5
     42e:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     432:	88 23       	and	r24, r24
     434:	09 f4       	brne	.+2      	; 0x438 <main+0x160>
     436:	19 c1       	rjmp	.+562    	; 0x66a <main+0x392>
                    // Schrijft de binnenkomende data weg in de meegegeven buffer
                    tcp_from_monitor(receiveddata);
     438:	ce 01       	movw	r24, r28
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <tcp_from_monitor>
                    
#if DEBUG           // Print de data in de buffer
                    printf("\nTCP data ontvangen: %s\n", receiveddata);
     440:	ce 5f       	subi	r28, 0xFE	; 254
     442:	dd 4f       	sbci	r29, 0xFD	; 253
     444:	98 81       	ld	r25, Y
     446:	c2 50       	subi	r28, 0x02	; 2
     448:	d2 40       	sbci	r29, 0x02	; 2
     44a:	9f 93       	push	r25
     44c:	cf 5f       	subi	r28, 0xFF	; 255
     44e:	dd 4f       	sbci	r29, 0xFD	; 253
     450:	a8 81       	ld	r26, Y
     452:	c1 50       	subi	r28, 0x01	; 1
     454:	d2 40       	sbci	r29, 0x02	; 2
     456:	af 93       	push	r26
     458:	ff 92       	push	r15
     45a:	ef 92       	push	r14
     45c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <printf>
#endif
                    // Stuur een acknowledge
                    uint8_t flag = receiveddata[0];
                    uint16_t messagenumber = (receiveddata[1] << 8) | receiveddata[2];
                    
                    switch (flag) {
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	09 f4       	brne	.+2      	; 0x470 <main+0x198>
     46e:	aa c0       	rjmp	.+340    	; 0x5c4 <main+0x2ec>
     470:	30 f4       	brcc	.+12     	; 0x47e <main+0x1a6>
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	69 f0       	breq	.+26     	; 0x490 <main+0x1b8>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	09 f4       	brne	.+2      	; 0x47c <main+0x1a4>
     47a:	6e c0       	rjmp	.+220    	; 0x558 <main+0x280>
     47c:	f6 c0       	rjmp	.+492    	; 0x66a <main+0x392>
     47e:	85 30       	cpi	r24, 0x05	; 5
     480:	09 f4       	brne	.+2      	; 0x484 <main+0x1ac>
     482:	cd c0       	rjmp	.+410    	; 0x61e <main+0x346>
     484:	08 f4       	brcc	.+2      	; 0x488 <main+0x1b0>
     486:	b0 c0       	rjmp	.+352    	; 0x5e8 <main+0x310>
     488:	86 30       	cpi	r24, 0x06	; 6
     48a:	09 f4       	brne	.+2      	; 0x48e <main+0x1b6>
     48c:	dc c0       	rjmp	.+440    	; 0x646 <main+0x36e>
     48e:	ed c0       	rjmp	.+474    	; 0x66a <main+0x392>
                                
                            }
                            break;
                        case login:
                            // Telt het aantal matchende characters
                            while (password[password_index % 10][counter] == receiveddata[counter + 3]) {
     490:	80 91 1f 03 	lds	r24, 0x031F
     494:	90 91 20 03 	lds	r25, 0x0320
     498:	6a e0       	ldi	r22, 0x0A	; 10
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	0e 94 aa 05 	call	0xb54	; 0xb54 <__divmodhi4>
     4a0:	fc 01       	movw	r30, r24
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	ed 5e       	subi	r30, 0xED	; 237
     4a8:	fe 4f       	sbci	r31, 0xFE	; 254
     4aa:	20 81       	ld	r18, Z
     4ac:	31 81       	ldd	r19, Z+1	; 0x01
     4ae:	80 91 1d 03 	lds	r24, 0x031D
     4b2:	90 91 1e 03 	lds	r25, 0x031E
     4b6:	d9 01       	movw	r26, r18
     4b8:	a8 0f       	add	r26, r24
     4ba:	b9 1f       	adc	r27, r25
     4bc:	e4 e0       	ldi	r30, 0x04	; 4
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	ec 0f       	add	r30, r28
     4c2:	fd 1f       	adc	r31, r29
     4c4:	e8 0f       	add	r30, r24
     4c6:	f9 1f       	adc	r31, r25
     4c8:	5c 91       	ld	r21, X
     4ca:	40 81       	ld	r20, Z
     4cc:	54 13       	cpse	r21, r20
     4ce:	16 c0       	rjmp	.+44     	; 0x4fc <main+0x224>
     4d0:	fc 01       	movw	r30, r24
     4d2:	31 96       	adiw	r30, 0x01	; 1
     4d4:	e2 0f       	add	r30, r18
     4d6:	f3 1f       	adc	r31, r19
     4d8:	04 96       	adiw	r24, 0x04	; 4
     4da:	a1 e0       	ldi	r26, 0x01	; 1
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	ac 0f       	add	r26, r28
     4e0:	bd 1f       	adc	r27, r29
     4e2:	a8 0f       	add	r26, r24
     4e4:	b9 1f       	adc	r27, r25
     4e6:	cf 01       	movw	r24, r30
     4e8:	82 1b       	sub	r24, r18
     4ea:	93 0b       	sbc	r25, r19
                                ++counter;
     4ec:	90 93 1e 03 	sts	0x031E, r25
     4f0:	80 93 1d 03 	sts	0x031D, r24
                                
                            }
                            break;
                        case login:
                            // Telt het aantal matchende characters
                            while (password[password_index % 10][counter] == receiveddata[counter + 3]) {
     4f4:	51 91       	ld	r21, Z+
     4f6:	4d 91       	ld	r20, X+
     4f8:	54 17       	cp	r21, r20
     4fa:	a9 f3       	breq	.-22     	; 0x4e6 <main+0x20e>
                                ++counter;
                            }
                            
                            // Checkt of er 9 characters zijn geteld
                            // 8 van het wachtwoord + 1 niet matchend character
                            if (counter == 9) {
     4fc:	09 97       	sbiw	r24, 0x09	; 9
     4fe:	81 f4       	brne	.+32     	; 0x520 <main+0x248>
                                authorised = 1;
     500:	30 92 1c 03 	sts	0x031C, r3
#if DEBUG
                                printf("Gebruiker ingelogd\n");
     504:	84 e5       	ldi	r24, 0x54	; 84
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
#endif
                                // Verhoogt de index voor een volgende wachtwoord
                                ++password_index;
     50c:	80 91 1f 03 	lds	r24, 0x031F
     510:	90 91 20 03 	lds	r25, 0x0320
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	90 93 20 03 	sts	0x0320, r25
     51a:	80 93 1f 03 	sts	0x031F, r24
     51e:	a5 c0       	rjmp	.+330    	; 0x66a <main+0x392>
                                ++counter;
                            }
                            
                            // Checkt of er 9 characters zijn geteld
                            // 8 van het wachtwoord + 1 niet matchend character
                            if (counter == 9) {
     520:	0f 2e       	mov	r0, r31
     522:	f3 e0       	ldi	r31, 0x03	; 3
     524:	cf 2e       	mov	r12, r31
     526:	d1 2c       	mov	r13, r1
     528:	f0 2d       	mov	r31, r0
                                // Verhoogt de index voor een volgende wachtwoord
                                ++password_index;
                            } else {
                                // Laat de buzzer afgaan met 3 korte beeps
                                for (int i = 0; i < 3; ++i) {
                                    printf("Incorrect wachtwoord\n");
     52a:	87 e6       	ldi	r24, 0x67	; 103
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
                                    PORTB ^= (1 << BUZZER);
     532:	85 b1       	in	r24, 0x05	; 5
     534:	83 25       	eor	r24, r3
     536:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     538:	bf e9       	ldi	r27, 0x9F	; 159
     53a:	e6 e8       	ldi	r30, 0x86	; 134
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	b1 50       	subi	r27, 0x01	; 1
     540:	e0 40       	sbci	r30, 0x00	; 0
     542:	f0 40       	sbci	r31, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <main+0x266>
     546:	00 c0       	rjmp	.+0      	; 0x548 <main+0x270>
     548:	00 00       	nop
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	c2 1a       	sub	r12, r18
     54e:	d1 08       	sbc	r13, r1
#endif
                                // Verhoogt de index voor een volgende wachtwoord
                                ++password_index;
                            } else {
                                // Laat de buzzer afgaan met 3 korte beeps
                                for (int i = 0; i < 3; ++i) {
     550:	c1 14       	cp	r12, r1
     552:	d1 04       	cpc	r13, r1
     554:	51 f7       	brne	.-44     	; 0x52a <main+0x252>
     556:	89 c0       	rjmp	.+274    	; 0x66a <main+0x392>
                                }
                            }
                            
                            break;
                        case buzz:
                            if(authorised) {
     558:	80 91 1c 03 	lds	r24, 0x031C
     55c:	88 23       	and	r24, r24
     55e:	09 f4       	brne	.+2      	; 0x562 <main+0x28a>
     560:	84 c0       	rjmp	.+264    	; 0x66a <main+0x392>
                                // Lees de timer waarde uit
                                uint32_t time = ((uint32_t) receiveddata[3]) << 24;
     562:	8c 81       	ldd	r24, Y+4	; 0x04
                                time |= ((uint32_t) receiveddata[4]) << 16;
     564:	4d 81       	ldd	r20, Y+5	; 0x05
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	ba 01       	movw	r22, r20
     56e:	55 27       	eor	r21, r21
     570:	44 27       	eor	r20, r20
     572:	78 2b       	or	r23, r24
                                time |= receiveddata[5] << 8;
                                time |= receiveddata[6];
     574:	8f 81       	ldd	r24, Y+7	; 0x07
                        case buzz:
                            if(authorised) {
                                // Lees de timer waarde uit
                                uint32_t time = ((uint32_t) receiveddata[3]) << 24;
                                time |= ((uint32_t) receiveddata[4]) << 16;
                                time |= receiveddata[5] << 8;
     576:	48 2b       	or	r20, r24
     578:	8e 81       	ldd	r24, Y+6	; 0x06
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	98 2f       	mov	r25, r24
     57e:	88 27       	eor	r24, r24
     580:	aa 27       	eor	r26, r26
     582:	97 fd       	sbrc	r25, 7
     584:	a0 95       	com	r26
     586:	ba 2f       	mov	r27, r26
                                time |= receiveddata[6];
     588:	48 2b       	or	r20, r24
     58a:	59 2b       	or	r21, r25
     58c:	6a 2b       	or	r22, r26
     58e:	7b 2b       	or	r23, r27
                                
                                // Zet de buzzer aan
                                PORTB |= (1 << BUZZER);
     590:	28 9a       	sbi	0x05, 0	; 5
                                
                                // Voert een delay uit met de timer waarde
                                for (uint32_t i = 0; i < time; ++i) {
     592:	41 15       	cp	r20, r1
     594:	51 05       	cpc	r21, r1
     596:	61 05       	cpc	r22, r1
     598:	71 05       	cpc	r23, r1
     59a:	91 f0       	breq	.+36     	; 0x5c0 <main+0x2e8>
     59c:	82 2d       	mov	r24, r2
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	e9 ef       	ldi	r30, 0xF9	; 249
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <main+0x2d0>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x2d6>
     5ae:	00 00       	nop
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	a1 1d       	adc	r26, r1
     5b4:	b1 1d       	adc	r27, r1
     5b6:	84 17       	cp	r24, r20
     5b8:	95 07       	cpc	r25, r21
     5ba:	a6 07       	cpc	r26, r22
     5bc:	b7 07       	cpc	r27, r23
     5be:	91 f7       	brne	.-28     	; 0x5a4 <main+0x2cc>
                                    _delay_ms(1);
                                }
                                
                                // Zet de buzzer uit
                                PORTB &= ~(1 << BUZZER);
     5c0:	28 98       	cbi	0x05, 0	; 5
     5c2:	53 c0       	rjmp	.+166    	; 0x66a <main+0x392>
                            }
                            break;
                        case lamp:
                            if(authorised) {
     5c4:	80 91 1c 03 	lds	r24, 0x031C
     5c8:	88 23       	and	r24, r24
     5ca:	09 f4       	brne	.+2      	; 0x5ce <main+0x2f6>
     5cc:	4e c0       	rjmp	.+156    	; 0x66a <main+0x392>
                                printf("Lamp");
     5ce:	9f 92       	push	r9
     5d0:	8f 92       	push	r8
     5d2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <printf>
                                uint8_t on = receiveddata[3];
                                if (on) {
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	8c 81       	ldd	r24, Y+4	; 0x04
     5dc:	88 23       	and	r24, r24
     5de:	11 f0       	breq	.+4      	; 0x5e4 <main+0x30c>
                                    // Zet de led aan
                                    PORTB |= (1 << LED);
     5e0:	29 9a       	sbi	0x05, 1	; 5
     5e2:	43 c0       	rjmp	.+134    	; 0x66a <main+0x392>
                                } else {
                                    // Zet de led uit
                                    PORTB &= ~(1 << LED);
     5e4:	29 98       	cbi	0x05, 1	; 5
     5e6:	41 c0       	rjmp	.+130    	; 0x66a <main+0x392>
                                }
                            }
                            break;
                        case arm:
                            if(authorised) {
     5e8:	80 91 1c 03 	lds	r24, 0x031C
     5ec:	88 23       	and	r24, r24
     5ee:	e9 f1       	breq	.+122    	; 0x66a <main+0x392>
                                uint8_t on = receiveddata[3];
                                if (on) {
     5f0:	8c 81       	ldd	r24, Y+4	; 0x04
     5f2:	88 23       	and	r24, r24
     5f4:	59 f0       	breq	.+22     	; 0x60c <main+0x334>
                                    printf("Armed");
     5f6:	a1 e8       	ldi	r26, 0x81	; 129
     5f8:	b2 e0       	ldi	r27, 0x02	; 2
     5fa:	bf 93       	push	r27
     5fc:	af 93       	push	r26
     5fe:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <printf>
                                    // Armed de node en schakelt het alarm in
                                    armed = 1;
     602:	30 92 12 01 	sts	0x0112, r3
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	2f c0       	rjmp	.+94     	; 0x66a <main+0x392>
                                } else {
                                    printf("Disarmed");
     60c:	5f 92       	push	r5
     60e:	4f 92       	push	r4
     610:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <printf>
                                    // Disarmed de node en schakelt het alarm uit
                                    armed = 0;
     614:	10 92 12 01 	sts	0x0112, r1
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	26 c0       	rjmp	.+76     	; 0x66a <main+0x392>
                                }
                            }
                            break;
                        case reset:
                            if(authorised) {
     61e:	80 91 1c 03 	lds	r24, 0x031C
     622:	88 23       	and	r24, r24
     624:	11 f1       	breq	.+68     	; 0x66a <main+0x392>
                                printf("Reset");
     626:	bf 92       	push	r11
     628:	af 92       	push	r10
     62a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <printf>
                                
                                // Unregister de node
                                udp_broadcast(unr, 10);
     62e:	6a e0       	ldi	r22, 0x0A	; 10
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	0e 94 03 05 	call	0xa06	; 0xa06 <udp_broadcast>
                                
                                // Reset de node, instellingen worden hersteld
                                WDTCSR |= (1 << WDE);
     638:	d3 01       	movw	r26, r6
     63a:	8c 91       	ld	r24, X
     63c:	88 60       	ori	r24, 0x08	; 8
     63e:	8c 93       	st	X, r24
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	12 c0       	rjmp	.+36     	; 0x66a <main+0x392>
                            }
                            break;
                        case ping:
                            if(authorised) {
     646:	80 91 1c 03 	lds	r24, 0x031C
     64a:	88 23       	and	r24, r24
     64c:	71 f0       	breq	.+28     	; 0x66a <main+0x392>
                                // Broadcast een acknowledge
                                udp_broadcast(udpack, 3);
     64e:	63 e0       	ldi	r22, 0x03	; 3
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	83 2d       	mov	r24, r3
     654:	0e 94 03 05 	call	0xa06	; 0xa06 <udp_broadcast>
     658:	08 c0       	rjmp	.+16     	; 0x66a <main+0x392>
                break;
            
            // TCP sluit request
            case SOCK_CLOSE_WAIT:
#if DEBUG
                printf("TCP close request ontvangen\n");
     65a:	86 e9       	ldi	r24, 0x96	; 150
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
#endif
                // Monitor wordt uitgelogd
                authorised = 0;
     662:	10 92 1c 03 	sts	0x031C, r1
                
                // Socket luistert naar nieuwe requests
                tcp_listen();
     666:	0e 94 ce 03 	call	0x79c	; 0x79c <tcp_listen>
     66a:	bf e3       	ldi	r27, 0x3F	; 63
     66c:	ed e0       	ldi	r30, 0x0D	; 13
     66e:	f3 e0       	ldi	r31, 0x03	; 3
     670:	b1 50       	subi	r27, 0x01	; 1
     672:	e0 40       	sbci	r30, 0x00	; 0
     674:	f0 40       	sbci	r31, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <main+0x398>
     678:	00 c0       	rjmp	.+0      	; 0x67a <main+0x3a2>
     67a:	00 00       	nop
     67c:	91 ce       	rjmp	.-734    	; 0x3a0 <main+0xc8>

0000067e <__vector_13>:
    
	return 0;
}

// Timer interrupt, checkt of er op basis van de tiltsensor een alarm moet worden gegenereerd
ISR(TIMER1_OVF_vect) {
     67e:	1f 92       	push	r1
     680:	0f 92       	push	r0
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	0f 92       	push	r0
     686:	11 24       	eor	r1, r1
     688:	2f 93       	push	r18
     68a:	3f 93       	push	r19
     68c:	4f 93       	push	r20
     68e:	5f 93       	push	r21
     690:	6f 93       	push	r22
     692:	7f 93       	push	r23
     694:	8f 93       	push	r24
     696:	9f 93       	push	r25
     698:	af 93       	push	r26
     69a:	bf 93       	push	r27
     69c:	ef 93       	push	r30
     69e:	ff 93       	push	r31
    // Leest de tiltsensor uit
    if(tilt_getAlarm() && armed) {
     6a0:	0e 94 96 04 	call	0x92c	; 0x92c <tilt_getAlarm>
     6a4:	89 2b       	or	r24, r25
     6a6:	81 f0       	breq	.+32     	; 0x6c8 <__vector_13+0x4a>
     6a8:	80 91 12 01 	lds	r24, 0x0112
     6ac:	88 23       	and	r24, r24
     6ae:	61 f0       	breq	.+24     	; 0x6c8 <__vector_13+0x4a>
#if DEBUG
        printf("ALARM\n");
     6b0:	82 eb       	ldi	r24, 0xB2	; 178
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
#endif
        // Broadcast een alarm
        udp_broadcast(alarm, 3);
     6b8:	63 e0       	ldi	r22, 0x03	; 3
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	86 e0       	ldi	r24, 0x06	; 6
     6be:	0e 94 03 05 	call	0xa06	; 0xa06 <udp_broadcast>
        
        // Zet de led aan
        PORTB |= (1 << LED);
     6c2:	29 9a       	sbi	0x05, 1	; 5
        
        // Zet de buzzer aan
        PORTB |= (1 << BUZZER);
     6c4:	28 9a       	sbi	0x05, 0	; 5
     6c6:	09 c0       	rjmp	.+18     	; 0x6da <__vector_13+0x5c>
    } else {
#if DEBUG
        printf("BROADCAST\n");
     6c8:	88 eb       	ldi	r24, 0xB8	; 184
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	0e 94 08 06 	call	0xc10	; 0xc10 <puts>
#endif
        // Broadcast een alive
        udp_broadcast(alive, 3);
     6d0:	63 e0       	ldi	r22, 0x03	; 3
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	85 e0       	ldi	r24, 0x05	; 5
     6d6:	0e 94 03 05 	call	0xa06	; 0xa06 <udp_broadcast>
    }
}
     6da:	ff 91       	pop	r31
     6dc:	ef 91       	pop	r30
     6de:	bf 91       	pop	r27
     6e0:	af 91       	pop	r26
     6e2:	9f 91       	pop	r25
     6e4:	8f 91       	pop	r24
     6e6:	7f 91       	pop	r23
     6e8:	6f 91       	pop	r22
     6ea:	5f 91       	pop	r21
     6ec:	4f 91       	pop	r20
     6ee:	3f 91       	pop	r19
     6f0:	2f 91       	pop	r18
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <spi_init>:
#include "spi.h"

// Methode voor het opzetten van de SPI verbinding
void spi_init(void) {
    // Zet de mosi, sck en ss lijnen op output voor het aansturen van de SPI verbinding
    DDR_SPI = ((1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_SS));
     6fc:	8c e2       	ldi	r24, 0x2C	; 44
     6fe:	84 b9       	out	0x04, r24	; 4
    
    // Schrijft naar SPI control register
    // SPE bit voor SPI enable
    // MSTR bit voor het setten als master
    SPCR = ((1 << SPE) | (1 << MSTR));
     700:	80 e5       	ldi	r24, 0x50	; 80
     702:	8c bd       	out	0x2c, r24	; 44
     704:	08 95       	ret

00000706 <spi_transmit>:
}

// Methode om met behulp van SPI naar het ethernet shield te transmitten
void spi_transmit(uint16_t address, uint8_t data) {
    SPI_PORT &= ~(1 << SPI_CS);         // Activeert de slave en synchroniseerd
     706:	2a 98       	cbi	0x05, 2	; 5
    SPDR = 0xF0;                        // Verstuurt write commando voor transmitten
     708:	20 ef       	ldi	r18, 0xF0	; 240
     70a:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     70c:	0d b4       	in	r0, 0x2d	; 45
     70e:	07 fe       	sbrs	r0, 7
     710:	fd cf       	rjmp	.-6      	; 0x70c <spi_transmit+0x6>
    SPDR = address >> 8;                // Neemt de hoogste byte van het adres en stuurt deze
     712:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     714:	0d b4       	in	r0, 0x2d	; 45
     716:	07 fe       	sbrs	r0, 7
     718:	fd cf       	rjmp	.-6      	; 0x714 <spi_transmit+0xe>
    SPDR = address;                     // Neemt de laagste byte van het adres en stuurt deze
     71a:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     71c:	0d b4       	in	r0, 0x2d	; 45
     71e:	07 fe       	sbrs	r0, 7
     720:	fd cf       	rjmp	.-6      	; 0x71c <spi_transmit+0x16>
    SPDR = data;                        // Verstuurt de data naar het adres
     722:	6e bd       	out	0x2e, r22	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     724:	0d b4       	in	r0, 0x2d	; 45
     726:	07 fe       	sbrs	r0, 7
     728:	fd cf       	rjmp	.-6      	; 0x724 <spi_transmit+0x1e>
    SPI_PORT |= (1<<SPI_CS);            // Deactiveerd de slave
     72a:	2a 9a       	sbi	0x05, 2	; 5
     72c:	08 95       	ret

0000072e <spi_receive>:
}

// Methode om met behulp van SPI data van het ethernet shield te ontvangen
unsigned char spi_receive(uint16_t address) {
    SPI_PORT &= ~(1<<SPI_CS);           // Activeert de slave en synchroniseerd
     72e:	2a 98       	cbi	0x05, 2	; 5
    SPDR = 0x0F;                        // Verstuurt read commando voor receiven
     730:	2f e0       	ldi	r18, 0x0F	; 15
     732:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <spi_receive+0x6>
    SPDR = address >> 8;                // Neemt de hoogste byte van het adres en stuurt deze
     73a:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     73c:	0d b4       	in	r0, 0x2d	; 45
     73e:	07 fe       	sbrs	r0, 7
     740:	fd cf       	rjmp	.-6      	; 0x73c <spi_receive+0xe>
    SPDR = address;                     // Neemt de laagste byte van het adres en stuurt deze
     742:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     744:	0d b4       	in	r0, 0x2d	; 45
     746:	07 fe       	sbrs	r0, 7
     748:	fd cf       	rjmp	.-6      	; 0x744 <spi_receive+0x16>
    SPDR = 0x00;                        // Dummy data
     74a:	1e bc       	out	0x2e, r1	; 46
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
     74c:	0d b4       	in	r0, 0x2d	; 45
     74e:	07 fe       	sbrs	r0, 7
     750:	fd cf       	rjmp	.-6      	; 0x74c <spi_receive+0x1e>
    SPI_PORT |= (1<<SPI_CS);            // Deactiveerd de slave
     752:	2a 9a       	sbi	0x05, 2	; 5
    
    return SPDR;                        // Returnt de verstuurde data uit het SPI data register
     754:	8e b5       	in	r24, 0x2e	; 46
}
     756:	08 95       	ret

00000758 <tcp_create_socket>:
// Counter voor het bijhouden van het messagenummer
static int message_number = 0;

// Methode om een TCP socket mee te creeren
void tcp_create_socket(void) {
    spi_transmit(S1MR, (1 << P0));              // Maakt van socket 1 een TCP socket
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	95 e0       	ldi	r25, 0x05	; 5
     75e:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    
    uint16_t port = 30000;                      // Luistert naar data op poort 3000
    spi_transmit(S1PORTH, port >> 8);           // Zet hoogste byte
     762:	65 e7       	ldi	r22, 0x75	; 117
     764:	84 e0       	ldi	r24, 0x04	; 4
     766:	95 e0       	ldi	r25, 0x05	; 5
     768:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(S1PORTL, port);                // Zet laagste byte
     76c:	60 e3       	ldi	r22, 0x30	; 48
     76e:	85 e0       	ldi	r24, 0x05	; 5
     770:	95 e0       	ldi	r25, 0x05	; 5
     772:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    
    spi_transmit(S1CR, OPEN);                   // Initialiseert de socket met de instellingen
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	95 e0       	ldi	r25, 0x05	; 5
     77c:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    uint8_t status = spi_receive(S1SR);         // Haalt de status op
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	95 e0       	ldi	r25, 0x05	; 5
     784:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
    
    if(status != SOCK_INIT) {                   // Check of de status (SOCK_INIT) klopt met de instellingen
     788:	83 31       	cpi	r24, 0x13	; 19
     78a:	39 f0       	breq	.+14     	; 0x79a <tcp_create_socket+0x42>
        spi_transmit(S1CR, CLOSE);              // Anders sluit de verbinding
     78c:	60 e1       	ldi	r22, 0x10	; 16
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	95 e0       	ldi	r25, 0x05	; 5
     792:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
        tcp_create_socket();                    // Probeer opnieuw
     796:	0e 94 ac 03 	call	0x758	; 0x758 <tcp_create_socket>
     79a:	08 95       	ret

0000079c <tcp_listen>:
}

// Methode naar een TCP request te luisteren
void tcp_listen(void) {
    // Reset het message nummer voor een volgende verbinding
    message_number = 0;
     79c:	10 92 22 03 	sts	0x0322, r1
     7a0:	10 92 21 03 	sts	0x0321, r1
    
    // Laat de socket naar luister naar requests
    spi_transmit(S1CR, LISTEN);
     7a4:	62 e0       	ldi	r22, 0x02	; 2
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	95 e0       	ldi	r25, 0x05	; 5
     7aa:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
        
    // Haal de status op
    uint8_t status = spi_receive(S1SR);
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	95 e0       	ldi	r25, 0x05	; 5
     7b2:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
        
    // Check of de socket goed is ingesteld, verbind anders opnieuw
    if (status != SOCK_LISTEN) {
     7b6:	84 31       	cpi	r24, 0x14	; 20
     7b8:	39 f0       	breq	.+14     	; 0x7c8 <tcp_listen+0x2c>
        spi_transmit(S1CR, CLOSE);
     7ba:	60 e1       	ldi	r22, 0x10	; 16
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	95 e0       	ldi	r25, 0x05	; 5
     7c0:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
        tcp_listen();
     7c4:	0e 94 ce 03 	call	0x79c	; 0x79c <tcp_listen>
     7c8:	08 95       	ret

000007ca <tcp_from_monitor>:
    // Wacht op het versturen (0x00 = verstuurd)
    while(spi_receive(S1CR));
}

// Methode om data mee te ontvangen
void tcp_from_monitor(uint8_t buffer[]) {
     7ca:	8f 92       	push	r8
     7cc:	9f 92       	push	r9
     7ce:	af 92       	push	r10
     7d0:	bf 92       	push	r11
     7d2:	cf 92       	push	r12
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	7c 01       	movw	r14, r24
    // Vraag de grootte van de binnenkomende data op
    uint16_t size = spi_receive(S1RXRSRH) << 8;
     7e4:	86 e2       	ldi	r24, 0x26	; 38
     7e6:	95 e0       	ldi	r25, 0x05	; 5
     7e8:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     7ec:	a8 2e       	mov	r10, r24
     7ee:	b1 2c       	mov	r11, r1
     7f0:	ba 2c       	mov	r11, r10
     7f2:	aa 24       	eor	r10, r10
    size |= spi_receive(S1RXRSRL);
     7f4:	87 e2       	ldi	r24, 0x27	; 39
     7f6:	95 e0       	ldi	r25, 0x05	; 5
     7f8:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     7fc:	a8 2a       	or	r10, r24
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S1RXRRH) << 8;
     7fe:	88 e2       	ldi	r24, 0x28	; 40
     800:	95 e0       	ldi	r25, 0x05	; 5
     802:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     806:	08 2f       	mov	r16, r24
     808:	10 e0       	ldi	r17, 0x00	; 0
     80a:	10 2f       	mov	r17, r16
     80c:	00 27       	eor	r16, r16
    pointer |= spi_receive(S1RXRRL);
     80e:	89 e2       	ldi	r24, 0x29	; 41
     810:	95 e0       	ldi	r25, 0x05	; 5
     812:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     816:	08 2b       	or	r16, r24
    
    // Bereken de offset
    uint16_t offset = pointer & 0x07FF;
     818:	c8 01       	movw	r24, r16
     81a:	97 70       	andi	r25, 0x07	; 7
    
    // Overflow van de databuffer
    if (offset + size > 2000) {
     81c:	8a 0d       	add	r24, r10
     81e:	9b 1d       	adc	r25, r11
     820:	81 3d       	cpi	r24, 0xD1	; 209
     822:	97 40       	sbci	r25, 0x07	; 7
     824:	70 f5       	brcc	.+92     	; 0x882 <tcp_from_monitor+0xb8>
        // Doe niets
    } else {
        // Berekent het adres met de pointer en mask
        // Haalt de data op uit het geheugen minus de eerste 8 header bytes
        uint16_t address;
        for (int i = 0; i < size; ++i) {
     826:	a1 14       	cp	r10, r1
     828:	b1 04       	cpc	r11, r1
     82a:	c1 f0       	breq	.+48     	; 0x85c <tcp_from_monitor+0x92>
     82c:	65 01       	movw	r12, r10
     82e:	c0 e0       	ldi	r28, 0x00	; 0
     830:	d0 e0       	ldi	r29, 0x00	; 0
     832:	81 2c       	mov	r8, r1
     834:	91 2c       	mov	r9, r1
            address = S1RXBASE + ((pointer++) & 0x07FF);
            buffer[i] = spi_receive(address);
     836:	ce 0d       	add	r28, r14
     838:	df 1d       	adc	r29, r15
     83a:	c4 01       	movw	r24, r8
     83c:	80 0f       	add	r24, r16
     83e:	91 1f       	adc	r25, r17
    } else {
        // Berekent het adres met de pointer en mask
        // Haalt de data op uit het geheugen minus de eerste 8 header bytes
        uint16_t address;
        for (int i = 0; i < size; ++i) {
            address = S1RXBASE + ((pointer++) & 0x07FF);
     840:	97 70       	andi	r25, 0x07	; 7
            buffer[i] = spi_receive(address);
     842:	98 59       	subi	r25, 0x98	; 152
     844:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     848:	88 83       	st	Y, r24
        // Doe niets
    } else {
        // Berekent het adres met de pointer en mask
        // Haalt de data op uit het geheugen minus de eerste 8 header bytes
        uint16_t address;
        for (int i = 0; i < size; ++i) {
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	88 1a       	sub	r8, r24
     84e:	98 0a       	sbc	r9, r24
     850:	e4 01       	movw	r28, r8
     852:	8c 14       	cp	r8, r12
     854:	9d 04       	cpc	r9, r13
     856:	79 f7       	brne	.-34     	; 0x836 <tcp_from_monitor+0x6c>
     858:	0a 0d       	add	r16, r10
     85a:	1b 1d       	adc	r17, r11
            address = S1RXBASE + ((pointer++) & 0x07FF);
            buffer[i] = spi_receive(address);
        }
        
        // Harde nul voor string
        buffer[size] = '\0';
     85c:	f7 01       	movw	r30, r14
     85e:	ea 0d       	add	r30, r10
     860:	fb 1d       	adc	r31, r11
     862:	10 82       	st	Z, r1
        
        // Berg de pointer weer op
        spi_transmit(S1RXRRH, pointer >> 8);
     864:	61 2f       	mov	r22, r17
     866:	88 e2       	ldi	r24, 0x28	; 40
     868:	95 e0       	ldi	r25, 0x05	; 5
     86a:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
        spi_transmit(S1RXRRL, pointer);
     86e:	60 2f       	mov	r22, r16
     870:	89 e2       	ldi	r24, 0x29	; 41
     872:	95 e0       	ldi	r25, 0x05	; 5
     874:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
        
        // Registreer dat het pakket is opgehaald
        spi_transmit(S1CR, RECV);
     878:	60 e4       	ldi	r22, 0x40	; 64
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	95 e0       	ldi	r25, 0x05	; 5
     87e:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    }
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	af 90       	pop	r10
     896:	9f 90       	pop	r9
     898:	8f 90       	pop	r8
     89a:	08 95       	ret

0000089c <tilt_analogRead>:
int tilt_analogRead(uint8_t adcPin)
{
    int ADCval;
    //ADMUX is het ADC multiplexer selection register, hier wordt de pin  gezet die wordt meegegeven als parameter.
    // Dit kan gedaan worden met enkel "=", omdat dit het eerste is wat gezet wordt.
    ADMUX = adcPin;
     89c:	ec e7       	ldi	r30, 0x7C	; 124
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 83       	st	Z, r24
    // De AVcc met een externe condensator wordt gezet op de AREF pin
    ADMUX |= (1 << REFS0 | 0 << REFS1);
     8a2:	80 81       	ld	r24, Z
     8a4:	80 64       	ori	r24, 0x40	; 64
     8a6:	80 83       	st	Z, r24
    //  maak het register weer vrij
    ADMUX &= ~(1 << ADLAR);
     8a8:	80 81       	ld	r24, Z
     8aa:	8f 7d       	andi	r24, 0xDF	; 223
     8ac:	80 83       	st	Z, r24

    // De prescaler wordt hier op 128 gezet voor de 8Mhz
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     8ae:	ea e7       	ldi	r30, 0x7A	; 122
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	87 60       	ori	r24, 0x07	; 7
     8b6:	80 83       	st	Z, r24
    // De ADC wordt ge-enabled
    ADCSRA |= (1 << ADEN);
     8b8:	80 81       	ld	r24, Z
     8ba:	80 68       	ori	r24, 0x80	; 128
     8bc:	80 83       	st	Z, r24

    //De ADSC bit wordt gezet, daarmee wordt de de conversie gestart.
    ADCSRA |= (1 << ADSC);
     8be:	80 81       	ld	r24, Z
     8c0:	80 64       	ori	r24, 0x40	; 64
     8c2:	80 83       	st	Z, r24

    // Door deze regel blijft hij wachten tot de conversie klaar is.
    // zolang de bit op 1 staat wacht hij.
    while(ADCSRA & (1 << ADSC));
     8c4:	80 81       	ld	r24, Z
     8c6:	86 fd       	sbrc	r24, 6
     8c8:	fd cf       	rjmp	.-6      	; 0x8c4 <tilt_analogRead+0x28>

    // Op de plek van de ADCval wordt ADCL opgeslagen.
    // Vervolgens wordt de ADCH gelezen en opgeslagen hierdoor kan de ADC weer opnieuw gebruikt worden.
    ADCval = ADCL;
     8ca:	20 91 78 00 	lds	r18, 0x0078
    ADCval = (ADCH << 8) + ADCval;
     8ce:	80 91 79 00 	lds	r24, 0x0079
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	98 2f       	mov	r25, r24
     8d6:	88 27       	eor	r24, r24

    return ADCval;
}
     8d8:	82 0f       	add	r24, r18
     8da:	91 1d       	adc	r25, r1
     8dc:	08 95       	ret

000008de <tilt_start>:

void tilt_start(void){
	xAs = tilt_analogRead(0);
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 4e 04 	call	0x89c	; 0x89c <tilt_analogRead>
     8e4:	90 93 26 03 	sts	0x0326, r25
     8e8:	80 93 25 03 	sts	0x0325, r24
 	yAs = tilt_analogRead(1);
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	0e 94 4e 04 	call	0x89c	; 0x89c <tilt_analogRead>
     8f2:	90 93 28 03 	sts	0x0328, r25
     8f6:	80 93 27 03 	sts	0x0327, r24
     8fa:	08 95       	ret

000008fc <tilt_check>:
	return alarmOn;
}

void tilt_check(int x, int y) {
    int tempX = (x)-xAs;
    int tempY = (y)-yAs;
     8fc:	40 91 27 03 	lds	r20, 0x0327
     900:	50 91 28 03 	lds	r21, 0x0328
   	tilt_check(x,y);					//Kijk of er een verandering is opgetreden ten opzichte van de beginstand.
	return alarmOn;
}

void tilt_check(int x, int y) {
    int tempX = (x)-xAs;
     904:	20 91 25 03 	lds	r18, 0x0325
     908:	30 91 26 03 	lds	r19, 0x0326
     90c:	82 1b       	sub	r24, r18
     90e:	93 0b       	sbc	r25, r19
    int tempY = (y)-yAs;
    if(tempX >50 || tempY > 50) {
     910:	c3 97       	sbiw	r24, 0x33	; 51
     912:	2c f4       	brge	.+10     	; 0x91e <__stack+0x1f>
	return alarmOn;
}

void tilt_check(int x, int y) {
    int tempX = (x)-xAs;
    int tempY = (y)-yAs;
     914:	64 1b       	sub	r22, r20
     916:	75 0b       	sbc	r23, r21
    if(tempX >50 || tempY > 50) {
     918:	63 33       	cpi	r22, 0x33	; 51
     91a:	71 05       	cpc	r23, r1
     91c:	34 f0       	brlt	.+12     	; 0x92a <__stack+0x2b>
	alarmOn = 1;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	90 93 24 03 	sts	0x0324, r25
     926:	80 93 23 03 	sts	0x0323, r24
     92a:	08 95       	ret

0000092c <tilt_getAlarm>:
void tilt_start(void){
	xAs = tilt_analogRead(0);
 	yAs = tilt_analogRead(1);
}

int tilt_getAlarm(void) {
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
   	int x = tilt_analogRead(0);				//Lees x waarde uit
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 4e 04 	call	0x89c	; 0x89c <tilt_analogRead>
     936:	ec 01       	movw	r28, r24
  	int y = tilt_analogRead(1);				//Lees x waarde uit
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	0e 94 4e 04 	call	0x89c	; 0x89c <tilt_analogRead>
   	tilt_check(x,y);					//Kijk of er een verandering is opgetreden ten opzichte van de beginstand.
     93e:	bc 01       	movw	r22, r24
     940:	ce 01       	movw	r24, r28
     942:	0e 94 7e 04 	call	0x8fc	; 0x8fc <tilt_check>
	return alarmOn;
}
     946:	80 91 23 03 	lds	r24, 0x0323
     94a:	90 91 24 03 	lds	r25, 0x0324
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <usart_init>:
#include "uart.h"

// Methode voor het opzetten van de USART verbinding
// Zet de baudrate, rx/tx en het frame formaat
void usart_init(uint16_t baudRate) {
    uint16_t ubrr = ((F_CPU / 16) / baudRate) - 1;         // Berekent de baudrate voor de usart
     954:	9c 01       	movw	r18, r24
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	60 e4       	ldi	r22, 0x40	; 64
     95c:	72 e4       	ldi	r23, 0x42	; 66
     95e:	8f e0       	ldi	r24, 0x0F	; 15
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 be 05 	call	0xb7c	; 0xb7c <__udivmodsi4>
     966:	21 50       	subi	r18, 0x01	; 1
     968:	31 09       	sbc	r19, r1
    UBRR0H = ubrr >> 8;                                    // Zet de hig byte in het usart baudrate register
     96a:	30 93 c5 00 	sts	0x00C5, r19
    UBRR0L = ubrr;                                         // Zet de low byte in het usart baudrate register
     96e:	20 93 c4 00 	sts	0x00C4, r18
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);                  // Zet zowel tx (transmit) als rx (receive) aan
     972:	88 e1       	ldi	r24, 0x18	; 24
     974:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);                // Frame formaat(8N1), 8 bits, geen par, 1 stopb
     978:	86 e0       	ldi	r24, 0x06	; 6
     97a:	80 93 c2 00 	sts	0x00C2, r24
     97e:	08 95       	ret

00000980 <usart_transmit>:
}

// Methode om met behulp van USART data te transmitten
// Wordt gebruikt door de stream om character mee te verzenden
int usart_transmit(char data, FILE *stream) {
     980:	cf 93       	push	r28
     982:	c8 2f       	mov	r28, r24
    // Als er een newline character binnenkomt wordt hier een carriage return aan toegevoegd
    if (data == '\n') usart_transmit('\r', stream);
     984:	8a 30       	cpi	r24, 0x0A	; 10
     986:	19 f4       	brne	.+6      	; 0x98e <usart_transmit+0xe>
     988:	8d e0       	ldi	r24, 0x0D	; 13
     98a:	0e 94 c0 04 	call	0x980	; 0x980 <usart_transmit>
    
    // Wachten op een lege buffer door het checken op de empty flag
    while (!(UCSR0A & (1 << UDRE0)));
     98e:	e0 ec       	ldi	r30, 0xC0	; 192
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	90 81       	ld	r25, Z
     994:	95 ff       	sbrs	r25, 5
     996:	fd cf       	rjmp	.-6      	; 0x992 <usart_transmit+0x12>
    
    // Zet de data in het data register om te transmitten
    UDR0 = data;
     998:	c0 93 c6 00 	sts	0x00C6, r28
    
    // Geen errors
    return 0;
}
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <usart_receive>:

// Methode om met behulp USART data te ontvangen
// Wordt gebruikt door de stream om character mee te ontvangen
char usart_receive(FILE *stream) {
     9a4:	cf 93       	push	r28
     9a6:	bc 01       	movw	r22, r24
    // Character om data op te slaan
    char data;
    
    // Wachten op binnenkomende data door te checken op de complete flag
    while (!(UCSR0A & (1 << RXC0)));
     9a8:	e0 ec       	ldi	r30, 0xC0	; 192
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	88 23       	and	r24, r24
     9b0:	ec f7       	brge	.-6      	; 0x9ac <usart_receive+0x8>
    
    // Haal de data op uit het register
    data = UDR0;
     9b2:	c0 91 c6 00 	lds	r28, 0x00C6
    
    // Echo input naar de seriele monitor
    usart_transmit(data, stream);
     9b6:	8c 2f       	mov	r24, r28
     9b8:	0e 94 c0 04 	call	0x980	; 0x980 <usart_transmit>
    
    // Return de data
    return data;
}
     9bc:	8c 2f       	mov	r24, r28
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <udp_create_socket>:
#include "udp.h"
#include "uart.h"

// Methode om een UDP socket mee te creeren
void udp_create_socket(void) {
    spi_transmit(S0MR, (1 << P1));              // Maakt van socket 0 een UDP socket
     9c2:	62 e0       	ldi	r22, 0x02	; 2
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	94 e0       	ldi	r25, 0x04	; 4
     9c8:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    
    uint16_t port = 30000;                      // Luistert naar data op poort 3000
    spi_transmit(S0PORTH, port >> 8);           // Zet hoogste byte
     9cc:	65 e7       	ldi	r22, 0x75	; 117
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	94 e0       	ldi	r25, 0x04	; 4
     9d2:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(S0PORTL, port);                // Zet laagste byte
     9d6:	60 e3       	ldi	r22, 0x30	; 48
     9d8:	85 e0       	ldi	r24, 0x05	; 5
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    
    spi_transmit(S0CR, OPEN);                   // Initialiseert de socket met de instellingen
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	94 e0       	ldi	r25, 0x04	; 4
     9e6:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    uint8_t status = spi_receive(S0SR);         // Haalt de status op
     9ea:	83 e0       	ldi	r24, 0x03	; 3
     9ec:	94 e0       	ldi	r25, 0x04	; 4
     9ee:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
    
    if(status != SOCK_UDP) {                    // Check of de status (SOCK_UDP) klopt met de instellingen
     9f2:	82 32       	cpi	r24, 0x22	; 34
     9f4:	39 f0       	breq	.+14     	; 0xa04 <udp_create_socket+0x42>
        spi_transmit(S0CR, CLOSE);              // Anders sluit de verbinding
     9f6:	60 e1       	ldi	r22, 0x10	; 16
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
        udp_create_socket();                    // Probeer opnieuw
     a00:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <udp_create_socket>
     a04:	08 95       	ret

00000a06 <udp_broadcast>:
void udp_close_socket(void) {
    spi_transmit(S0CR, CLOSE);                  // Sluit de verbinding
}

// Methode om mee te broadcasten
void udp_broadcast(udpflag flag, int length) {
     a06:	af 92       	push	r10
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	28 97       	sbiw	r28, 0x08	; 8
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	d8 2e       	mov	r13, r24
     a2c:	7b 01       	movw	r14, r22
    
    // Vraag de vrije ruimte op voor het versturen van pakket
    // Als deze niet groot genoeg wacht op beschikbare ruimte
    uint16_t size = 0;
    do {
        size = spi_receive(S0TXFSRH);
     a2e:	80 e2       	ldi	r24, 0x20	; 32
     a30:	94 e0       	ldi	r25, 0x04	; 4
     a32:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     a36:	08 2f       	mov	r16, r24
     a38:	10 e0       	ldi	r17, 0x00	; 0
        size <<= 8;
     a3a:	10 2f       	mov	r17, r16
     a3c:	00 27       	eor	r16, r16
        size |= spi_receive(S0TXFSRL);
     a3e:	81 e2       	ldi	r24, 0x21	; 33
     a40:	94 e0       	ldi	r25, 0x04	; 4
     a42:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     a46:	e9 ef       	ldi	r30, 0xF9	; 249
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <udp_broadcast+0x44>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <udp_broadcast+0x4a>
     a50:	00 00       	nop
     a52:	08 2b       	or	r16, r24
        _delay_ms(1);
    }
    while(length > size);
     a54:	0e 15       	cp	r16, r14
     a56:	1f 05       	cpc	r17, r15
     a58:	50 f3       	brcs	.-44     	; 0xa2e <udp_broadcast+0x28>
    
    // Zet het ipadres op broadcast
    spi_transmit(S0DIPR + 0, 255);
     a5a:	6f ef       	ldi	r22, 0xFF	; 255
     a5c:	8c e0       	ldi	r24, 0x0C	; 12
     a5e:	94 e0       	ldi	r25, 0x04	; 4
     a60:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(S0DIPR + 1, 255);
     a64:	6f ef       	ldi	r22, 0xFF	; 255
     a66:	8d e0       	ldi	r24, 0x0D	; 13
     a68:	94 e0       	ldi	r25, 0x04	; 4
     a6a:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(S0DIPR + 2, 255);
     a6e:	6f ef       	ldi	r22, 0xFF	; 255
     a70:	8e e0       	ldi	r24, 0x0E	; 14
     a72:	94 e0       	ldi	r25, 0x04	; 4
     a74:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(S0DIPR + 3, 255);
     a78:	6f ef       	ldi	r22, 0xFF	; 255
     a7a:	8f e0       	ldi	r24, 0x0F	; 15
     a7c:	94 e0       	ldi	r25, 0x04	; 4
     a7e:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    
    // Zet de destination poort
    spi_transmit(S0DPORTH, 30000 >> 8);
     a82:	65 e7       	ldi	r22, 0x75	; 117
     a84:	80 e1       	ldi	r24, 0x10	; 16
     a86:	94 e0       	ldi	r25, 0x04	; 4
     a88:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(S0DPORTL, 30000 & 0xFF);
     a8c:	60 e3       	ldi	r22, 0x30	; 48
     a8e:	81 e1       	ldi	r24, 0x11	; 17
     a90:	94 e0       	ldi	r25, 0x04	; 4
     a92:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S0TXWRH) << 8;
     a96:	84 e2       	ldi	r24, 0x24	; 36
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     a9e:	a8 2e       	mov	r10, r24
     aa0:	b1 2c       	mov	r11, r1
     aa2:	ba 2c       	mov	r11, r10
     aa4:	aa 24       	eor	r10, r10
    pointer |= spi_receive(S0TXWRL);
     aa6:	85 e2       	ldi	r24, 0x25	; 37
     aa8:	94 e0       	ldi	r25, 0x04	; 4
     aaa:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     aae:	a8 2a       	or	r10, r24
    
    // Berekent het adres met de pointer en mask
    uint16_t address = S0TXBASE + (pointer & 0x07FF);
     ab0:	c5 01       	movw	r24, r10
     ab2:	97 70       	andi	r25, 0x07	; 7
    
    // Schrijft de flag weg in het socketgeheugen
    spi_transmit(address, flag);
     ab4:	6d 2d       	mov	r22, r13
     ab6:	90 5c       	subi	r25, 0xC0	; 192
     ab8:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    ++pointer;
     abc:	c5 01       	movw	r24, r10
     abe:	01 96       	adiw	r24, 0x01	; 1
    
    // Schrijft het ipadres weg in het socketgeheugen
    int ip_addr[]  = {10, 0, 4, 1};
     ac0:	28 e0       	ldi	r18, 0x08	; 8
     ac2:	e3 e3       	ldi	r30, 0x33	; 51
     ac4:	f1 e0       	ldi	r31, 0x01	; 1
     ac6:	de 01       	movw	r26, r28
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	01 90       	ld	r0, Z+
     acc:	0d 92       	st	X+, r0
     ace:	2a 95       	dec	r18
     ad0:	e1 f7       	brne	.-8      	; 0xaca <udp_broadcast+0xc4>
     ad2:	8e 01       	movw	r16, r28
     ad4:	0f 5f       	subi	r16, 0xFF	; 255
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	6e 01       	movw	r12, r28
     ada:	f9 e0       	ldi	r31, 0x09	; 9
     adc:	cf 0e       	add	r12, r31
     ade:	d1 1c       	adc	r13, r1
    for (int i = 0; i < 4; ++i) {
        address = S0TXBASE + (pointer++ & 0x07FF);
     ae0:	7c 01       	movw	r14, r24
     ae2:	2f ef       	ldi	r18, 0xFF	; 255
     ae4:	e2 1a       	sub	r14, r18
     ae6:	f2 0a       	sbc	r15, r18
        spi_transmit(address, ip_addr[i]);
     ae8:	f8 01       	movw	r30, r16
     aea:	60 81       	ld	r22, Z
     aec:	0e 5f       	subi	r16, 0xFE	; 254
     aee:	1f 4f       	sbci	r17, 0xFF	; 255
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    int ip_addr[]  = {10, 0, 4, 1};
    for (int i = 0; i < 4; ++i) {
        address = S0TXBASE + (pointer++ & 0x07FF);
     af0:	97 70       	andi	r25, 0x07	; 7
        spi_transmit(address, ip_addr[i]);
     af2:	90 5c       	subi	r25, 0xC0	; 192
     af4:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(address, flag);
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    int ip_addr[]  = {10, 0, 4, 1};
    for (int i = 0; i < 4; ++i) {
     af8:	0c 15       	cp	r16, r12
     afa:	1d 05       	cpc	r17, r13
     afc:	11 f0       	breq	.+4      	; 0xb02 <udp_broadcast+0xfc>
        address = S0TXBASE + (pointer++ & 0x07FF);
     afe:	c7 01       	movw	r24, r14
     b00:	ef cf       	rjmp	.-34     	; 0xae0 <udp_broadcast+0xda>
     b02:	f5 e0       	ldi	r31, 0x05	; 5
     b04:	af 0e       	add	r10, r31
     b06:	b1 1c       	adc	r11, r1
        spi_transmit(address, ip_addr[i]);
    }
    
    // Berg de pointer weer op
    spi_transmit(S0TXWRH, pointer >> 8);
     b08:	6b 2d       	mov	r22, r11
     b0a:	84 e2       	ldi	r24, 0x24	; 36
     b0c:	94 e0       	ldi	r25, 0x04	; 4
     b0e:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    spi_transmit(S0TXWRL, pointer);
     b12:	6a 2d       	mov	r22, r10
     b14:	85 e2       	ldi	r24, 0x25	; 37
     b16:	94 e0       	ldi	r25, 0x04	; 4
     b18:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    
    // Verstuurt het pakket
    spi_transmit(S0CR, SEND);
     b1c:	60 e2       	ldi	r22, 0x20	; 32
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	94 e0       	ldi	r25, 0x04	; 4
     b22:	0e 94 83 03 	call	0x706	; 0x706 <spi_transmit>
    
    // Wacht op het versturen (0x00 = verstuurd)
    while(spi_receive(S0CR));
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	94 e0       	ldi	r25, 0x04	; 4
     b2a:	0e 94 97 03 	call	0x72e	; 0x72e <spi_receive>
     b2e:	81 11       	cpse	r24, r1
     b30:	fa cf       	rjmp	.-12     	; 0xb26 <udp_broadcast+0x120>
    
    // Sluit de verbinding
    // SPI_Transmit(S0CR, CLOSE);
}
     b32:	28 96       	adiw	r28, 0x08	; 8
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	bf 90       	pop	r11
     b50:	af 90       	pop	r10
     b52:	08 95       	ret

00000b54 <__divmodhi4>:
     b54:	97 fb       	bst	r25, 7
     b56:	07 2e       	mov	r0, r23
     b58:	16 f4       	brtc	.+4      	; 0xb5e <__divmodhi4+0xa>
     b5a:	00 94       	com	r0
     b5c:	07 d0       	rcall	.+14     	; 0xb6c <__divmodhi4_neg1>
     b5e:	77 fd       	sbrc	r23, 7
     b60:	09 d0       	rcall	.+18     	; 0xb74 <__divmodhi4_neg2>
     b62:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__udivmodhi4>
     b66:	07 fc       	sbrc	r0, 7
     b68:	05 d0       	rcall	.+10     	; 0xb74 <__divmodhi4_neg2>
     b6a:	3e f4       	brtc	.+14     	; 0xb7a <__divmodhi4_exit>

00000b6c <__divmodhi4_neg1>:
     b6c:	90 95       	com	r25
     b6e:	81 95       	neg	r24
     b70:	9f 4f       	sbci	r25, 0xFF	; 255
     b72:	08 95       	ret

00000b74 <__divmodhi4_neg2>:
     b74:	70 95       	com	r23
     b76:	61 95       	neg	r22
     b78:	7f 4f       	sbci	r23, 0xFF	; 255

00000b7a <__divmodhi4_exit>:
     b7a:	08 95       	ret

00000b7c <__udivmodsi4>:
     b7c:	a1 e2       	ldi	r26, 0x21	; 33
     b7e:	1a 2e       	mov	r1, r26
     b80:	aa 1b       	sub	r26, r26
     b82:	bb 1b       	sub	r27, r27
     b84:	fd 01       	movw	r30, r26
     b86:	0d c0       	rjmp	.+26     	; 0xba2 <__udivmodsi4_ep>

00000b88 <__udivmodsi4_loop>:
     b88:	aa 1f       	adc	r26, r26
     b8a:	bb 1f       	adc	r27, r27
     b8c:	ee 1f       	adc	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	a2 17       	cp	r26, r18
     b92:	b3 07       	cpc	r27, r19
     b94:	e4 07       	cpc	r30, r20
     b96:	f5 07       	cpc	r31, r21
     b98:	20 f0       	brcs	.+8      	; 0xba2 <__udivmodsi4_ep>
     b9a:	a2 1b       	sub	r26, r18
     b9c:	b3 0b       	sbc	r27, r19
     b9e:	e4 0b       	sbc	r30, r20
     ba0:	f5 0b       	sbc	r31, r21

00000ba2 <__udivmodsi4_ep>:
     ba2:	66 1f       	adc	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	88 1f       	adc	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	1a 94       	dec	r1
     bac:	69 f7       	brne	.-38     	; 0xb88 <__udivmodsi4_loop>
     bae:	60 95       	com	r22
     bb0:	70 95       	com	r23
     bb2:	80 95       	com	r24
     bb4:	90 95       	com	r25
     bb6:	9b 01       	movw	r18, r22
     bb8:	ac 01       	movw	r20, r24
     bba:	bd 01       	movw	r22, r26
     bbc:	cf 01       	movw	r24, r30
     bbe:	08 95       	ret

00000bc0 <__udivmodhi4>:
     bc0:	aa 1b       	sub	r26, r26
     bc2:	bb 1b       	sub	r27, r27
     bc4:	51 e1       	ldi	r21, 0x11	; 17
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <__udivmodhi4_ep>

00000bc8 <__udivmodhi4_loop>:
     bc8:	aa 1f       	adc	r26, r26
     bca:	bb 1f       	adc	r27, r27
     bcc:	a6 17       	cp	r26, r22
     bce:	b7 07       	cpc	r27, r23
     bd0:	10 f0       	brcs	.+4      	; 0xbd6 <__udivmodhi4_ep>
     bd2:	a6 1b       	sub	r26, r22
     bd4:	b7 0b       	sbc	r27, r23

00000bd6 <__udivmodhi4_ep>:
     bd6:	88 1f       	adc	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	5a 95       	dec	r21
     bdc:	a9 f7       	brne	.-22     	; 0xbc8 <__udivmodhi4_loop>
     bde:	80 95       	com	r24
     be0:	90 95       	com	r25
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	08 95       	ret

00000be8 <printf>:
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea ef       	ldi	r30, 0xFA	; 250
     bee:	f5 e0       	ldi	r31, 0x05	; 5
     bf0:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__prologue_saves__+0x20>
     bf4:	fe 01       	movw	r30, r28
     bf6:	35 96       	adiw	r30, 0x05	; 5
     bf8:	61 91       	ld	r22, Z+
     bfa:	71 91       	ld	r23, Z+
     bfc:	af 01       	movw	r20, r30
     bfe:	80 91 2b 03 	lds	r24, 0x032B
     c02:	90 91 2c 03 	lds	r25, 0x032C
     c06:	0e 94 35 06 	call	0xc6a	; 0xc6a <vfprintf>
     c0a:	e2 e0       	ldi	r30, 0x02	; 2
     c0c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__epilogue_restores__+0x20>

00000c10 <puts>:
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	e0 91 2b 03 	lds	r30, 0x032B
     c1c:	f0 91 2c 03 	lds	r31, 0x032C
     c20:	23 81       	ldd	r18, Z+3	; 0x03
     c22:	21 ff       	sbrs	r18, 1
     c24:	1b c0       	rjmp	.+54     	; 0xc5c <puts+0x4c>
     c26:	ec 01       	movw	r28, r24
     c28:	00 e0       	ldi	r16, 0x00	; 0
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	89 91       	ld	r24, Y+
     c2e:	60 91 2b 03 	lds	r22, 0x032B
     c32:	70 91 2c 03 	lds	r23, 0x032C
     c36:	db 01       	movw	r26, r22
     c38:	18 96       	adiw	r26, 0x08	; 8
     c3a:	ed 91       	ld	r30, X+
     c3c:	fc 91       	ld	r31, X
     c3e:	19 97       	sbiw	r26, 0x09	; 9
     c40:	88 23       	and	r24, r24
     c42:	31 f0       	breq	.+12     	; 0xc50 <puts+0x40>
     c44:	09 95       	icall
     c46:	89 2b       	or	r24, r25
     c48:	89 f3       	breq	.-30     	; 0xc2c <puts+0x1c>
     c4a:	0f ef       	ldi	r16, 0xFF	; 255
     c4c:	1f ef       	ldi	r17, 0xFF	; 255
     c4e:	ee cf       	rjmp	.-36     	; 0xc2c <puts+0x1c>
     c50:	8a e0       	ldi	r24, 0x0A	; 10
     c52:	09 95       	icall
     c54:	89 2b       	or	r24, r25
     c56:	11 f4       	brne	.+4      	; 0xc5c <puts+0x4c>
     c58:	c8 01       	movw	r24, r16
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <puts+0x50>
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	9f ef       	ldi	r25, 0xFF	; 255
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	08 95       	ret

00000c6a <vfprintf>:
     c6a:	ac e0       	ldi	r26, 0x0C	; 12
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	eb e3       	ldi	r30, 0x3B	; 59
     c70:	f6 e0       	ldi	r31, 0x06	; 6
     c72:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__prologue_saves__>
     c76:	7c 01       	movw	r14, r24
     c78:	6b 01       	movw	r12, r22
     c7a:	8a 01       	movw	r16, r20
     c7c:	fc 01       	movw	r30, r24
     c7e:	17 82       	std	Z+7, r1	; 0x07
     c80:	16 82       	std	Z+6, r1	; 0x06
     c82:	83 81       	ldd	r24, Z+3	; 0x03
     c84:	81 ff       	sbrs	r24, 1
     c86:	bd c1       	rjmp	.+890    	; 0x1002 <vfprintf+0x398>
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	4c 01       	movw	r8, r24
     c8e:	f7 01       	movw	r30, r14
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	f6 01       	movw	r30, r12
     c94:	93 fd       	sbrc	r25, 3
     c96:	85 91       	lpm	r24, Z+
     c98:	93 ff       	sbrs	r25, 3
     c9a:	81 91       	ld	r24, Z+
     c9c:	6f 01       	movw	r12, r30
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <vfprintf+0x3a>
     ca2:	ab c1       	rjmp	.+854    	; 0xffa <vfprintf+0x390>
     ca4:	85 32       	cpi	r24, 0x25	; 37
     ca6:	39 f4       	brne	.+14     	; 0xcb6 <vfprintf+0x4c>
     ca8:	93 fd       	sbrc	r25, 3
     caa:	85 91       	lpm	r24, Z+
     cac:	93 ff       	sbrs	r25, 3
     cae:	81 91       	ld	r24, Z+
     cb0:	6f 01       	movw	r12, r30
     cb2:	85 32       	cpi	r24, 0x25	; 37
     cb4:	29 f4       	brne	.+10     	; 0xcc0 <vfprintf+0x56>
     cb6:	b7 01       	movw	r22, r14
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 1d 08 	call	0x103a	; 0x103a <fputc>
     cbe:	e7 cf       	rjmp	.-50     	; 0xc8e <vfprintf+0x24>
     cc0:	51 2c       	mov	r5, r1
     cc2:	31 2c       	mov	r3, r1
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	20 32       	cpi	r18, 0x20	; 32
     cc8:	a0 f4       	brcc	.+40     	; 0xcf2 <vfprintf+0x88>
     cca:	8b 32       	cpi	r24, 0x2B	; 43
     ccc:	69 f0       	breq	.+26     	; 0xce8 <vfprintf+0x7e>
     cce:	30 f4       	brcc	.+12     	; 0xcdc <vfprintf+0x72>
     cd0:	80 32       	cpi	r24, 0x20	; 32
     cd2:	59 f0       	breq	.+22     	; 0xcea <vfprintf+0x80>
     cd4:	83 32       	cpi	r24, 0x23	; 35
     cd6:	69 f4       	brne	.+26     	; 0xcf2 <vfprintf+0x88>
     cd8:	20 61       	ori	r18, 0x10	; 16
     cda:	2c c0       	rjmp	.+88     	; 0xd34 <vfprintf+0xca>
     cdc:	8d 32       	cpi	r24, 0x2D	; 45
     cde:	39 f0       	breq	.+14     	; 0xcee <vfprintf+0x84>
     ce0:	80 33       	cpi	r24, 0x30	; 48
     ce2:	39 f4       	brne	.+14     	; 0xcf2 <vfprintf+0x88>
     ce4:	21 60       	ori	r18, 0x01	; 1
     ce6:	26 c0       	rjmp	.+76     	; 0xd34 <vfprintf+0xca>
     ce8:	22 60       	ori	r18, 0x02	; 2
     cea:	24 60       	ori	r18, 0x04	; 4
     cec:	23 c0       	rjmp	.+70     	; 0xd34 <vfprintf+0xca>
     cee:	28 60       	ori	r18, 0x08	; 8
     cf0:	21 c0       	rjmp	.+66     	; 0xd34 <vfprintf+0xca>
     cf2:	27 fd       	sbrc	r18, 7
     cf4:	27 c0       	rjmp	.+78     	; 0xd44 <vfprintf+0xda>
     cf6:	30 ed       	ldi	r19, 0xD0	; 208
     cf8:	38 0f       	add	r19, r24
     cfa:	3a 30       	cpi	r19, 0x0A	; 10
     cfc:	78 f4       	brcc	.+30     	; 0xd1c <vfprintf+0xb2>
     cfe:	26 ff       	sbrs	r18, 6
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <vfprintf+0xa4>
     d02:	fa e0       	ldi	r31, 0x0A	; 10
     d04:	5f 9e       	mul	r5, r31
     d06:	30 0d       	add	r19, r0
     d08:	11 24       	eor	r1, r1
     d0a:	53 2e       	mov	r5, r19
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <vfprintf+0xca>
     d0e:	8a e0       	ldi	r24, 0x0A	; 10
     d10:	38 9e       	mul	r3, r24
     d12:	30 0d       	add	r19, r0
     d14:	11 24       	eor	r1, r1
     d16:	33 2e       	mov	r3, r19
     d18:	20 62       	ori	r18, 0x20	; 32
     d1a:	0c c0       	rjmp	.+24     	; 0xd34 <vfprintf+0xca>
     d1c:	8e 32       	cpi	r24, 0x2E	; 46
     d1e:	21 f4       	brne	.+8      	; 0xd28 <vfprintf+0xbe>
     d20:	26 fd       	sbrc	r18, 6
     d22:	6b c1       	rjmp	.+726    	; 0xffa <vfprintf+0x390>
     d24:	20 64       	ori	r18, 0x40	; 64
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <vfprintf+0xca>
     d28:	8c 36       	cpi	r24, 0x6C	; 108
     d2a:	11 f4       	brne	.+4      	; 0xd30 <vfprintf+0xc6>
     d2c:	20 68       	ori	r18, 0x80	; 128
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <vfprintf+0xca>
     d30:	88 36       	cpi	r24, 0x68	; 104
     d32:	41 f4       	brne	.+16     	; 0xd44 <vfprintf+0xda>
     d34:	f6 01       	movw	r30, r12
     d36:	93 fd       	sbrc	r25, 3
     d38:	85 91       	lpm	r24, Z+
     d3a:	93 ff       	sbrs	r25, 3
     d3c:	81 91       	ld	r24, Z+
     d3e:	6f 01       	movw	r12, r30
     d40:	81 11       	cpse	r24, r1
     d42:	c1 cf       	rjmp	.-126    	; 0xcc6 <vfprintf+0x5c>
     d44:	98 2f       	mov	r25, r24
     d46:	9f 7d       	andi	r25, 0xDF	; 223
     d48:	95 54       	subi	r25, 0x45	; 69
     d4a:	93 30       	cpi	r25, 0x03	; 3
     d4c:	28 f4       	brcc	.+10     	; 0xd58 <vfprintf+0xee>
     d4e:	0c 5f       	subi	r16, 0xFC	; 252
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	ff e3       	ldi	r31, 0x3F	; 63
     d54:	f9 83       	std	Y+1, r31	; 0x01
     d56:	0d c0       	rjmp	.+26     	; 0xd72 <vfprintf+0x108>
     d58:	83 36       	cpi	r24, 0x63	; 99
     d5a:	31 f0       	breq	.+12     	; 0xd68 <vfprintf+0xfe>
     d5c:	83 37       	cpi	r24, 0x73	; 115
     d5e:	71 f0       	breq	.+28     	; 0xd7c <vfprintf+0x112>
     d60:	83 35       	cpi	r24, 0x53	; 83
     d62:	09 f0       	breq	.+2      	; 0xd66 <vfprintf+0xfc>
     d64:	5b c0       	rjmp	.+182    	; 0xe1c <vfprintf+0x1b2>
     d66:	22 c0       	rjmp	.+68     	; 0xdac <vfprintf+0x142>
     d68:	f8 01       	movw	r30, r16
     d6a:	80 81       	ld	r24, Z
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	0e 5f       	subi	r16, 0xFE	; 254
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	44 24       	eor	r4, r4
     d74:	43 94       	inc	r4
     d76:	51 2c       	mov	r5, r1
     d78:	54 01       	movw	r10, r8
     d7a:	15 c0       	rjmp	.+42     	; 0xda6 <vfprintf+0x13c>
     d7c:	38 01       	movw	r6, r16
     d7e:	f2 e0       	ldi	r31, 0x02	; 2
     d80:	6f 0e       	add	r6, r31
     d82:	71 1c       	adc	r7, r1
     d84:	f8 01       	movw	r30, r16
     d86:	a0 80       	ld	r10, Z
     d88:	b1 80       	ldd	r11, Z+1	; 0x01
     d8a:	26 ff       	sbrs	r18, 6
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <vfprintf+0x12a>
     d8e:	65 2d       	mov	r22, r5
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <vfprintf+0x12e>
     d94:	6f ef       	ldi	r22, 0xFF	; 255
     d96:	7f ef       	ldi	r23, 0xFF	; 255
     d98:	c5 01       	movw	r24, r10
     d9a:	2c 87       	std	Y+12, r18	; 0x0c
     d9c:	0e 94 12 08 	call	0x1024	; 0x1024 <strnlen>
     da0:	2c 01       	movw	r4, r24
     da2:	83 01       	movw	r16, r6
     da4:	2c 85       	ldd	r18, Y+12	; 0x0c
     da6:	2f 77       	andi	r18, 0x7F	; 127
     da8:	22 2e       	mov	r2, r18
     daa:	17 c0       	rjmp	.+46     	; 0xdda <vfprintf+0x170>
     dac:	38 01       	movw	r6, r16
     dae:	f2 e0       	ldi	r31, 0x02	; 2
     db0:	6f 0e       	add	r6, r31
     db2:	71 1c       	adc	r7, r1
     db4:	f8 01       	movw	r30, r16
     db6:	a0 80       	ld	r10, Z
     db8:	b1 80       	ldd	r11, Z+1	; 0x01
     dba:	26 ff       	sbrs	r18, 6
     dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <vfprintf+0x15a>
     dbe:	65 2d       	mov	r22, r5
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x15e>
     dc4:	6f ef       	ldi	r22, 0xFF	; 255
     dc6:	7f ef       	ldi	r23, 0xFF	; 255
     dc8:	c5 01       	movw	r24, r10
     dca:	2c 87       	std	Y+12, r18	; 0x0c
     dcc:	0e 94 07 08 	call	0x100e	; 0x100e <strnlen_P>
     dd0:	2c 01       	movw	r4, r24
     dd2:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd4:	20 68       	ori	r18, 0x80	; 128
     dd6:	22 2e       	mov	r2, r18
     dd8:	83 01       	movw	r16, r6
     dda:	23 fc       	sbrc	r2, 3
     ddc:	1b c0       	rjmp	.+54     	; 0xe14 <vfprintf+0x1aa>
     dde:	83 2d       	mov	r24, r3
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	48 16       	cp	r4, r24
     de4:	59 06       	cpc	r5, r25
     de6:	b0 f4       	brcc	.+44     	; 0xe14 <vfprintf+0x1aa>
     de8:	b7 01       	movw	r22, r14
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 1d 08 	call	0x103a	; 0x103a <fputc>
     df2:	3a 94       	dec	r3
     df4:	f4 cf       	rjmp	.-24     	; 0xdde <vfprintf+0x174>
     df6:	f5 01       	movw	r30, r10
     df8:	27 fc       	sbrc	r2, 7
     dfa:	85 91       	lpm	r24, Z+
     dfc:	27 fe       	sbrs	r2, 7
     dfe:	81 91       	ld	r24, Z+
     e00:	5f 01       	movw	r10, r30
     e02:	b7 01       	movw	r22, r14
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 1d 08 	call	0x103a	; 0x103a <fputc>
     e0a:	31 10       	cpse	r3, r1
     e0c:	3a 94       	dec	r3
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	4f 1a       	sub	r4, r31
     e12:	51 08       	sbc	r5, r1
     e14:	41 14       	cp	r4, r1
     e16:	51 04       	cpc	r5, r1
     e18:	71 f7       	brne	.-36     	; 0xdf6 <vfprintf+0x18c>
     e1a:	e5 c0       	rjmp	.+458    	; 0xfe6 <vfprintf+0x37c>
     e1c:	84 36       	cpi	r24, 0x64	; 100
     e1e:	11 f0       	breq	.+4      	; 0xe24 <vfprintf+0x1ba>
     e20:	89 36       	cpi	r24, 0x69	; 105
     e22:	39 f5       	brne	.+78     	; 0xe72 <vfprintf+0x208>
     e24:	f8 01       	movw	r30, r16
     e26:	27 ff       	sbrs	r18, 7
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <vfprintf+0x1ce>
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	0c 5f       	subi	r16, 0xFC	; 252
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	08 c0       	rjmp	.+16     	; 0xe48 <vfprintf+0x1de>
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	88 27       	eor	r24, r24
     e3e:	77 fd       	sbrc	r23, 7
     e40:	80 95       	com	r24
     e42:	98 2f       	mov	r25, r24
     e44:	0e 5f       	subi	r16, 0xFE	; 254
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	2f 76       	andi	r18, 0x6F	; 111
     e4a:	b2 2e       	mov	r11, r18
     e4c:	97 ff       	sbrs	r25, 7
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <vfprintf+0x1f8>
     e50:	90 95       	com	r25
     e52:	80 95       	com	r24
     e54:	70 95       	com	r23
     e56:	61 95       	neg	r22
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	20 68       	ori	r18, 0x80	; 128
     e60:	b2 2e       	mov	r11, r18
     e62:	2a e0       	ldi	r18, 0x0A	; 10
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	a4 01       	movw	r20, r8
     e68:	0e 94 4f 08 	call	0x109e	; 0x109e <__ultoa_invert>
     e6c:	a8 2e       	mov	r10, r24
     e6e:	a8 18       	sub	r10, r8
     e70:	44 c0       	rjmp	.+136    	; 0xefa <vfprintf+0x290>
     e72:	85 37       	cpi	r24, 0x75	; 117
     e74:	29 f4       	brne	.+10     	; 0xe80 <vfprintf+0x216>
     e76:	2f 7e       	andi	r18, 0xEF	; 239
     e78:	b2 2e       	mov	r11, r18
     e7a:	2a e0       	ldi	r18, 0x0A	; 10
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	25 c0       	rjmp	.+74     	; 0xeca <vfprintf+0x260>
     e80:	f2 2f       	mov	r31, r18
     e82:	f9 7f       	andi	r31, 0xF9	; 249
     e84:	bf 2e       	mov	r11, r31
     e86:	8f 36       	cpi	r24, 0x6F	; 111
     e88:	c1 f0       	breq	.+48     	; 0xeba <vfprintf+0x250>
     e8a:	18 f4       	brcc	.+6      	; 0xe92 <vfprintf+0x228>
     e8c:	88 35       	cpi	r24, 0x58	; 88
     e8e:	79 f0       	breq	.+30     	; 0xeae <vfprintf+0x244>
     e90:	b4 c0       	rjmp	.+360    	; 0xffa <vfprintf+0x390>
     e92:	80 37       	cpi	r24, 0x70	; 112
     e94:	19 f0       	breq	.+6      	; 0xe9c <vfprintf+0x232>
     e96:	88 37       	cpi	r24, 0x78	; 120
     e98:	21 f0       	breq	.+8      	; 0xea2 <vfprintf+0x238>
     e9a:	af c0       	rjmp	.+350    	; 0xffa <vfprintf+0x390>
     e9c:	2f 2f       	mov	r18, r31
     e9e:	20 61       	ori	r18, 0x10	; 16
     ea0:	b2 2e       	mov	r11, r18
     ea2:	b4 fe       	sbrs	r11, 4
     ea4:	0d c0       	rjmp	.+26     	; 0xec0 <vfprintf+0x256>
     ea6:	8b 2d       	mov	r24, r11
     ea8:	84 60       	ori	r24, 0x04	; 4
     eaa:	b8 2e       	mov	r11, r24
     eac:	09 c0       	rjmp	.+18     	; 0xec0 <vfprintf+0x256>
     eae:	24 ff       	sbrs	r18, 4
     eb0:	0a c0       	rjmp	.+20     	; 0xec6 <vfprintf+0x25c>
     eb2:	9f 2f       	mov	r25, r31
     eb4:	96 60       	ori	r25, 0x06	; 6
     eb6:	b9 2e       	mov	r11, r25
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <vfprintf+0x25c>
     eba:	28 e0       	ldi	r18, 0x08	; 8
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <vfprintf+0x260>
     ec0:	20 e1       	ldi	r18, 0x10	; 16
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <vfprintf+0x260>
     ec6:	20 e1       	ldi	r18, 0x10	; 16
     ec8:	32 e0       	ldi	r19, 0x02	; 2
     eca:	f8 01       	movw	r30, r16
     ecc:	b7 fe       	sbrs	r11, 7
     ece:	07 c0       	rjmp	.+14     	; 0xede <vfprintf+0x274>
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	0c 5f       	subi	r16, 0xFC	; 252
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	06 c0       	rjmp	.+12     	; 0xeea <vfprintf+0x280>
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 5f       	subi	r16, 0xFE	; 254
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	a4 01       	movw	r20, r8
     eec:	0e 94 4f 08 	call	0x109e	; 0x109e <__ultoa_invert>
     ef0:	a8 2e       	mov	r10, r24
     ef2:	a8 18       	sub	r10, r8
     ef4:	fb 2d       	mov	r31, r11
     ef6:	ff 77       	andi	r31, 0x7F	; 127
     ef8:	bf 2e       	mov	r11, r31
     efa:	b6 fe       	sbrs	r11, 6
     efc:	0b c0       	rjmp	.+22     	; 0xf14 <vfprintf+0x2aa>
     efe:	2b 2d       	mov	r18, r11
     f00:	2e 7f       	andi	r18, 0xFE	; 254
     f02:	a5 14       	cp	r10, r5
     f04:	50 f4       	brcc	.+20     	; 0xf1a <vfprintf+0x2b0>
     f06:	b4 fe       	sbrs	r11, 4
     f08:	0a c0       	rjmp	.+20     	; 0xf1e <vfprintf+0x2b4>
     f0a:	b2 fc       	sbrc	r11, 2
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <vfprintf+0x2b4>
     f0e:	2b 2d       	mov	r18, r11
     f10:	2e 7e       	andi	r18, 0xEE	; 238
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <vfprintf+0x2b4>
     f14:	7a 2c       	mov	r7, r10
     f16:	2b 2d       	mov	r18, r11
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <vfprintf+0x2b6>
     f1a:	7a 2c       	mov	r7, r10
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <vfprintf+0x2b6>
     f1e:	75 2c       	mov	r7, r5
     f20:	24 ff       	sbrs	r18, 4
     f22:	0d c0       	rjmp	.+26     	; 0xf3e <vfprintf+0x2d4>
     f24:	fe 01       	movw	r30, r28
     f26:	ea 0d       	add	r30, r10
     f28:	f1 1d       	adc	r31, r1
     f2a:	80 81       	ld	r24, Z
     f2c:	80 33       	cpi	r24, 0x30	; 48
     f2e:	11 f4       	brne	.+4      	; 0xf34 <vfprintf+0x2ca>
     f30:	29 7e       	andi	r18, 0xE9	; 233
     f32:	09 c0       	rjmp	.+18     	; 0xf46 <vfprintf+0x2dc>
     f34:	22 ff       	sbrs	r18, 2
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <vfprintf+0x2da>
     f38:	73 94       	inc	r7
     f3a:	73 94       	inc	r7
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <vfprintf+0x2dc>
     f3e:	82 2f       	mov	r24, r18
     f40:	86 78       	andi	r24, 0x86	; 134
     f42:	09 f0       	breq	.+2      	; 0xf46 <vfprintf+0x2dc>
     f44:	73 94       	inc	r7
     f46:	23 fd       	sbrc	r18, 3
     f48:	13 c0       	rjmp	.+38     	; 0xf70 <vfprintf+0x306>
     f4a:	20 ff       	sbrs	r18, 0
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <vfprintf+0x2f0>
     f4e:	5a 2c       	mov	r5, r10
     f50:	73 14       	cp	r7, r3
     f52:	18 f4       	brcc	.+6      	; 0xf5a <vfprintf+0x2f0>
     f54:	53 0c       	add	r5, r3
     f56:	57 18       	sub	r5, r7
     f58:	73 2c       	mov	r7, r3
     f5a:	73 14       	cp	r7, r3
     f5c:	68 f4       	brcc	.+26     	; 0xf78 <vfprintf+0x30e>
     f5e:	b7 01       	movw	r22, r14
     f60:	80 e2       	ldi	r24, 0x20	; 32
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	2c 87       	std	Y+12, r18	; 0x0c
     f66:	0e 94 1d 08 	call	0x103a	; 0x103a <fputc>
     f6a:	73 94       	inc	r7
     f6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f6e:	f5 cf       	rjmp	.-22     	; 0xf5a <vfprintf+0x2f0>
     f70:	73 14       	cp	r7, r3
     f72:	10 f4       	brcc	.+4      	; 0xf78 <vfprintf+0x30e>
     f74:	37 18       	sub	r3, r7
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <vfprintf+0x310>
     f78:	31 2c       	mov	r3, r1
     f7a:	24 ff       	sbrs	r18, 4
     f7c:	12 c0       	rjmp	.+36     	; 0xfa2 <vfprintf+0x338>
     f7e:	b7 01       	movw	r22, r14
     f80:	80 e3       	ldi	r24, 0x30	; 48
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	2c 87       	std	Y+12, r18	; 0x0c
     f86:	0e 94 1d 08 	call	0x103a	; 0x103a <fputc>
     f8a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f8c:	22 ff       	sbrs	r18, 2
     f8e:	17 c0       	rjmp	.+46     	; 0xfbe <vfprintf+0x354>
     f90:	21 ff       	sbrs	r18, 1
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <vfprintf+0x330>
     f94:	88 e5       	ldi	r24, 0x58	; 88
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <vfprintf+0x334>
     f9a:	88 e7       	ldi	r24, 0x78	; 120
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	b7 01       	movw	r22, r14
     fa0:	0c c0       	rjmp	.+24     	; 0xfba <vfprintf+0x350>
     fa2:	82 2f       	mov	r24, r18
     fa4:	86 78       	andi	r24, 0x86	; 134
     fa6:	59 f0       	breq	.+22     	; 0xfbe <vfprintf+0x354>
     fa8:	21 fd       	sbrc	r18, 1
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <vfprintf+0x346>
     fac:	80 e2       	ldi	r24, 0x20	; 32
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <vfprintf+0x348>
     fb0:	8b e2       	ldi	r24, 0x2B	; 43
     fb2:	27 fd       	sbrc	r18, 7
     fb4:	8d e2       	ldi	r24, 0x2D	; 45
     fb6:	b7 01       	movw	r22, r14
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 1d 08 	call	0x103a	; 0x103a <fputc>
     fbe:	a5 14       	cp	r10, r5
     fc0:	38 f4       	brcc	.+14     	; 0xfd0 <vfprintf+0x366>
     fc2:	b7 01       	movw	r22, r14
     fc4:	80 e3       	ldi	r24, 0x30	; 48
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 1d 08 	call	0x103a	; 0x103a <fputc>
     fcc:	5a 94       	dec	r5
     fce:	f7 cf       	rjmp	.-18     	; 0xfbe <vfprintf+0x354>
     fd0:	aa 94       	dec	r10
     fd2:	f4 01       	movw	r30, r8
     fd4:	ea 0d       	add	r30, r10
     fd6:	f1 1d       	adc	r31, r1
     fd8:	80 81       	ld	r24, Z
     fda:	b7 01       	movw	r22, r14
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 1d 08 	call	0x103a	; 0x103a <fputc>
     fe2:	a1 10       	cpse	r10, r1
     fe4:	f5 cf       	rjmp	.-22     	; 0xfd0 <vfprintf+0x366>
     fe6:	33 20       	and	r3, r3
     fe8:	09 f4       	brne	.+2      	; 0xfec <vfprintf+0x382>
     fea:	51 ce       	rjmp	.-862    	; 0xc8e <vfprintf+0x24>
     fec:	b7 01       	movw	r22, r14
     fee:	80 e2       	ldi	r24, 0x20	; 32
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 1d 08 	call	0x103a	; 0x103a <fputc>
     ff6:	3a 94       	dec	r3
     ff8:	f6 cf       	rjmp	.-20     	; 0xfe6 <vfprintf+0x37c>
     ffa:	f7 01       	movw	r30, r14
     ffc:	86 81       	ldd	r24, Z+6	; 0x06
     ffe:	97 81       	ldd	r25, Z+7	; 0x07
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <vfprintf+0x39c>
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	2c 96       	adiw	r28, 0x0c	; 12
    1008:	e2 e1       	ldi	r30, 0x12	; 18
    100a:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__epilogue_restores__>

0000100e <strnlen_P>:
    100e:	fc 01       	movw	r30, r24
    1010:	05 90       	lpm	r0, Z+
    1012:	61 50       	subi	r22, 0x01	; 1
    1014:	70 40       	sbci	r23, 0x00	; 0
    1016:	01 10       	cpse	r0, r1
    1018:	d8 f7       	brcc	.-10     	; 0x1010 <strnlen_P+0x2>
    101a:	80 95       	com	r24
    101c:	90 95       	com	r25
    101e:	8e 0f       	add	r24, r30
    1020:	9f 1f       	adc	r25, r31
    1022:	08 95       	ret

00001024 <strnlen>:
    1024:	fc 01       	movw	r30, r24
    1026:	61 50       	subi	r22, 0x01	; 1
    1028:	70 40       	sbci	r23, 0x00	; 0
    102a:	01 90       	ld	r0, Z+
    102c:	01 10       	cpse	r0, r1
    102e:	d8 f7       	brcc	.-10     	; 0x1026 <strnlen+0x2>
    1030:	80 95       	com	r24
    1032:	90 95       	com	r25
    1034:	8e 0f       	add	r24, r30
    1036:	9f 1f       	adc	r25, r31
    1038:	08 95       	ret

0000103a <fputc>:
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	18 2f       	mov	r17, r24
    1044:	09 2f       	mov	r16, r25
    1046:	eb 01       	movw	r28, r22
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	81 fd       	sbrc	r24, 1
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <fputc+0x1a>
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	9f ef       	ldi	r25, 0xFF	; 255
    1052:	20 c0       	rjmp	.+64     	; 0x1094 <fputc+0x5a>
    1054:	82 ff       	sbrs	r24, 2
    1056:	10 c0       	rjmp	.+32     	; 0x1078 <fputc+0x3e>
    1058:	4e 81       	ldd	r20, Y+6	; 0x06
    105a:	5f 81       	ldd	r21, Y+7	; 0x07
    105c:	2c 81       	ldd	r18, Y+4	; 0x04
    105e:	3d 81       	ldd	r19, Y+5	; 0x05
    1060:	42 17       	cp	r20, r18
    1062:	53 07       	cpc	r21, r19
    1064:	7c f4       	brge	.+30     	; 0x1084 <fputc+0x4a>
    1066:	e8 81       	ld	r30, Y
    1068:	f9 81       	ldd	r31, Y+1	; 0x01
    106a:	9f 01       	movw	r18, r30
    106c:	2f 5f       	subi	r18, 0xFF	; 255
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	39 83       	std	Y+1, r19	; 0x01
    1072:	28 83       	st	Y, r18
    1074:	10 83       	st	Z, r17
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <fputc+0x4a>
    1078:	e8 85       	ldd	r30, Y+8	; 0x08
    107a:	f9 85       	ldd	r31, Y+9	; 0x09
    107c:	81 2f       	mov	r24, r17
    107e:	09 95       	icall
    1080:	89 2b       	or	r24, r25
    1082:	29 f7       	brne	.-54     	; 0x104e <fputc+0x14>
    1084:	2e 81       	ldd	r18, Y+6	; 0x06
    1086:	3f 81       	ldd	r19, Y+7	; 0x07
    1088:	2f 5f       	subi	r18, 0xFF	; 255
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
    108c:	3f 83       	std	Y+7, r19	; 0x07
    108e:	2e 83       	std	Y+6, r18	; 0x06
    1090:	81 2f       	mov	r24, r17
    1092:	90 2f       	mov	r25, r16
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <__ultoa_invert>:
    109e:	fa 01       	movw	r30, r20
    10a0:	aa 27       	eor	r26, r26
    10a2:	28 30       	cpi	r18, 0x08	; 8
    10a4:	51 f1       	breq	.+84     	; 0x10fa <__ultoa_invert+0x5c>
    10a6:	20 31       	cpi	r18, 0x10	; 16
    10a8:	81 f1       	breq	.+96     	; 0x110a <__ultoa_invert+0x6c>
    10aa:	e8 94       	clt
    10ac:	6f 93       	push	r22
    10ae:	6e 7f       	andi	r22, 0xFE	; 254
    10b0:	6e 5f       	subi	r22, 0xFE	; 254
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	8f 4f       	sbci	r24, 0xFF	; 255
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	af 4f       	sbci	r26, 0xFF	; 255
    10ba:	b1 e0       	ldi	r27, 0x01	; 1
    10bc:	3e d0       	rcall	.+124    	; 0x113a <__ultoa_invert+0x9c>
    10be:	b4 e0       	ldi	r27, 0x04	; 4
    10c0:	3c d0       	rcall	.+120    	; 0x113a <__ultoa_invert+0x9c>
    10c2:	67 0f       	add	r22, r23
    10c4:	78 1f       	adc	r23, r24
    10c6:	89 1f       	adc	r24, r25
    10c8:	9a 1f       	adc	r25, r26
    10ca:	a1 1d       	adc	r26, r1
    10cc:	68 0f       	add	r22, r24
    10ce:	79 1f       	adc	r23, r25
    10d0:	8a 1f       	adc	r24, r26
    10d2:	91 1d       	adc	r25, r1
    10d4:	a1 1d       	adc	r26, r1
    10d6:	6a 0f       	add	r22, r26
    10d8:	71 1d       	adc	r23, r1
    10da:	81 1d       	adc	r24, r1
    10dc:	91 1d       	adc	r25, r1
    10de:	a1 1d       	adc	r26, r1
    10e0:	20 d0       	rcall	.+64     	; 0x1122 <__ultoa_invert+0x84>
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <__ultoa_invert+0x48>
    10e4:	68 94       	set
    10e6:	3f 91       	pop	r19
    10e8:	2a e0       	ldi	r18, 0x0A	; 10
    10ea:	26 9f       	mul	r18, r22
    10ec:	11 24       	eor	r1, r1
    10ee:	30 19       	sub	r19, r0
    10f0:	30 5d       	subi	r19, 0xD0	; 208
    10f2:	31 93       	st	Z+, r19
    10f4:	de f6       	brtc	.-74     	; 0x10ac <__ultoa_invert+0xe>
    10f6:	cf 01       	movw	r24, r30
    10f8:	08 95       	ret
    10fa:	46 2f       	mov	r20, r22
    10fc:	47 70       	andi	r20, 0x07	; 7
    10fe:	40 5d       	subi	r20, 0xD0	; 208
    1100:	41 93       	st	Z+, r20
    1102:	b3 e0       	ldi	r27, 0x03	; 3
    1104:	0f d0       	rcall	.+30     	; 0x1124 <__ultoa_invert+0x86>
    1106:	c9 f7       	brne	.-14     	; 0x10fa <__ultoa_invert+0x5c>
    1108:	f6 cf       	rjmp	.-20     	; 0x10f6 <__ultoa_invert+0x58>
    110a:	46 2f       	mov	r20, r22
    110c:	4f 70       	andi	r20, 0x0F	; 15
    110e:	40 5d       	subi	r20, 0xD0	; 208
    1110:	4a 33       	cpi	r20, 0x3A	; 58
    1112:	18 f0       	brcs	.+6      	; 0x111a <__ultoa_invert+0x7c>
    1114:	49 5d       	subi	r20, 0xD9	; 217
    1116:	31 fd       	sbrc	r19, 1
    1118:	40 52       	subi	r20, 0x20	; 32
    111a:	41 93       	st	Z+, r20
    111c:	02 d0       	rcall	.+4      	; 0x1122 <__ultoa_invert+0x84>
    111e:	a9 f7       	brne	.-22     	; 0x110a <__ultoa_invert+0x6c>
    1120:	ea cf       	rjmp	.-44     	; 0x10f6 <__ultoa_invert+0x58>
    1122:	b4 e0       	ldi	r27, 0x04	; 4
    1124:	a6 95       	lsr	r26
    1126:	97 95       	ror	r25
    1128:	87 95       	ror	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	ba 95       	dec	r27
    1130:	c9 f7       	brne	.-14     	; 0x1124 <__ultoa_invert+0x86>
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	61 05       	cpc	r22, r1
    1136:	71 05       	cpc	r23, r1
    1138:	08 95       	ret
    113a:	9b 01       	movw	r18, r22
    113c:	ac 01       	movw	r20, r24
    113e:	0a 2e       	mov	r0, r26
    1140:	06 94       	lsr	r0
    1142:	57 95       	ror	r21
    1144:	47 95       	ror	r20
    1146:	37 95       	ror	r19
    1148:	27 95       	ror	r18
    114a:	ba 95       	dec	r27
    114c:	c9 f7       	brne	.-14     	; 0x1140 <__ultoa_invert+0xa2>
    114e:	62 0f       	add	r22, r18
    1150:	73 1f       	adc	r23, r19
    1152:	84 1f       	adc	r24, r20
    1154:	95 1f       	adc	r25, r21
    1156:	a0 1d       	adc	r26, r0
    1158:	08 95       	ret

0000115a <__prologue_saves__>:
    115a:	2f 92       	push	r2
    115c:	3f 92       	push	r3
    115e:	4f 92       	push	r4
    1160:	5f 92       	push	r5
    1162:	6f 92       	push	r6
    1164:	7f 92       	push	r7
    1166:	8f 92       	push	r8
    1168:	9f 92       	push	r9
    116a:	af 92       	push	r10
    116c:	bf 92       	push	r11
    116e:	cf 92       	push	r12
    1170:	df 92       	push	r13
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	ca 1b       	sub	r28, r26
    1184:	db 0b       	sbc	r29, r27
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	09 94       	ijmp

00001192 <__epilogue_restores__>:
    1192:	2a 88       	ldd	r2, Y+18	; 0x12
    1194:	39 88       	ldd	r3, Y+17	; 0x11
    1196:	48 88       	ldd	r4, Y+16	; 0x10
    1198:	5f 84       	ldd	r5, Y+15	; 0x0f
    119a:	6e 84       	ldd	r6, Y+14	; 0x0e
    119c:	7d 84       	ldd	r7, Y+13	; 0x0d
    119e:	8c 84       	ldd	r8, Y+12	; 0x0c
    11a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    11a4:	b9 84       	ldd	r11, Y+9	; 0x09
    11a6:	c8 84       	ldd	r12, Y+8	; 0x08
    11a8:	df 80       	ldd	r13, Y+7	; 0x07
    11aa:	ee 80       	ldd	r14, Y+6	; 0x06
    11ac:	fd 80       	ldd	r15, Y+5	; 0x05
    11ae:	0c 81       	ldd	r16, Y+4	; 0x04
    11b0:	1b 81       	ldd	r17, Y+3	; 0x03
    11b2:	aa 81       	ldd	r26, Y+2	; 0x02
    11b4:	b9 81       	ldd	r27, Y+1	; 0x01
    11b6:	ce 0f       	add	r28, r30
    11b8:	d1 1d       	adc	r29, r1
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	ed 01       	movw	r28, r26
    11c6:	08 95       	ret

000011c8 <_exit>:
    11c8:	f8 94       	cli

000011ca <__stop_program>:
    11ca:	ff cf       	rjmp	.-2      	; 0x11ca <__stop_program>
