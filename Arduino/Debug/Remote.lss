
Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800100  000028d0  00002964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800334  00800334  00002b98  2**0
                  ALLOC
  3 .stab         000038f4  00000000  00000000  00002b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000161a  00000000  00000000  0000648c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007aa6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00007ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000532  00000000  00000000  00007b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000008c  00000000  00000000  000080ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002d2  00000000  00000000  00008156  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_13>
      38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      68:	c4 07       	cpc	r28, r20
      6a:	57 06       	cpc	r5, r23
      6c:	90 06       	cpc	r9, r16
      6e:	63 07       	cpc	r22, r19
      70:	81 07       	cpc	r24, r17
      72:	9f 07       	cpc	r25, r31
      74:	b5 07       	cpc	r27, r21
      76:	c4 07       	cpc	r28, r20
      78:	c4 07       	cpc	r28, r20
      7a:	c4 07       	cpc	r28, r20
      7c:	bc 07       	cpc	r27, r28

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	e0 ed       	ldi	r30, 0xD0	; 208
      92:	f8 e2       	ldi	r31, 0x28	; 40
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a4 33       	cpi	r26, 0x34	; 52
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	23 e0       	ldi	r18, 0x03	; 3
      a2:	a4 e3       	ldi	r26, 0x34	; 52
      a4:	b3 e0       	ldi	r27, 0x03	; 3
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a8 34       	cpi	r26, 0x48	; 72
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 40 05 	call	0xa80	; 0xa80 <main>
      b4:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <_exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <initWiznet>:
//uint8_t ip_addr[]  = {192,168,178,3};

//#endif

// Methode om wiznet mee in te stellen
void initWiznet(void) {
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
    spi_transmit(MR, (1 << RST));   // Initialiseer registers ethernet shield
      c4:	60 e8       	ldi	r22, 0x80	; 128
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(TMSR, ((1 << S0S0) | (1 << S1S0) | (1 << S2S0) | (1 << S3S0)));    // 2kb grootte
      ce:	65 e5       	ldi	r22, 0x55	; 85
      d0:	8b e1       	ldi	r24, 0x1B	; 27
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(RMSR, ((1 << S0S0) | (1 << S1S0) | (1 << S2S0) | (1 << S3S0)));    // 2kb grootte
      d8:	65 e5       	ldi	r22, 0x55	; 85
      da:	8a e1       	ldi	r24, 0x1A	; 26
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
}
      e2:	df 91       	pop	r29
      e4:	cf 91       	pop	r28
      e6:	08 95       	ret

000000e8 <set_gateway>:

// Methode om de bytes uit het gateway array mee te versturen
void set_gateway(void) {
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	00 d0       	rcall	.+0      	; 0xee <set_gateway+0x6>
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
    for(int i = 0; i < (sizeof(gtw_addr) / sizeof(gtw_addr[0])); ++i) {
      f2:	1a 82       	std	Y+2, r1	; 0x02
      f4:	19 82       	std	Y+1, r1	; 0x01
      f6:	11 c0       	rjmp	.+34     	; 0x11a <set_gateway+0x32>
        spi_transmit(GAR + i, gtw_addr[i]);
      f8:	89 81       	ldd	r24, Y+1	; 0x01
      fa:	9a 81       	ldd	r25, Y+2	; 0x02
      fc:	80 50       	subi	r24, 0x00	; 0
      fe:	9f 4f       	sbci	r25, 0xFF	; 255
     100:	fc 01       	movw	r30, r24
     102:	20 81       	ld	r18, Z
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	9a 81       	ldd	r25, Y+2	; 0x02
     108:	01 96       	adiw	r24, 0x01	; 1
     10a:	62 2f       	mov	r22, r18
     10c:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(RMSR, ((1 << S0S0) | (1 << S1S0) | (1 << S2S0) | (1 << S3S0)));    // 2kb grootte
}

// Methode om de bytes uit het gateway array mee te versturen
void set_gateway(void) {
    for(int i = 0; i < (sizeof(gtw_addr) / sizeof(gtw_addr[0])); ++i) {
     110:	89 81       	ldd	r24, Y+1	; 0x01
     112:	9a 81       	ldd	r25, Y+2	; 0x02
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	9a 83       	std	Y+2, r25	; 0x02
     118:	89 83       	std	Y+1, r24	; 0x01
     11a:	89 81       	ldd	r24, Y+1	; 0x01
     11c:	9a 81       	ldd	r25, Y+2	; 0x02
     11e:	84 30       	cpi	r24, 0x04	; 4
     120:	91 05       	cpc	r25, r1
     122:	50 f3       	brcs	.-44     	; 0xf8 <set_gateway+0x10>
        spi_transmit(GAR + i, gtw_addr[i]);
    }
}
     124:	0f 90       	pop	r0
     126:	0f 90       	pop	r0
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <set_submask>:

// Methode om de bytes uit het subnet array mee te versturen
void set_submask(void) {
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	00 d0       	rcall	.+0      	; 0x134 <set_submask+0x6>
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
    for(int i = 0; i < (sizeof(sub_mask) / sizeof(sub_mask[0])); ++i) {
     138:	1a 82       	std	Y+2, r1	; 0x02
     13a:	19 82       	std	Y+1, r1	; 0x01
     13c:	11 c0       	rjmp	.+34     	; 0x160 <set_submask+0x32>
        spi_transmit(SUBR + i, sub_mask[i]);
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	9a 81       	ldd	r25, Y+2	; 0x02
     142:	8c 5f       	subi	r24, 0xFC	; 252
     144:	9e 4f       	sbci	r25, 0xFE	; 254
     146:	fc 01       	movw	r30, r24
     148:	20 81       	ld	r18, Z
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	9a 81       	ldd	r25, Y+2	; 0x02
     14e:	05 96       	adiw	r24, 0x05	; 5
     150:	62 2f       	mov	r22, r18
     152:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    }
}

// Methode om de bytes uit het subnet array mee te versturen
void set_submask(void) {
    for(int i = 0; i < (sizeof(sub_mask) / sizeof(sub_mask[0])); ++i) {
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	9a 81       	ldd	r25, Y+2	; 0x02
     15a:	01 96       	adiw	r24, 0x01	; 1
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	84 30       	cpi	r24, 0x04	; 4
     166:	91 05       	cpc	r25, r1
     168:	50 f3       	brcs	.-44     	; 0x13e <set_submask+0x10>
        spi_transmit(SUBR + i, sub_mask[i]);
    }
}
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <set_macaddress>:

// Methode om de bytes uit het macaddress array mee te versturen
void set_macaddress(void) {
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	00 d0       	rcall	.+0      	; 0x17a <set_macaddress+0x6>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
    for(int i = 0; i < (sizeof(mac_addr) / sizeof(mac_addr[0])); ++i) {
     17e:	1a 82       	std	Y+2, r1	; 0x02
     180:	19 82       	std	Y+1, r1	; 0x01
     182:	11 c0       	rjmp	.+34     	; 0x1a6 <set_macaddress+0x32>
        spi_transmit(SHAR + i, mac_addr[i]);
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	9a 81       	ldd	r25, Y+2	; 0x02
     188:	88 5f       	subi	r24, 0xF8	; 248
     18a:	9e 4f       	sbci	r25, 0xFE	; 254
     18c:	fc 01       	movw	r30, r24
     18e:	20 81       	ld	r18, Z
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	09 96       	adiw	r24, 0x09	; 9
     196:	62 2f       	mov	r22, r18
     198:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    }
}

// Methode om de bytes uit het macaddress array mee te versturen
void set_macaddress(void) {
    for(int i = 0; i < (sizeof(mac_addr) / sizeof(mac_addr[0])); ++i) {
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	9a 81       	ldd	r25, Y+2	; 0x02
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	9a 83       	std	Y+2, r25	; 0x02
     1a4:	89 83       	std	Y+1, r24	; 0x01
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	9a 81       	ldd	r25, Y+2	; 0x02
     1aa:	86 30       	cpi	r24, 0x06	; 6
     1ac:	91 05       	cpc	r25, r1
     1ae:	50 f3       	brcs	.-44     	; 0x184 <set_macaddress+0x10>
        spi_transmit(SHAR + i, mac_addr[i]);
    }
}
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <set_ipaddress>:

// Methode om de bytes uit het ipadres array mee te versturen
void set_ipaddress(void) {
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <set_ipaddress+0x6>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
    for(int i = 0; i < (sizeof(ip_addr) / sizeof(ip_addr[0])); ++i) {
     1c4:	1a 82       	std	Y+2, r1	; 0x02
     1c6:	19 82       	std	Y+1, r1	; 0x01
     1c8:	11 c0       	rjmp	.+34     	; 0x1ec <set_ipaddress+0x32>
        spi_transmit(SIPR + i, ip_addr[i]);
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	82 5f       	subi	r24, 0xF2	; 242
     1d0:	9e 4f       	sbci	r25, 0xFE	; 254
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 81       	ld	r18, Z
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	9a 81       	ldd	r25, Y+2	; 0x02
     1da:	0f 96       	adiw	r24, 0x0f	; 15
     1dc:	62 2f       	mov	r22, r18
     1de:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    }
}

// Methode om de bytes uit het ipadres array mee te versturen
void set_ipaddress(void) {
    for(int i = 0; i < (sizeof(ip_addr) / sizeof(ip_addr[0])); ++i) {
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	9a 81       	ldd	r25, Y+2	; 0x02
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	9a 83       	std	Y+2, r25	; 0x02
     1ea:	89 83       	std	Y+1, r24	; 0x01
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	9a 81       	ldd	r25, Y+2	; 0x02
     1f0:	84 30       	cpi	r24, 0x04	; 4
     1f2:	91 05       	cpc	r25, r1
     1f4:	50 f3       	brcs	.-44     	; 0x1ca <set_ipaddress+0x10>
        spi_transmit(SIPR + i, ip_addr[i]);
    }
}
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <print_status>:

// Methode om de instellingen mee te printen
void print_status(void) {
     200:	8f 92       	push	r8
     202:	9f 92       	push	r9
     204:	af 92       	push	r10
     206:	bf 92       	push	r11
     208:	cf 92       	push	r12
     20a:	df 92       	push	r13
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
           spi_receive(GAR + 2),spi_receive(GAR + 3));
     21c:	84 e0       	ldi	r24, 0x04	; 4
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    }
}

// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
     224:	c8 2e       	mov	r12, r24
     226:	d1 2c       	mov	r13, r1
           spi_receive(GAR + 2),spi_receive(GAR + 3));
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    }
}

// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
     230:	e8 2e       	mov	r14, r24
     232:	f1 2c       	mov	r15, r1
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     23c:	08 2f       	mov	r16, r24
     23e:	10 e0       	ldi	r17, 0x00	; 0
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     248:	88 2f       	mov	r24, r24
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	2d 2d       	mov	r18, r13
     24e:	2f 93       	push	r18
     250:	2c 2d       	mov	r18, r12
     252:	2f 93       	push	r18
     254:	2f 2d       	mov	r18, r15
     256:	2f 93       	push	r18
     258:	2e 2d       	mov	r18, r14
     25a:	2f 93       	push	r18
     25c:	21 2f       	mov	r18, r17
     25e:	2f 93       	push	r18
     260:	20 2f       	mov	r18, r16
     262:	2f 93       	push	r18
     264:	29 2f       	mov	r18, r25
     266:	2f 93       	push	r18
     268:	8f 93       	push	r24
     26a:	8d e3       	ldi	r24, 0x3D	; 61
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	89 2f       	mov	r24, r25
     270:	8f 93       	push	r24
     272:	8d e3       	ldi	r24, 0x3D	; 61
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	8f 93       	push	r24
     278:	0e 94 76 11 	call	0x22ec	; 0x22ec <printf>
     27c:	8d b7       	in	r24, 0x3d	; 61
     27e:	9e b7       	in	r25, 0x3e	; 62
     280:	0a 96       	adiw	r24, 0x0a	; 10
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
     28c:	8e e0       	ldi	r24, 0x0E	; 14
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
     294:	88 2e       	mov	r8, r24
     296:	91 2c       	mov	r9, r1
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
     298:	8d e0       	ldi	r24, 0x0D	; 13
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
     2a0:	a8 2e       	mov	r10, r24
     2a2:	b1 2c       	mov	r11, r1
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
     2a4:	8c e0       	ldi	r24, 0x0C	; 12
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
     2ac:	c8 2e       	mov	r12, r24
     2ae:	d1 2c       	mov	r13, r1
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
     2b0:	8b e0       	ldi	r24, 0x0B	; 11
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
// Methode om de instellingen mee te printen
void print_status(void) {
    printf("Gateway adres: %d.%d.%d.%d\n\n",spi_receive(GAR + 0),spi_receive(GAR + 1),\
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
     2b8:	e8 2e       	mov	r14, r24
     2ba:	f1 2c       	mov	r15, r1
     2bc:	8a e0       	ldi	r24, 0x0A	; 10
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     2c4:	08 2f       	mov	r16, r24
     2c6:	10 e0       	ldi	r17, 0x00	; 0
     2c8:	89 e0       	ldi	r24, 0x09	; 9
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     2d0:	88 2f       	mov	r24, r24
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	29 2d       	mov	r18, r9
     2d6:	2f 93       	push	r18
     2d8:	28 2d       	mov	r18, r8
     2da:	2f 93       	push	r18
     2dc:	2b 2d       	mov	r18, r11
     2de:	2f 93       	push	r18
     2e0:	2a 2d       	mov	r18, r10
     2e2:	2f 93       	push	r18
     2e4:	2d 2d       	mov	r18, r13
     2e6:	2f 93       	push	r18
     2e8:	2c 2d       	mov	r18, r12
     2ea:	2f 93       	push	r18
     2ec:	2f 2d       	mov	r18, r15
     2ee:	2f 93       	push	r18
     2f0:	2e 2d       	mov	r18, r14
     2f2:	2f 93       	push	r18
     2f4:	21 2f       	mov	r18, r17
     2f6:	2f 93       	push	r18
     2f8:	20 2f       	mov	r18, r16
     2fa:	2f 93       	push	r18
     2fc:	29 2f       	mov	r18, r25
     2fe:	2f 93       	push	r18
     300:	8f 93       	push	r24
     302:	8a e5       	ldi	r24, 0x5A	; 90
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	89 2f       	mov	r24, r25
     308:	8f 93       	push	r24
     30a:	8a e5       	ldi	r24, 0x5A	; 90
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	8f 93       	push	r24
     310:	0e 94 76 11 	call	0x22ec	; 0x22ec <printf>
     314:	8d b7       	in	r24, 0x3d	; 61
     316:	9e b7       	in	r25, 0x3e	; 62
     318:	0e 96       	adiw	r24, 0x0e	; 14
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
     324:	88 e0       	ldi	r24, 0x08	; 8
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
     32c:	c8 2e       	mov	r12, r24
     32e:	d1 2c       	mov	r13, r1
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
     330:	87 e0       	ldi	r24, 0x07	; 7
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
           spi_receive(GAR + 2),spi_receive(GAR + 3));
    
    printf("Source hardware adres: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",spi_receive(SHAR + 0),spi_receive(SHAR + 1),\
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
     338:	e8 2e       	mov	r14, r24
     33a:	f1 2c       	mov	r15, r1
     33c:	86 e0       	ldi	r24, 0x06	; 6
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     344:	08 2f       	mov	r16, r24
     346:	10 e0       	ldi	r17, 0x00	; 0
     348:	85 e0       	ldi	r24, 0x05	; 5
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     350:	88 2f       	mov	r24, r24
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	2d 2d       	mov	r18, r13
     356:	2f 93       	push	r18
     358:	2c 2d       	mov	r18, r12
     35a:	2f 93       	push	r18
     35c:	2f 2d       	mov	r18, r15
     35e:	2f 93       	push	r18
     360:	2e 2d       	mov	r18, r14
     362:	2f 93       	push	r18
     364:	21 2f       	mov	r18, r17
     366:	2f 93       	push	r18
     368:	20 2f       	mov	r18, r16
     36a:	2f 93       	push	r18
     36c:	29 2f       	mov	r18, r25
     36e:	2f 93       	push	r18
     370:	8f 93       	push	r24
     372:	81 e9       	ldi	r24, 0x91	; 145
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	89 2f       	mov	r24, r25
     378:	8f 93       	push	r24
     37a:	81 e9       	ldi	r24, 0x91	; 145
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	8f 93       	push	r24
     380:	0e 94 76 11 	call	0x22ec	; 0x22ec <printf>
     384:	8d b7       	in	r24, 0x3d	; 61
     386:	9e b7       	in	r25, 0x3e	; 62
     388:	0a 96       	adiw	r24, 0x0a	; 10
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
    
    printf("Ip-adres: %d.%d.%d.%d\n\n",spi_receive(SIPR + 0),spi_receive(SIPR + 1),\
           spi_receive(SIPR + 2),spi_receive(SIPR + 3));
     394:	82 e1       	ldi	r24, 0x12	; 18
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
    
    printf("Ip-adres: %d.%d.%d.%d\n\n",spi_receive(SIPR + 0),spi_receive(SIPR + 1),\
     39c:	c8 2e       	mov	r12, r24
     39e:	d1 2c       	mov	r13, r1
           spi_receive(SIPR + 2),spi_receive(SIPR + 3));
     3a0:	81 e1       	ldi	r24, 0x11	; 17
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
           spi_receive(SHAR + 2),spi_receive(SHAR + 3),spi_receive(SHAR + 4),spi_receive(SHAR + 5));
    
    printf("Subnet mask: %d.%d.%d.%d\n\n",spi_receive(SUBR + 0),spi_receive(SUBR + 1),\
           spi_receive(SUBR + 2),spi_receive(SUBR + 3));
    
    printf("Ip-adres: %d.%d.%d.%d\n\n",spi_receive(SIPR + 0),spi_receive(SIPR + 1),\
     3a8:	e8 2e       	mov	r14, r24
     3aa:	f1 2c       	mov	r15, r1
     3ac:	80 e1       	ldi	r24, 0x10	; 16
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     3b4:	08 2f       	mov	r16, r24
     3b6:	10 e0       	ldi	r17, 0x00	; 0
     3b8:	8f e0       	ldi	r24, 0x0F	; 15
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	2d 2d       	mov	r18, r13
     3c6:	2f 93       	push	r18
     3c8:	2c 2d       	mov	r18, r12
     3ca:	2f 93       	push	r18
     3cc:	2f 2d       	mov	r18, r15
     3ce:	2f 93       	push	r18
     3d0:	2e 2d       	mov	r18, r14
     3d2:	2f 93       	push	r18
     3d4:	21 2f       	mov	r18, r17
     3d6:	2f 93       	push	r18
     3d8:	20 2f       	mov	r18, r16
     3da:	2f 93       	push	r18
     3dc:	29 2f       	mov	r18, r25
     3de:	2f 93       	push	r18
     3e0:	8f 93       	push	r24
     3e2:	8c ea       	ldi	r24, 0xAC	; 172
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	89 2f       	mov	r24, r25
     3e8:	8f 93       	push	r24
     3ea:	8c ea       	ldi	r24, 0xAC	; 172
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	8f 93       	push	r24
     3f0:	0e 94 76 11 	call	0x22ec	; 0x22ec <printf>
     3f4:	8d b7       	in	r24, 0x3d	; 61
     3f6:	9e b7       	in	r25, 0x3e	; 62
     3f8:	0a 96       	adiw	r24, 0x0a	; 10
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
           spi_receive(SIPR + 2),spi_receive(SIPR + 3));
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	cf 90       	pop	r12
     414:	bf 90       	pop	r11
     416:	af 90       	pop	r10
     418:	9f 90       	pop	r9
     41a:	8f 90       	pop	r8
     41c:	08 95       	ret

0000041e <lcd_init>:
// Control struct voor het versturen van commando's
control lcd_commandos;

// Methode om de lcd en commando's mee te initialiseren
void lcd_init()
{
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	ce 54       	subi	r28, 0x4E	; 78
     42c:	d1 09       	sbc	r29, r1
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
    // Zet de poorten op output
    DDRD |= ((1 << DD2) | (1 << DD3) | (1 << DD4) | (1 << DD5));
     438:	8a e2       	ldi	r24, 0x2A	; 42
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	2a e2       	ldi	r18, 0x2A	; 42
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	f9 01       	movw	r30, r18
     442:	20 81       	ld	r18, Z
     444:	2c 63       	ori	r18, 0x3C	; 60
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
    
    // Zet de commando's in de struct
    lcd_commandos.clear              = 0b00000001;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 3a 03 	sts	0x033A, r24
    lcd_commandos.cursor_home        = 0b00000010;
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	80 93 3b 03 	sts	0x033B, r24
    lcd_commandos.cursor_forward     = 0b00000110;     // bit[0] = not shifted
     456:	86 e0       	ldi	r24, 0x06	; 6
     458:	80 93 3c 03 	sts	0x033C, r24
    lcd_commandos.cursor_backwards   = 0b00000100;     // bit[0] = not shifted
     45c:	84 e0       	ldi	r24, 0x04	; 4
     45e:	80 93 3d 03 	sts	0x033D, r24
    lcd_commandos.display_on         = 0b00001110;     // bit[1] = cursor on | bit[0] = blink off
     462:	8e e0       	ldi	r24, 0x0E	; 14
     464:	80 93 3e 03 	sts	0x033E, r24
    lcd_commandos.display_off        = 0b00001010;     // bit[1] = cursor on | bit[0] = blink off
     468:	8a e0       	ldi	r24, 0x0A	; 10
     46a:	80 93 3f 03 	sts	0x033F, r24
    lcd_commandos.lines_1            = 0b00110000;     // bit[4] = 8 bits    | bit[2] = 7 dots, 0/1 = X
     46e:	80 e3       	ldi	r24, 0x30	; 48
     470:	80 93 40 03 	sts	0x0340, r24
    lcd_commandos.lines_2            = 0b00111000;     // bit[4] = 8 bits    | bit[2] = 7 dots, 0/1 = X
     474:	88 e3       	ldi	r24, 0x38	; 56
     476:	80 93 41 03 	sts	0x0341, r24

    // Stel de lcd in met de juiste functies
    lcd_send_command(lcd_commandos.lines_2);
     47a:	80 91 41 03 	lds	r24, 0x0341
     47e:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_send_command>
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	a8 e4       	ldi	r26, 0x48	; 72
     488:	b2 e4       	ldi	r27, 0x42	; 66
     48a:	89 83       	std	Y+1, r24	; 0x01
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	ab 83       	std	Y+3, r26	; 0x03
     490:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     492:	2b ea       	ldi	r18, 0xAB	; 171
     494:	3a ea       	ldi	r19, 0xAA	; 170
     496:	4a ea       	ldi	r20, 0xAA	; 170
     498:	50 e4       	ldi	r21, 0x40	; 64
     49a:	69 81       	ldd	r22, Y+1	; 0x01
     49c:	7a 81       	ldd	r23, Y+2	; 0x02
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	9c 81       	ldd	r25, Y+4	; 0x04
     4a2:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     4a6:	dc 01       	movw	r26, r24
     4a8:	cb 01       	movw	r24, r22
     4aa:	8d 83       	std	Y+5, r24	; 0x05
     4ac:	9e 83       	std	Y+6, r25	; 0x06
     4ae:	af 83       	std	Y+7, r26	; 0x07
     4b0:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	40 e8       	ldi	r20, 0x80	; 128
     4b8:	50 e4       	ldi	r21, 0x40	; 64
     4ba:	69 81       	ldd	r22, Y+1	; 0x01
     4bc:	7a 81       	ldd	r23, Y+2	; 0x02
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	9c 81       	ldd	r25, Y+4	; 0x04
     4c2:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	89 87       	std	Y+9, r24	; 0x09
     4cc:	9a 87       	std	Y+10, r25	; 0x0a
     4ce:	ab 87       	std	Y+11, r26	; 0x0b
     4d0:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e8       	ldi	r20, 0x80	; 128
     4d8:	5f e3       	ldi	r21, 0x3F	; 63
     4da:	6d 81       	ldd	r22, Y+5	; 0x05
     4dc:	7e 81       	ldd	r23, Y+6	; 0x06
     4de:	8f 81       	ldd	r24, Y+7	; 0x07
     4e0:	98 85       	ldd	r25, Y+8	; 0x08
     4e2:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
     4e6:	88 23       	and	r24, r24
     4e8:	1c f4       	brge	.+6      	; 0x4f0 <lcd_init+0xd2>
		__ticks = 1;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	8d 87       	std	Y+13, r24	; 0x0d
     4ee:	b2 c0       	rjmp	.+356    	; 0x654 <lcd_init+0x236>
	else if (__tmp2 > 65535)
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	3f ef       	ldi	r19, 0xFF	; 255
     4f4:	4f e7       	ldi	r20, 0x7F	; 127
     4f6:	57 e4       	ldi	r21, 0x47	; 71
     4f8:	69 85       	ldd	r22, Y+9	; 0x09
     4fa:	7a 85       	ldd	r23, Y+10	; 0x0a
     4fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     4fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     500:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
     504:	18 16       	cp	r1, r24
     506:	0c f0       	brlt	.+2      	; 0x50a <lcd_init+0xec>
     508:	7b c0       	rjmp	.+246    	; 0x600 <lcd_init+0x1e2>
	{
		_delay_ms(__us / 1000.0);
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	4a e7       	ldi	r20, 0x7A	; 122
     510:	54 e4       	ldi	r21, 0x44	; 68
     512:	69 81       	ldd	r22, Y+1	; 0x01
     514:	7a 81       	ldd	r23, Y+2	; 0x02
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	0e 94 06 10 	call	0x200c	; 0x200c <__divsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	8e 87       	std	Y+14, r24	; 0x0e
     524:	9f 87       	std	Y+15, r25	; 0x0f
     526:	a8 8b       	std	Y+16, r26	; 0x10
     528:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	4a e7       	ldi	r20, 0x7A	; 122
     530:	55 e4       	ldi	r21, 0x45	; 69
     532:	6e 85       	ldd	r22, Y+14	; 0x0e
     534:	7f 85       	ldd	r23, Y+15	; 0x0f
     536:	88 89       	ldd	r24, Y+16	; 0x10
     538:	99 89       	ldd	r25, Y+17	; 0x11
     53a:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	8a 8b       	std	Y+18, r24	; 0x12
     544:	9b 8b       	std	Y+19, r25	; 0x13
     546:	ac 8b       	std	Y+20, r26	; 0x14
     548:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e8       	ldi	r20, 0x80	; 128
     550:	5f e3       	ldi	r21, 0x3F	; 63
     552:	6a 89       	ldd	r22, Y+18	; 0x12
     554:	7b 89       	ldd	r23, Y+19	; 0x13
     556:	8c 89       	ldd	r24, Y+20	; 0x14
     558:	9d 89       	ldd	r25, Y+21	; 0x15
     55a:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
     55e:	88 23       	and	r24, r24
     560:	2c f4       	brge	.+10     	; 0x56c <lcd_init+0x14e>
		__ticks = 1;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9f 8b       	std	Y+23, r25	; 0x17
     568:	8e 8b       	std	Y+22, r24	; 0x16
     56a:	3f c0       	rjmp	.+126    	; 0x5ea <lcd_init+0x1cc>
	else if (__tmp > 65535)
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	3f ef       	ldi	r19, 0xFF	; 255
     570:	4f e7       	ldi	r20, 0x7F	; 127
     572:	57 e4       	ldi	r21, 0x47	; 71
     574:	6a 89       	ldd	r22, Y+18	; 0x12
     576:	7b 89       	ldd	r23, Y+19	; 0x13
     578:	8c 89       	ldd	r24, Y+20	; 0x14
     57a:	9d 89       	ldd	r25, Y+21	; 0x15
     57c:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
     580:	18 16       	cp	r1, r24
     582:	4c f5       	brge	.+82     	; 0x5d6 <lcd_init+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	40 e2       	ldi	r20, 0x20	; 32
     58a:	51 e4       	ldi	r21, 0x41	; 65
     58c:	6e 85       	ldd	r22, Y+14	; 0x0e
     58e:	7f 85       	ldd	r23, Y+15	; 0x0f
     590:	88 89       	ldd	r24, Y+16	; 0x10
     592:	99 89       	ldd	r25, Y+17	; 0x11
     594:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	bc 01       	movw	r22, r24
     59e:	cd 01       	movw	r24, r26
     5a0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     5a4:	dc 01       	movw	r26, r24
     5a6:	cb 01       	movw	r24, r22
     5a8:	9f 8b       	std	Y+23, r25	; 0x17
     5aa:	8e 8b       	std	Y+22, r24	; 0x16
     5ac:	0f c0       	rjmp	.+30     	; 0x5cc <lcd_init+0x1ae>
     5ae:	80 e9       	ldi	r24, 0x90	; 144
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	99 8f       	std	Y+25, r25	; 0x19
     5b4:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5b6:	88 8d       	ldd	r24, Y+24	; 0x18
     5b8:	99 8d       	ldd	r25, Y+25	; 0x19
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <lcd_init+0x19c>
     5be:	99 8f       	std	Y+25, r25	; 0x19
     5c0:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c2:	8e 89       	ldd	r24, Y+22	; 0x16
     5c4:	9f 89       	ldd	r25, Y+23	; 0x17
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	9f 8b       	std	Y+23, r25	; 0x17
     5ca:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5cc:	8e 89       	ldd	r24, Y+22	; 0x16
     5ce:	9f 89       	ldd	r25, Y+23	; 0x17
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	69 f7       	brne	.-38     	; 0x5ae <lcd_init+0x190>
     5d4:	3f c0       	rjmp	.+126    	; 0x654 <lcd_init+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d6:	6a 89       	ldd	r22, Y+18	; 0x12
     5d8:	7b 89       	ldd	r23, Y+19	; 0x13
     5da:	8c 89       	ldd	r24, Y+20	; 0x14
     5dc:	9d 89       	ldd	r25, Y+21	; 0x15
     5de:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	9f 8b       	std	Y+23, r25	; 0x17
     5e8:	8e 8b       	std	Y+22, r24	; 0x16
     5ea:	8e 89       	ldd	r24, Y+22	; 0x16
     5ec:	9f 89       	ldd	r25, Y+23	; 0x17
     5ee:	9b 8f       	std	Y+27, r25	; 0x1b
     5f0:	8a 8f       	std	Y+26, r24	; 0x1a
     5f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     5f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <lcd_init+0x1d8>
     5fa:	9b 8f       	std	Y+27, r25	; 0x1b
     5fc:	8a 8f       	std	Y+26, r24	; 0x1a
     5fe:	2a c0       	rjmp	.+84     	; 0x654 <lcd_init+0x236>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	4f e7       	ldi	r20, 0x7F	; 127
     606:	53 e4       	ldi	r21, 0x43	; 67
     608:	6d 81       	ldd	r22, Y+5	; 0x05
     60a:	7e 81       	ldd	r23, Y+6	; 0x06
     60c:	8f 81       	ldd	r24, Y+7	; 0x07
     60e:	98 85       	ldd	r25, Y+8	; 0x08
     610:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
     614:	18 16       	cp	r1, r24
     616:	ac f4       	brge	.+42     	; 0x642 <lcd_init+0x224>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     618:	69 85       	ldd	r22, Y+9	; 0x09
     61a:	7a 85       	ldd	r23, Y+10	; 0x0a
     61c:	8b 85       	ldd	r24, Y+11	; 0x0b
     61e:	9c 85       	ldd	r25, Y+12	; 0x0c
     620:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	9d 8f       	std	Y+29, r25	; 0x1d
     62a:	8c 8f       	std	Y+28, r24	; 0x1c
     62c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     62e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     630:	9f 8f       	std	Y+31, r25	; 0x1f
     632:	8e 8f       	std	Y+30, r24	; 0x1e
     634:	8e 8d       	ldd	r24, Y+30	; 0x1e
     636:	9f 8d       	ldd	r25, Y+31	; 0x1f
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <lcd_init+0x21a>
     63c:	9f 8f       	std	Y+31, r25	; 0x1f
     63e:	8e 8f       	std	Y+30, r24	; 0x1e
     640:	0f c0       	rjmp	.+30     	; 0x660 <lcd_init+0x242>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     642:	6d 81       	ldd	r22, Y+5	; 0x05
     644:	7e 81       	ldd	r23, Y+6	; 0x06
     646:	8f 81       	ldd	r24, Y+7	; 0x07
     648:	98 85       	ldd	r25, Y+8	; 0x08
     64a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     64e:	dc 01       	movw	r26, r24
     650:	cb 01       	movw	r24, r22
     652:	8d 87       	std	Y+13, r24	; 0x0d
     654:	8d 85       	ldd	r24, Y+13	; 0x0d
     656:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     658:	88 a1       	ldd	r24, Y+32	; 0x20
     65a:	8a 95       	dec	r24
     65c:	f1 f7       	brne	.-4      	; 0x65a <lcd_init+0x23c>
     65e:	88 a3       	std	Y+32, r24	; 0x20
    _delay_us(50);
    
    // Zet het lcd aan
    lcd_send_command(lcd_commandos.display_on);
     660:	80 91 3e 03 	lds	r24, 0x033E
     664:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_send_command>
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	a8 e4       	ldi	r26, 0x48	; 72
     66e:	b2 e4       	ldi	r27, 0x42	; 66
     670:	89 a3       	std	Y+33, r24	; 0x21
     672:	9a a3       	std	Y+34, r25	; 0x22
     674:	ab a3       	std	Y+35, r26	; 0x23
     676:	bc a3       	std	Y+36, r27	; 0x24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     678:	2b ea       	ldi	r18, 0xAB	; 171
     67a:	3a ea       	ldi	r19, 0xAA	; 170
     67c:	4a ea       	ldi	r20, 0xAA	; 170
     67e:	50 e4       	ldi	r21, 0x40	; 64
     680:	69 a1       	ldd	r22, Y+33	; 0x21
     682:	7a a1       	ldd	r23, Y+34	; 0x22
     684:	8b a1       	ldd	r24, Y+35	; 0x23
     686:	9c a1       	ldd	r25, Y+36	; 0x24
     688:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	8d a3       	std	Y+37, r24	; 0x25
     692:	9e a3       	std	Y+38, r25	; 0x26
     694:	af a3       	std	Y+39, r26	; 0x27
     696:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e8       	ldi	r20, 0x80	; 128
     69e:	50 e4       	ldi	r21, 0x40	; 64
     6a0:	69 a1       	ldd	r22, Y+33	; 0x21
     6a2:	7a a1       	ldd	r23, Y+34	; 0x22
     6a4:	8b a1       	ldd	r24, Y+35	; 0x23
     6a6:	9c a1       	ldd	r25, Y+36	; 0x24
     6a8:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	89 a7       	std	Y+41, r24	; 0x29
     6b2:	9a a7       	std	Y+42, r25	; 0x2a
     6b4:	ab a7       	std	Y+43, r26	; 0x2b
     6b6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e8       	ldi	r20, 0x80	; 128
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	6d a1       	ldd	r22, Y+37	; 0x25
     6c2:	7e a1       	ldd	r23, Y+38	; 0x26
     6c4:	8f a1       	ldd	r24, Y+39	; 0x27
     6c6:	98 a5       	ldd	r25, Y+40	; 0x28
     6c8:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
     6cc:	88 23       	and	r24, r24
     6ce:	1c f4       	brge	.+6      	; 0x6d6 <lcd_init+0x2b8>
		__ticks = 1;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	8d a7       	std	Y+45, r24	; 0x2d
     6d4:	b2 c0       	rjmp	.+356    	; 0x83a <lcd_init+0x41c>
	else if (__tmp2 > 65535)
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	3f ef       	ldi	r19, 0xFF	; 255
     6da:	4f e7       	ldi	r20, 0x7F	; 127
     6dc:	57 e4       	ldi	r21, 0x47	; 71
     6de:	69 a5       	ldd	r22, Y+41	; 0x29
     6e0:	7a a5       	ldd	r23, Y+42	; 0x2a
     6e2:	8b a5       	ldd	r24, Y+43	; 0x2b
     6e4:	9c a5       	ldd	r25, Y+44	; 0x2c
     6e6:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
     6ea:	18 16       	cp	r1, r24
     6ec:	0c f0       	brlt	.+2      	; 0x6f0 <lcd_init+0x2d2>
     6ee:	7b c0       	rjmp	.+246    	; 0x7e6 <lcd_init+0x3c8>
	{
		_delay_ms(__us / 1000.0);
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	4a e7       	ldi	r20, 0x7A	; 122
     6f6:	54 e4       	ldi	r21, 0x44	; 68
     6f8:	69 a1       	ldd	r22, Y+33	; 0x21
     6fa:	7a a1       	ldd	r23, Y+34	; 0x22
     6fc:	8b a1       	ldd	r24, Y+35	; 0x23
     6fe:	9c a1       	ldd	r25, Y+36	; 0x24
     700:	0e 94 06 10 	call	0x200c	; 0x200c <__divsf3>
     704:	dc 01       	movw	r26, r24
     706:	cb 01       	movw	r24, r22
     708:	8e a7       	std	Y+46, r24	; 0x2e
     70a:	9f a7       	std	Y+47, r25	; 0x2f
     70c:	a8 ab       	std	Y+48, r26	; 0x30
     70e:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	4a e7       	ldi	r20, 0x7A	; 122
     716:	55 e4       	ldi	r21, 0x45	; 69
     718:	6e a5       	ldd	r22, Y+46	; 0x2e
     71a:	7f a5       	ldd	r23, Y+47	; 0x2f
     71c:	88 a9       	ldd	r24, Y+48	; 0x30
     71e:	99 a9       	ldd	r25, Y+49	; 0x31
     720:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	8a ab       	std	Y+50, r24	; 0x32
     72a:	9b ab       	std	Y+51, r25	; 0x33
     72c:	ac ab       	std	Y+52, r26	; 0x34
     72e:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e8       	ldi	r20, 0x80	; 128
     736:	5f e3       	ldi	r21, 0x3F	; 63
     738:	6a a9       	ldd	r22, Y+50	; 0x32
     73a:	7b a9       	ldd	r23, Y+51	; 0x33
     73c:	8c a9       	ldd	r24, Y+52	; 0x34
     73e:	9d a9       	ldd	r25, Y+53	; 0x35
     740:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_init+0x334>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	9f ab       	std	Y+55, r25	; 0x37
     74e:	8e ab       	std	Y+54, r24	; 0x36
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_init+0x3b2>
	else if (__tmp > 65535)
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	3f ef       	ldi	r19, 0xFF	; 255
     756:	4f e7       	ldi	r20, 0x7F	; 127
     758:	57 e4       	ldi	r21, 0x47	; 71
     75a:	6a a9       	ldd	r22, Y+50	; 0x32
     75c:	7b a9       	ldd	r23, Y+51	; 0x33
     75e:	8c a9       	ldd	r24, Y+52	; 0x34
     760:	9d a9       	ldd	r25, Y+53	; 0x35
     762:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_init+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e2       	ldi	r20, 0x20	; 32
     770:	51 e4       	ldi	r21, 0x41	; 65
     772:	6e a5       	ldd	r22, Y+46	; 0x2e
     774:	7f a5       	ldd	r23, Y+47	; 0x2f
     776:	88 a9       	ldd	r24, Y+48	; 0x30
     778:	99 a9       	ldd	r25, Y+49	; 0x31
     77a:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	9f ab       	std	Y+55, r25	; 0x37
     790:	8e ab       	std	Y+54, r24	; 0x36
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_init+0x394>
     794:	80 e9       	ldi	r24, 0x90	; 144
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	99 af       	std	Y+57, r25	; 0x39
     79a:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     79c:	88 ad       	ldd	r24, Y+56	; 0x38
     79e:	99 ad       	ldd	r25, Y+57	; 0x39
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_init+0x382>
     7a4:	99 af       	std	Y+57, r25	; 0x39
     7a6:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8e a9       	ldd	r24, Y+54	; 0x36
     7aa:	9f a9       	ldd	r25, Y+55	; 0x37
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	9f ab       	std	Y+55, r25	; 0x37
     7b0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8e a9       	ldd	r24, Y+54	; 0x36
     7b4:	9f a9       	ldd	r25, Y+55	; 0x37
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_init+0x376>
     7ba:	3f c0       	rjmp	.+126    	; 0x83a <lcd_init+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	6a a9       	ldd	r22, Y+50	; 0x32
     7be:	7b a9       	ldd	r23, Y+51	; 0x33
     7c0:	8c a9       	ldd	r24, Y+52	; 0x34
     7c2:	9d a9       	ldd	r25, Y+53	; 0x35
     7c4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	9f ab       	std	Y+55, r25	; 0x37
     7ce:	8e ab       	std	Y+54, r24	; 0x36
     7d0:	8e a9       	ldd	r24, Y+54	; 0x36
     7d2:	9f a9       	ldd	r25, Y+55	; 0x37
     7d4:	9b af       	std	Y+59, r25	; 0x3b
     7d6:	8a af       	std	Y+58, r24	; 0x3a
     7d8:	8a ad       	ldd	r24, Y+58	; 0x3a
     7da:	9b ad       	ldd	r25, Y+59	; 0x3b
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_init+0x3be>
     7e0:	9b af       	std	Y+59, r25	; 0x3b
     7e2:	8a af       	std	Y+58, r24	; 0x3a
     7e4:	2a c0       	rjmp	.+84     	; 0x83a <lcd_init+0x41c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	4f e7       	ldi	r20, 0x7F	; 127
     7ec:	53 e4       	ldi	r21, 0x43	; 67
     7ee:	6d a1       	ldd	r22, Y+37	; 0x25
     7f0:	7e a1       	ldd	r23, Y+38	; 0x26
     7f2:	8f a1       	ldd	r24, Y+39	; 0x27
     7f4:	98 a5       	ldd	r25, Y+40	; 0x28
     7f6:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	ac f4       	brge	.+42     	; 0x828 <lcd_init+0x40a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     7fe:	69 a5       	ldd	r22, Y+41	; 0x29
     800:	7a a5       	ldd	r23, Y+42	; 0x2a
     802:	8b a5       	ldd	r24, Y+43	; 0x2b
     804:	9c a5       	ldd	r25, Y+44	; 0x2c
     806:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	9d af       	std	Y+61, r25	; 0x3d
     810:	8c af       	std	Y+60, r24	; 0x3c
     812:	8c ad       	ldd	r24, Y+60	; 0x3c
     814:	9d ad       	ldd	r25, Y+61	; 0x3d
     816:	9f af       	std	Y+63, r25	; 0x3f
     818:	8e af       	std	Y+62, r24	; 0x3e
     81a:	8e ad       	ldd	r24, Y+62	; 0x3e
     81c:	9f ad       	ldd	r25, Y+63	; 0x3f
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <lcd_init+0x400>
     822:	9f af       	std	Y+63, r25	; 0x3f
     824:	8e af       	std	Y+62, r24	; 0x3e
     826:	1c c0       	rjmp	.+56     	; 0x860 <lcd_init+0x442>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     828:	6d a1       	ldd	r22, Y+37	; 0x25
     82a:	7e a1       	ldd	r23, Y+38	; 0x26
     82c:	8f a1       	ldd	r24, Y+39	; 0x27
     82e:	98 a5       	ldd	r25, Y+40	; 0x28
     830:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	8d a7       	std	Y+45, r24	; 0x2d
     83a:	2d a5       	ldd	r18, Y+45	; 0x2d
     83c:	ce 01       	movw	r24, r28
     83e:	80 5c       	subi	r24, 0xC0	; 192
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	fc 01       	movw	r30, r24
     844:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     846:	ce 01       	movw	r24, r28
     848:	80 5c       	subi	r24, 0xC0	; 192
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	fc 01       	movw	r30, r24
     84e:	80 81       	ld	r24, Z
     850:	28 2f       	mov	r18, r24
     852:	2a 95       	dec	r18
     854:	f1 f7       	brne	.-4      	; 0x852 <lcd_init+0x434>
     856:	ce 01       	movw	r24, r28
     858:	80 5c       	subi	r24, 0xC0	; 192
     85a:	9f 4f       	sbci	r25, 0xFF	; 255
     85c:	fc 01       	movw	r30, r24
     85e:	20 83       	st	Z, r18
    _delay_us(50);
    
    // Clear het display
    lcd_send_command(lcd_commandos.clear);
     860:	80 91 3a 03 	lds	r24, 0x033A
     864:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_send_command>
     868:	9e 01       	movw	r18, r28
     86a:	2f 5b       	subi	r18, 0xBF	; 191
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e4       	ldi	r27, 0x40	; 64
     876:	f9 01       	movw	r30, r18
     878:	80 83       	st	Z, r24
     87a:	91 83       	std	Z+1, r25	; 0x01
     87c:	a2 83       	std	Z+2, r26	; 0x02
     87e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     880:	8e 01       	movw	r16, r28
     882:	0b 5b       	subi	r16, 0xBB	; 187
     884:	1f 4f       	sbci	r17, 0xFF	; 255
     886:	ce 01       	movw	r24, r28
     888:	8f 5b       	subi	r24, 0xBF	; 191
     88a:	9f 4f       	sbci	r25, 0xFF	; 255
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	4a e7       	ldi	r20, 0x7A	; 122
     892:	55 e4       	ldi	r21, 0x45	; 69
     894:	fc 01       	movw	r30, r24
     896:	60 81       	ld	r22, Z
     898:	71 81       	ldd	r23, Z+1	; 0x01
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	93 81       	ldd	r25, Z+3	; 0x03
     89e:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     8a2:	dc 01       	movw	r26, r24
     8a4:	cb 01       	movw	r24, r22
     8a6:	f8 01       	movw	r30, r16
     8a8:	80 83       	st	Z, r24
     8aa:	91 83       	std	Z+1, r25	; 0x01
     8ac:	a2 83       	std	Z+2, r26	; 0x02
     8ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8b0:	ce 01       	movw	r24, r28
     8b2:	8b 5b       	subi	r24, 0xBB	; 187
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e8       	ldi	r20, 0x80	; 128
     8bc:	5f e3       	ldi	r21, 0x3F	; 63
     8be:	fc 01       	movw	r30, r24
     8c0:	60 81       	ld	r22, Z
     8c2:	71 81       	ldd	r23, Z+1	; 0x01
     8c4:	82 81       	ldd	r24, Z+2	; 0x02
     8c6:	93 81       	ldd	r25, Z+3	; 0x03
     8c8:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
     8cc:	88 23       	and	r24, r24
     8ce:	4c f4       	brge	.+18     	; 0x8e2 <lcd_init+0x4c4>
		__ticks = 1;
     8d0:	ce 01       	movw	r24, r28
     8d2:	87 5b       	subi	r24, 0xB7	; 183
     8d4:	9f 4f       	sbci	r25, 0xFF	; 255
     8d6:	21 e0       	ldi	r18, 0x01	; 1
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	31 83       	std	Z+1, r19	; 0x01
     8de:	20 83       	st	Z, r18
     8e0:	6d c0       	rjmp	.+218    	; 0x9bc <__stack+0xbd>
	else if (__tmp > 65535)
     8e2:	ce 01       	movw	r24, r28
     8e4:	8b 5b       	subi	r24, 0xBB	; 187
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	3f ef       	ldi	r19, 0xFF	; 255
     8ec:	4f e7       	ldi	r20, 0x7F	; 127
     8ee:	57 e4       	ldi	r21, 0x47	; 71
     8f0:	fc 01       	movw	r30, r24
     8f2:	60 81       	ld	r22, Z
     8f4:	71 81       	ldd	r23, Z+1	; 0x01
     8f6:	82 81       	ldd	r24, Z+2	; 0x02
     8f8:	93 81       	ldd	r25, Z+3	; 0x03
     8fa:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
     8fe:	18 16       	cp	r1, r24
     900:	0c f0       	brlt	.+2      	; 0x904 <__stack+0x5>
     902:	4a c0       	rjmp	.+148    	; 0x998 <__stack+0x99>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     904:	ce 01       	movw	r24, r28
     906:	8f 5b       	subi	r24, 0xBF	; 191
     908:	9f 4f       	sbci	r25, 0xFF	; 255
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e2       	ldi	r20, 0x20	; 32
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	fc 01       	movw	r30, r24
     914:	60 81       	ld	r22, Z
     916:	71 81       	ldd	r23, Z+1	; 0x01
     918:	82 81       	ldd	r24, Z+2	; 0x02
     91a:	93 81       	ldd	r25, Z+3	; 0x03
     91c:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	8e 01       	movw	r16, r28
     926:	07 5b       	subi	r16, 0xB7	; 183
     928:	1f 4f       	sbci	r17, 0xFF	; 255
     92a:	bc 01       	movw	r22, r24
     92c:	cd 01       	movw	r24, r26
     92e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	f8 01       	movw	r30, r16
     938:	91 83       	std	Z+1, r25	; 0x01
     93a:	80 83       	st	Z, r24
     93c:	24 c0       	rjmp	.+72     	; 0x986 <__stack+0x87>
     93e:	ce 01       	movw	r24, r28
     940:	85 5b       	subi	r24, 0xB5	; 181
     942:	9f 4f       	sbci	r25, 0xFF	; 255
     944:	20 e9       	ldi	r18, 0x90	; 144
     946:	31 e0       	ldi	r19, 0x01	; 1
     948:	fc 01       	movw	r30, r24
     94a:	31 83       	std	Z+1, r19	; 0x01
     94c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     94e:	ce 01       	movw	r24, r28
     950:	85 5b       	subi	r24, 0xB5	; 181
     952:	9f 4f       	sbci	r25, 0xFF	; 255
     954:	fc 01       	movw	r30, r24
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <__stack+0x5b>
     95e:	9e 01       	movw	r18, r28
     960:	25 5b       	subi	r18, 0xB5	; 181
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	f9 01       	movw	r30, r18
     966:	91 83       	std	Z+1, r25	; 0x01
     968:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     96a:	ce 01       	movw	r24, r28
     96c:	87 5b       	subi	r24, 0xB7	; 183
     96e:	9f 4f       	sbci	r25, 0xFF	; 255
     970:	9e 01       	movw	r18, r28
     972:	27 5b       	subi	r18, 0xB7	; 183
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	f9 01       	movw	r30, r18
     978:	20 81       	ld	r18, Z
     97a:	31 81       	ldd	r19, Z+1	; 0x01
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	31 09       	sbc	r19, r1
     980:	fc 01       	movw	r30, r24
     982:	31 83       	std	Z+1, r19	; 0x01
     984:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     986:	ce 01       	movw	r24, r28
     988:	87 5b       	subi	r24, 0xB7	; 183
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	fc 01       	movw	r30, r24
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	a1 f6       	brne	.-88     	; 0x93e <__stack+0x3f>
     996:	2c c0       	rjmp	.+88     	; 0x9f0 <__stack+0xf1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     998:	8e 01       	movw	r16, r28
     99a:	07 5b       	subi	r16, 0xB7	; 183
     99c:	1f 4f       	sbci	r17, 0xFF	; 255
     99e:	ce 01       	movw	r24, r28
     9a0:	8b 5b       	subi	r24, 0xBB	; 187
     9a2:	9f 4f       	sbci	r25, 0xFF	; 255
     9a4:	fc 01       	movw	r30, r24
     9a6:	60 81       	ld	r22, Z
     9a8:	71 81       	ldd	r23, Z+1	; 0x01
     9aa:	82 81       	ldd	r24, Z+2	; 0x02
     9ac:	93 81       	ldd	r25, Z+3	; 0x03
     9ae:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	f8 01       	movw	r30, r16
     9b8:	91 83       	std	Z+1, r25	; 0x01
     9ba:	80 83       	st	Z, r24
     9bc:	ce 01       	movw	r24, r28
     9be:	83 5b       	subi	r24, 0xB3	; 179
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	9e 01       	movw	r18, r28
     9c4:	27 5b       	subi	r18, 0xB7	; 183
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	f9 01       	movw	r30, r18
     9ca:	20 81       	ld	r18, Z
     9cc:	31 81       	ldd	r19, Z+1	; 0x01
     9ce:	fc 01       	movw	r30, r24
     9d0:	31 83       	std	Z+1, r19	; 0x01
     9d2:	20 83       	st	Z, r18
     9d4:	ce 01       	movw	r24, r28
     9d6:	83 5b       	subi	r24, 0xB3	; 179
     9d8:	9f 4f       	sbci	r25, 0xFF	; 255
     9da:	fc 01       	movw	r30, r24
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <__stack+0xe1>
     9e4:	9e 01       	movw	r18, r28
     9e6:	23 5b       	subi	r18, 0xB3	; 179
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	f9 01       	movw	r30, r18
     9ec:	91 83       	std	Z+1, r25	; 0x01
     9ee:	80 83       	st	Z, r24
    _delay_ms(2);
    
    // Entry mode
    lcd_send_command(lcd_commandos.cursor_forward);
     9f0:	80 91 3c 03 	lds	r24, 0x033C
     9f4:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_send_command>
}
     9f8:	c2 5b       	subi	r28, 0xB2	; 178
     9fa:	df 4f       	sbci	r29, 0xFF	; 255
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <lcd_write>:

// Methode om de juiste waardes op de poorten te zetten
void lcd_write(uint8_t value)
{
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	89 83       	std	Y+1, r24	; 0x01
    Poort |= (1 << RS);
    Poort &= ~(1 << RW);
    
    
    */
}
     a1c:	0f 90       	pop	r0
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <lcd_send_command>:

// Methode om een commando uit de struct te sturen
void lcd_send_command(uint8_t control)
{
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	1f 92       	push	r1
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	89 83       	std	Y+1, r24	; 0x01
    // Zet lezen en schrijven uit
    // Poort &= ~((1 << RW) | (1 << RS));
    
    // Schrijf het commando weg op de output poorten
    
}
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <lcd_send_character>:

// Methode om een character op het display te zetten
void lcd_send_character(char character, int is_letter)
{
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <lcd_send_character+0x6>
     a3e:	00 d0       	rcall	.+0      	; 0xa40 <lcd_send_character+0x8>
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	8a 83       	std	Y+2, r24	; 0x02
     a46:	7c 83       	std	Y+4, r23	; 0x04
     a48:	6b 83       	std	Y+3, r22	; 0x03
    // Int voor het versturen van het character
    uint8_t data;
    
    // Schrijft het character weg in de low byte
    if (is_letter) {
     a4a:	8b 81       	ldd	r24, Y+3	; 0x03
     a4c:	9c 81       	ldd	r25, Y+4	; 0x04
     a4e:	00 97       	sbiw	r24, 0x00	; 0
     a50:	49 f4       	brne	.+18     	; 0xa64 <lcd_send_character+0x2c>
        // Character A is gelijk aan het getal 97 (ASCII)
        // data = lcd_letter_characters[character - 97];
    } else {
        // Character 0 is gelijk aan het getal 48 (ASCII)
        data = lcd_number_characters[character - 48];
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	88 2f       	mov	r24, r24
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	c0 97       	sbiw	r24, 0x30	; 48
     a5a:	8e 5e       	subi	r24, 0xEE	; 238
     a5c:	9e 4f       	sbci	r25, 0xFE	; 254
     a5e:	fc 01       	movw	r30, r24
     a60:	80 81       	ld	r24, Z
     a62:	89 83       	std	Y+1, r24	; 0x01
    }
    
    // Schrijft de write command weg op de output poorten
    lcd_write(data);
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	0e 94 08 05 	call	0xa10	; 0xa10 <lcd_write>
    
    // Schuift de cursor een plaats op
    lcd_send_command(lcd_commandos.cursor_forward);
     a6a:	80 91 3c 03 	lds	r24, 0x033C
     a6e:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_send_command>
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <main>:

// Geeft aan met nul en 1 of iemand geauthoriseerd is
uint8_t authorised = 1;

// De main methode voor het uitvoeren van de acties
int main(void) {
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	c9 52       	subi	r28, 0x29	; 41
     a8a:	d2 40       	sbci	r29, 0x02	; 2
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
    // Geen interrupts voor het instellen van de node
    cli();
     a96:	f8 94       	cli
    
    // Schakel timer overflow interrupts in
    TIMSK1 |= (1 << TOIE1);
     a98:	8f e6       	ldi	r24, 0x6F	; 111
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	2f e6       	ldi	r18, 0x6F	; 111
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	f9 01       	movw	r30, r18
     aa2:	20 81       	ld	r18, Z
     aa4:	21 60       	ori	r18, 0x01	; 1
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
    
    // Stel de timer in met prescaler 1024
    TCCR1B |= ((1 << CS12) | (1 << CS10));
     aaa:	81 e8       	ldi	r24, 0x81	; 129
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	21 e8       	ldi	r18, 0x81	; 129
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	25 60       	ori	r18, 0x05	; 5
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
    
    // Led poort op output
    DDRD |= (1 << LED);
     abc:	8a e2       	ldi	r24, 0x2A	; 42
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	2a e2       	ldi	r18, 0x2A	; 42
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	f9 01       	movw	r30, r18
     ac6:	20 81       	ld	r18, Z
     ac8:	20 68       	ori	r18, 0x80	; 128
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
    
    // Buzzer poort op output
    DDRD |= (1 << BUZZER);
     ace:	8a e2       	ldi	r24, 0x2A	; 42
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	2a e2       	ldi	r18, 0x2A	; 42
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	f9 01       	movw	r30, r18
     ad8:	20 81       	ld	r18, Z
     ada:	20 64       	ori	r18, 0x40	; 64
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18

    // Zet USART op
    usart_init(9600);
     ae0:	80 e8       	ldi	r24, 0x80	; 128
     ae2:	95 e2       	ldi	r25, 0x25	; 37
     ae4:	0e 94 92 0b 	call	0x1724	; 0x1724 <usart_init>
    
     // Stdin/stdout lezen en schrijven via uart
    stdout = stdin = &uart;
     ae8:	8c e1       	ldi	r24, 0x1C	; 28
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	90 93 43 03 	sts	0x0343, r25
     af0:	80 93 42 03 	sts	0x0342, r24
     af4:	80 91 42 03 	lds	r24, 0x0342
     af8:	90 91 43 03 	lds	r25, 0x0343
     afc:	90 93 45 03 	sts	0x0345, r25
     b00:	80 93 44 03 	sts	0x0344, r24
	
    // Zet SPI op
    spi_init();
     b04:	0e 94 76 08 	call	0x10ec	; 0x10ec <spi_init>
    
    // Zet en configureer het lcd display
    lcd_init();
     b08:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_init>
    
     // Configureert de wiznet
    initWiznet();
     b0c:	0e 94 5e 00 	call	0xbc	; 0xbc <initWiznet>
    
    // Configureert de netwerk instellingen
    set_gateway();
     b10:	0e 94 74 00 	call	0xe8	; 0xe8 <set_gateway>
    set_submask();
     b14:	0e 94 97 00 	call	0x12e	; 0x12e <set_submask>
    set_macaddress();
     b18:	0e 94 ba 00 	call	0x174	; 0x174 <set_macaddress>
    set_ipaddress();
     b1c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <set_ipaddress>
	
    // Print de instellingen
    print_status();
     b20:	0e 94 00 01 	call	0x200	; 0x200 <print_status>

    // Buffer voor het ontvangen en versturen van data
    uint8_t receiveddata[512];
    
    // Zend een register bij startup
    udp_broadcast(reg, "Register", 8);
     b24:	48 e0       	ldi	r20, 0x08	; 8
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	6d e1       	ldi	r22, 0x1D	; 29
     b2a:	72 e0       	ldi	r23, 0x02	; 2
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <udp_broadcast>
    
    // Zet interrupts aan voor het alarm
    sei();
     b32:	78 94       	sei
    
    while(1) {
        // Lees de status van zowel de udp als tcp socket
        uint8_t udpstatus = spi_receive(S0SR);
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	94 e0       	ldi	r25, 0x04	; 4
     b38:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     b3c:	89 83       	std	Y+1, r24	; 0x01
        uint8_t tcpstatus = spi_receive(S1SR);
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     b46:	8a 83       	std	Y+2, r24	; 0x02
        
        switch (udpstatus) {
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	88 2f       	mov	r24, r24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	21 f0       	breq	.+8      	; 0xb5a <main+0xda>
     b52:	82 32       	cpi	r24, 0x22	; 34
     b54:	91 05       	cpc	r25, r1
     b56:	41 f0       	breq	.+16     	; 0xb68 <main+0xe8>
     b58:	2b c0       	rjmp	.+86     	; 0xbb0 <main+0x130>
            // Gesloten socket
            case SOCK_CLOSED:
#if DEBUG
                printf("UDP socket gesloten\n");
     b5a:	86 e2       	ldi	r24, 0x26	; 38
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	0e 94 8a 11 	call	0x2314	; 0x2314 <puts>
#endif
                // Maak een udp socket aan
                udp_create_socket();
     b62:	0e 94 31 0c 	call	0x1862	; 0x1862 <udp_create_socket>
                break;
     b66:	24 c0       	rjmp	.+72     	; 0xbb0 <main+0x130>
            
            // Werkende UDP socket
            case SOCK_UDP:
#if DEBUG
                printf("UDP socket geopend\n");
     b68:	8a e3       	ldi	r24, 0x3A	; 58
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 8a 11 	call	0x2314	; 0x2314 <puts>
#endif
                // Checkt op binenkomende data
                if(spi_receive(S0RXRSRH) || spi_receive(S0RXRSRL)){
     b70:	86 e2       	ldi	r24, 0x26	; 38
     b72:	94 e0       	ldi	r25, 0x04	; 4
     b74:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     b78:	88 23       	and	r24, r24
     b7a:	31 f4       	brne	.+12     	; 0xb88 <main+0x108>
     b7c:	87 e2       	ldi	r24, 0x27	; 39
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     b84:	88 23       	and	r24, r24
     b86:	99 f0       	breq	.+38     	; 0xbae <main+0x12e>
                    // Schrijft de binnenkomende data weg in de meegegeven buffer
                    // udp_from_monitor(receiveddata);
                    
#if DEBUG           // Print de data in de buffer
                    printf("\nUDP data ontvangen: %s\n", receiveddata);
     b88:	ce 01       	movw	r24, r28
     b8a:	8a 96       	adiw	r24, 0x2a	; 42
     b8c:	29 2f       	mov	r18, r25
     b8e:	2f 93       	push	r18
     b90:	8f 93       	push	r24
     b92:	8d e4       	ldi	r24, 0x4D	; 77
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	89 2f       	mov	r24, r25
     b98:	8f 93       	push	r24
     b9a:	8d e4       	ldi	r24, 0x4D	; 77
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	8f 93       	push	r24
     ba0:	0e 94 76 11 	call	0x22ec	; 0x22ec <printf>
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
#endif                
                }
            
                break;
     bac:	00 c0       	rjmp	.+0      	; 0xbae <main+0x12e>
     bae:	00 00       	nop
        }
        
        switch (tcpstatus) {
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	84 31       	cpi	r24, 0x14	; 20
     bb8:	91 05       	cpc	r25, r1
     bba:	f9 f0       	breq	.+62     	; 0xbfa <main+0x17a>
     bbc:	85 31       	cpi	r24, 0x15	; 21
     bbe:	91 05       	cpc	r25, r1
     bc0:	34 f4       	brge	.+12     	; 0xbce <main+0x14e>
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	61 f0       	breq	.+24     	; 0xbde <main+0x15e>
     bc6:	83 31       	cpi	r24, 0x13	; 19
     bc8:	91 05       	cpc	r25, r1
     bca:	81 f0       	breq	.+32     	; 0xbec <main+0x16c>
     bcc:	e7 c1       	rjmp	.+974    	; 0xf9c <main+0x51c>
     bce:	87 31       	cpi	r24, 0x17	; 23
     bd0:	91 05       	cpc	r25, r1
     bd2:	c1 f0       	breq	.+48     	; 0xc04 <main+0x184>
     bd4:	8c 31       	cpi	r24, 0x1C	; 28
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <main+0x15c>
     bda:	d8 c1       	rjmp	.+944    	; 0xf8c <main+0x50c>
     bdc:	df c1       	rjmp	.+958    	; 0xf9c <main+0x51c>
            // Gesloten socket
            case SOCK_CLOSED:
#if DEBUG
                printf("TCP socket gesloten\n");
     bde:	86 e6       	ldi	r24, 0x66	; 102
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	0e 94 8a 11 	call	0x2314	; 0x2314 <puts>
#endif
                // Maak een tcp socket aan
                tcp_create_socket();
     be6:	0e 94 2f 09 	call	0x125e	; 0x125e <tcp_create_socket>
                
                break;
     bea:	d8 c1       	rjmp	.+944    	; 0xf9c <main+0x51c>
       
            // TCP socket geinitialiseerd
            case SOCK_INIT:
#if DEBUG
                printf("TCP socket geopend\n");
     bec:	8a e7       	ldi	r24, 0x7A	; 122
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 8a 11 	call	0x2314	; 0x2314 <puts>
#endif
                // Luister naar binnenkomende request
                tcp_listen();
     bf4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <tcp_listen>
                
                break;
     bf8:	d1 c1       	rjmp	.+930    	; 0xf9c <main+0x51c>
            
            // TCP serversocket listen
            case SOCK_LISTEN:
#if DEBUG
                printf("TCPServer luisteren\n");
     bfa:	8d e8       	ldi	r24, 0x8D	; 141
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 8a 11 	call	0x2314	; 0x2314 <puts>
#endif
                
                break;
     c02:	cc c1       	rjmp	.+920    	; 0xf9c <main+0x51c>
            
            // TCP verbinding opgezet
            case SOCK_ESTABLISHED:
#if DEBUG
                printf("TCP verbinding opgezet\n");
     c04:	81 ea       	ldi	r24, 0xA1	; 161
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 8a 11 	call	0x2314	; 0x2314 <puts>
#endif
                // Checkt op binenkomende data
                if(spi_receive(S1RXRSRH) || spi_receive(S1RXRSRL)) {
     c0c:	86 e2       	ldi	r24, 0x26	; 38
     c0e:	95 e0       	ldi	r25, 0x05	; 5
     c10:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     c14:	88 23       	and	r24, r24
     c16:	39 f4       	brne	.+14     	; 0xc26 <main+0x1a6>
     c18:	87 e2       	ldi	r24, 0x27	; 39
     c1a:	95 e0       	ldi	r25, 0x05	; 5
     c1c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
     c20:	88 23       	and	r24, r24
     c22:	09 f4       	brne	.+2      	; 0xc26 <main+0x1a6>
     c24:	b2 c1       	rjmp	.+868    	; 0xf8a <main+0x50a>
                    // Schrijft de binnenkomende data weg in de meegegeven buffer
                    tcp_from_monitor(receiveddata);
     c26:	ce 01       	movw	r24, r28
     c28:	8a 96       	adiw	r24, 0x2a	; 42
     c2a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <tcp_from_monitor>
                    
#if DEBUG           // Print de data in de buffer
                    printf("\nTCP data ontvangen: %s\n", receiveddata);
     c2e:	ce 01       	movw	r24, r28
     c30:	8a 96       	adiw	r24, 0x2a	; 42
     c32:	29 2f       	mov	r18, r25
     c34:	2f 93       	push	r18
     c36:	8f 93       	push	r24
     c38:	88 eb       	ldi	r24, 0xB8	; 184
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	89 2f       	mov	r24, r25
     c3e:	8f 93       	push	r24
     c40:	88 eb       	ldi	r24, 0xB8	; 184
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	8f 93       	push	r24
     c46:	0e 94 76 11 	call	0x22ec	; 0x22ec <printf>
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
#endif
                    // Stuur een acknowledge
                    uint8_t flag = receiveddata[0];
     c52:	8a a5       	ldd	r24, Y+42	; 0x2a
     c54:	8b 83       	std	Y+3, r24	; 0x03
                    uint16_t messagenumber = (receiveddata[1] << 8) | receiveddata[2];
     c56:	8b a5       	ldd	r24, Y+43	; 0x2b
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	38 2f       	mov	r19, r24
     c5e:	22 27       	eor	r18, r18
     c60:	8c a5       	ldd	r24, Y+44	; 0x2c
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	82 2b       	or	r24, r18
     c68:	93 2b       	or	r25, r19
     c6a:	9d 83       	std	Y+5, r25	; 0x05
     c6c:	8c 83       	std	Y+4, r24	; 0x04
                    
                    switch (flag) {
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	aa 27       	eor	r26, r26
     c76:	97 fd       	sbrc	r25, 7
     c78:	a0 95       	com	r26
     c7a:	ba 2f       	mov	r27, r26
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	2a e0       	ldi	r18, 0x0A	; 10
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	84 1b       	sub	r24, r20
     c86:	95 0b       	sbc	r25, r21
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <main+0x210>
     c8e:	85 c1       	rjmp	.+778    	; 0xf9a <main+0x51a>
     c90:	8c 5c       	subi	r24, 0xCC	; 204
     c92:	9f 4f       	sbci	r25, 0xFF	; 255
     c94:	fc 01       	movw	r30, r24
     c96:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__tablejump2__>
                            break;
                        case login:
                            // check password
                            // Telt het aantal matchende characters
                            while (password[index][counter] == receiveddata[counter + 3]) {
                                ++counter;
     c9a:	80 91 36 03 	lds	r24, 0x0336
     c9e:	90 91 37 03 	lds	r25, 0x0337
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	90 93 37 03 	sts	0x0337, r25
     ca8:	80 93 36 03 	sts	0x0336, r24
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <main+0x230>
                            }
                            break;
                        case login:
                            // check password
                            // Telt het aantal matchende characters
                            while (password[index][counter] == receiveddata[counter + 3]) {
     cae:	00 00       	nop
     cb0:	80 91 34 03 	lds	r24, 0x0334
     cb4:	90 91 35 03 	lds	r25, 0x0335
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	86 5d       	subi	r24, 0xD6	; 214
     cbe:	9e 4f       	sbci	r25, 0xFE	; 254
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 81       	ld	r18, Z
     cc4:	31 81       	ldd	r19, Z+1	; 0x01
     cc6:	80 91 36 03 	lds	r24, 0x0336
     cca:	90 91 37 03 	lds	r25, 0x0337
     cce:	82 0f       	add	r24, r18
     cd0:	93 1f       	adc	r25, r19
     cd2:	fc 01       	movw	r30, r24
     cd4:	40 81       	ld	r20, Z
     cd6:	80 91 36 03 	lds	r24, 0x0336
     cda:	90 91 37 03 	lds	r25, 0x0337
     cde:	03 96       	adiw	r24, 0x03	; 3
     ce0:	9e 01       	movw	r18, r28
     ce2:	26 5d       	subi	r18, 0xD6	; 214
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	fc 01       	movw	r30, r24
     cec:	80 81       	ld	r24, Z
     cee:	48 17       	cp	r20, r24
     cf0:	a1 f2       	breq	.-88     	; 0xc9a <main+0x21a>
                                ++counter;
                            }
                            
                            // Checkt of er 9 characters zijn geteld
                            // 8 van het wachtwoord + 1 niet matchend character
                            if (counter == 9) {
     cf2:	80 91 36 03 	lds	r24, 0x0336
     cf6:	90 91 37 03 	lds	r25, 0x0337
     cfa:	89 30       	cpi	r24, 0x09	; 9
     cfc:	91 05       	cpc	r25, r1
     cfe:	41 f4       	brne	.+16     	; 0xd10 <main+0x290>
                                authorised = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	80 93 3c 01 	sts	0x013C, r24
                                printf("Gebruiker ingelogd\n");
     d06:	81 ed       	ldi	r24, 0xD1	; 209
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 8a 11 	call	0x2314	; 0x2314 <puts>
                            } else {
                                udp_broadcast(alarm, "Inbraak", 7);
                            }
                            
                            break;
     d0e:	3d c1       	rjmp	.+634    	; 0xf8a <main+0x50a>
                            // 8 van het wachtwoord + 1 niet matchend character
                            if (counter == 9) {
                                authorised = 1;
                                printf("Gebruiker ingelogd\n");
                            } else {
                                udp_broadcast(alarm, "Inbraak", 7);
     d10:	47 e0       	ldi	r20, 0x07	; 7
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	64 ee       	ldi	r22, 0xE4	; 228
     d16:	72 e0       	ldi	r23, 0x02	; 2
     d18:	86 e0       	ldi	r24, 0x06	; 6
     d1a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <udp_broadcast>
                            }
                            
                            break;
     d1e:	35 c1       	rjmp	.+618    	; 0xf8a <main+0x50a>
                        case buzz:
                            if(authorised) {
     d20:	80 91 3c 01 	lds	r24, 0x013C
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <main+0x2aa>
     d28:	cd c0       	rjmp	.+410    	; 0xec4 <main+0x444>
                                // laat buzzer afgaan voor time
                                uint32_t time = receiveddata[3] << 24;
     d2a:	8d a5       	ldd	r24, Y+45	; 0x2d
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	99 27       	eor	r25, r25
     d32:	88 27       	eor	r24, r24
     d34:	aa 27       	eor	r26, r26
     d36:	97 fd       	sbrc	r25, 7
     d38:	a0 95       	com	r26
     d3a:	ba 2f       	mov	r27, r26
     d3c:	8e 83       	std	Y+6, r24	; 0x06
     d3e:	9f 83       	std	Y+7, r25	; 0x07
     d40:	a8 87       	std	Y+8, r26	; 0x08
     d42:	b9 87       	std	Y+9, r27	; 0x09
                                time |= receiveddata[4] << 16;
     d44:	8e a5       	ldd	r24, Y+46	; 0x2e
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	99 27       	eor	r25, r25
     d4c:	88 27       	eor	r24, r24
     d4e:	aa 27       	eor	r26, r26
     d50:	97 fd       	sbrc	r25, 7
     d52:	a0 95       	com	r26
     d54:	ba 2f       	mov	r27, r26
     d56:	2e 81       	ldd	r18, Y+6	; 0x06
     d58:	3f 81       	ldd	r19, Y+7	; 0x07
     d5a:	48 85       	ldd	r20, Y+8	; 0x08
     d5c:	59 85       	ldd	r21, Y+9	; 0x09
     d5e:	82 2b       	or	r24, r18
     d60:	93 2b       	or	r25, r19
     d62:	a4 2b       	or	r26, r20
     d64:	b5 2b       	or	r27, r21
     d66:	8e 83       	std	Y+6, r24	; 0x06
     d68:	9f 83       	std	Y+7, r25	; 0x07
     d6a:	a8 87       	std	Y+8, r26	; 0x08
     d6c:	b9 87       	std	Y+9, r27	; 0x09
                                time |= receiveddata[5] << 8;
     d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	98 2f       	mov	r25, r24
     d76:	88 27       	eor	r24, r24
     d78:	aa 27       	eor	r26, r26
     d7a:	97 fd       	sbrc	r25, 7
     d7c:	a0 95       	com	r26
     d7e:	ba 2f       	mov	r27, r26
     d80:	2e 81       	ldd	r18, Y+6	; 0x06
     d82:	3f 81       	ldd	r19, Y+7	; 0x07
     d84:	48 85       	ldd	r20, Y+8	; 0x08
     d86:	59 85       	ldd	r21, Y+9	; 0x09
     d88:	82 2b       	or	r24, r18
     d8a:	93 2b       	or	r25, r19
     d8c:	a4 2b       	or	r26, r20
     d8e:	b5 2b       	or	r27, r21
     d90:	8e 83       	std	Y+6, r24	; 0x06
     d92:	9f 83       	std	Y+7, r25	; 0x07
     d94:	a8 87       	std	Y+8, r26	; 0x08
     d96:	b9 87       	std	Y+9, r27	; 0x09
                                time |= receiveddata[6];
     d98:	88 a9       	ldd	r24, Y+48	; 0x30
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a0 e0       	ldi	r26, 0x00	; 0
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	2e 81       	ldd	r18, Y+6	; 0x06
     da4:	3f 81       	ldd	r19, Y+7	; 0x07
     da6:	48 85       	ldd	r20, Y+8	; 0x08
     da8:	59 85       	ldd	r21, Y+9	; 0x09
     daa:	82 2b       	or	r24, r18
     dac:	93 2b       	or	r25, r19
     dae:	a4 2b       	or	r26, r20
     db0:	b5 2b       	or	r27, r21
     db2:	8e 83       	std	Y+6, r24	; 0x06
     db4:	9f 83       	std	Y+7, r25	; 0x07
     db6:	a8 87       	std	Y+8, r26	; 0x08
     db8:	b9 87       	std	Y+9, r27	; 0x09

                                // Zet de buzzer aan
                                PORTD |= (1 << BUZZER);
     dba:	8b e2       	ldi	r24, 0x2B	; 43
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	2b e2       	ldi	r18, 0x2B	; 43
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	f9 01       	movw	r30, r18
     dc4:	20 81       	ld	r18, Z
     dc6:	20 64       	ori	r18, 0x40	; 64
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	aa ef       	ldi	r26, 0xFA	; 250
     dd2:	b4 e4       	ldi	r27, 0x44	; 68
     dd4:	8e 87       	std	Y+14, r24	; 0x0e
     dd6:	9f 87       	std	Y+15, r25	; 0x0f
     dd8:	a8 8b       	std	Y+16, r26	; 0x10
     dda:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	4a e7       	ldi	r20, 0x7A	; 122
     de2:	55 e4       	ldi	r21, 0x45	; 69
     de4:	6e 85       	ldd	r22, Y+14	; 0x0e
     de6:	7f 85       	ldd	r23, Y+15	; 0x0f
     de8:	88 89       	ldd	r24, Y+16	; 0x10
     dea:	99 89       	ldd	r25, Y+17	; 0x11
     dec:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	8a 8b       	std	Y+18, r24	; 0x12
     df6:	9b 8b       	std	Y+19, r25	; 0x13
     df8:	ac 8b       	std	Y+20, r26	; 0x14
     dfa:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e8       	ldi	r20, 0x80	; 128
     e02:	5f e3       	ldi	r21, 0x3F	; 63
     e04:	6a 89       	ldd	r22, Y+18	; 0x12
     e06:	7b 89       	ldd	r23, Y+19	; 0x13
     e08:	8c 89       	ldd	r24, Y+20	; 0x14
     e0a:	9d 89       	ldd	r25, Y+21	; 0x15
     e0c:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
     e10:	88 23       	and	r24, r24
     e12:	2c f4       	brge	.+10     	; 0xe1e <main+0x39e>
		__ticks = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9f 8b       	std	Y+23, r25	; 0x17
     e1a:	8e 8b       	std	Y+22, r24	; 0x16
     e1c:	3f c0       	rjmp	.+126    	; 0xe9c <main+0x41c>
	else if (__tmp > 65535)
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	3f ef       	ldi	r19, 0xFF	; 255
     e22:	4f e7       	ldi	r20, 0x7F	; 127
     e24:	57 e4       	ldi	r21, 0x47	; 71
     e26:	6a 89       	ldd	r22, Y+18	; 0x12
     e28:	7b 89       	ldd	r23, Y+19	; 0x13
     e2a:	8c 89       	ldd	r24, Y+20	; 0x14
     e2c:	9d 89       	ldd	r25, Y+21	; 0x15
     e2e:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
     e32:	18 16       	cp	r1, r24
     e34:	4c f5       	brge	.+82     	; 0xe88 <main+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e2       	ldi	r20, 0x20	; 32
     e3c:	51 e4       	ldi	r21, 0x41	; 65
     e3e:	6e 85       	ldd	r22, Y+14	; 0x0e
     e40:	7f 85       	ldd	r23, Y+15	; 0x0f
     e42:	88 89       	ldd	r24, Y+16	; 0x10
     e44:	99 89       	ldd	r25, Y+17	; 0x11
     e46:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	9f 8b       	std	Y+23, r25	; 0x17
     e5c:	8e 8b       	std	Y+22, r24	; 0x16
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <main+0x3fe>
     e60:	80 e9       	ldi	r24, 0x90	; 144
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	99 8f       	std	Y+25, r25	; 0x19
     e66:	88 8f       	std	Y+24, r24	; 0x18
     e68:	88 8d       	ldd	r24, Y+24	; 0x18
     e6a:	99 8d       	ldd	r25, Y+25	; 0x19
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <main+0x3ec>
     e70:	99 8f       	std	Y+25, r25	; 0x19
     e72:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e74:	8e 89       	ldd	r24, Y+22	; 0x16
     e76:	9f 89       	ldd	r25, Y+23	; 0x17
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	9f 8b       	std	Y+23, r25	; 0x17
     e7c:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7e:	8e 89       	ldd	r24, Y+22	; 0x16
     e80:	9f 89       	ldd	r25, Y+23	; 0x17
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	69 f7       	brne	.-38     	; 0xe60 <main+0x3e0>
     e86:	14 c0       	rjmp	.+40     	; 0xeb0 <main+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e88:	6a 89       	ldd	r22, Y+18	; 0x12
     e8a:	7b 89       	ldd	r23, Y+19	; 0x13
     e8c:	8c 89       	ldd	r24, Y+20	; 0x14
     e8e:	9d 89       	ldd	r25, Y+21	; 0x15
     e90:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	9f 8b       	std	Y+23, r25	; 0x17
     e9a:	8e 8b       	std	Y+22, r24	; 0x16
     e9c:	8e 89       	ldd	r24, Y+22	; 0x16
     e9e:	9f 89       	ldd	r25, Y+23	; 0x17
     ea0:	9b 8f       	std	Y+27, r25	; 0x1b
     ea2:	8a 8f       	std	Y+26, r24	; 0x1a
     ea4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ea6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <main+0x428>
     eac:	9b 8f       	std	Y+27, r25	; 0x1b
     eae:	8a 8f       	std	Y+26, r24	; 0x1a
                                
                                // delay
                                _delay_ms(2000);
                                
                                // Zet de buzzer uit
                                PORTD &= ~(1 << BUZZER);
     eb0:	8b e2       	ldi	r24, 0x2B	; 43
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	2b e2       	ldi	r18, 0x2B	; 43
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	f9 01       	movw	r30, r18
     eba:	20 81       	ld	r18, Z
     ebc:	2f 7b       	andi	r18, 0xBF	; 191
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 83       	st	Z, r18
                            }
                            break;
     ec2:	63 c0       	rjmp	.+198    	; 0xf8a <main+0x50a>
     ec4:	62 c0       	rjmp	.+196    	; 0xf8a <main+0x50a>
                        case lamp:
                            if(authorised) {
     ec6:	80 91 3c 01 	lds	r24, 0x013C
     eca:	88 23       	and	r24, r24
     ecc:	c9 f0       	breq	.+50     	; 0xf00 <main+0x480>
                                // zet led aan
                                uint8_t on = receiveddata[3];
     ece:	8d a5       	ldd	r24, Y+45	; 0x2d
     ed0:	8a 87       	std	Y+10, r24	; 0x0a
                                if (on) {
     ed2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ed4:	88 23       	and	r24, r24
     ed6:	51 f0       	breq	.+20     	; 0xeec <main+0x46c>
                                    // zet led aan
                                    PORTD |= (1 << LED);
     ed8:	8b e2       	ldi	r24, 0x2B	; 43
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	2b e2       	ldi	r18, 0x2B	; 43
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	f9 01       	movw	r30, r18
     ee2:	20 81       	ld	r18, Z
     ee4:	20 68       	ori	r18, 0x80	; 128
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 83       	st	Z, r18
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <main+0x480>
                                } else {
                                    // zet led uit
                                    PORTD &= ~(1 << LED);
     eec:	8b e2       	ldi	r24, 0x2B	; 43
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	2b e2       	ldi	r18, 0x2B	; 43
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	f9 01       	movw	r30, r18
     ef6:	20 81       	ld	r18, Z
     ef8:	2f 77       	andi	r18, 0x7F	; 127
     efa:	fc 01       	movw	r30, r24
     efc:	20 83       	st	Z, r18
                                }
                            }
                            break;
     efe:	45 c0       	rjmp	.+138    	; 0xf8a <main+0x50a>
     f00:	44 c0       	rjmp	.+136    	; 0xf8a <main+0x50a>
                        case arm:
                            if(authorised) {
     f02:	80 91 3c 01 	lds	r24, 0x013C
     f06:	88 23       	and	r24, r24
     f08:	c9 f0       	breq	.+50     	; 0xf3c <main+0x4bc>
                                uint8_t on = receiveddata[3];
     f0a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f0c:	8b 87       	std	Y+11, r24	; 0x0b
                                if (on) {
     f0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f10:	88 23       	and	r24, r24
     f12:	51 f0       	breq	.+20     	; 0xf28 <main+0x4a8>
                                    // Schakel de timer interrupt in, de tiltsensor wordt weer gecheckt
                                    TIMSK1 |= (1 << TOIE1);
     f14:	8f e6       	ldi	r24, 0x6F	; 111
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	2f e6       	ldi	r18, 0x6F	; 111
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	f9 01       	movw	r30, r18
     f1e:	20 81       	ld	r18, Z
     f20:	21 60       	ori	r18, 0x01	; 1
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18
     f26:	0a c0       	rjmp	.+20     	; 0xf3c <main+0x4bc>
                                } else {
                                    // Schakel de timer interrupt uit, de tiltsensor wordt niet gecheckt
                                    TIMSK1 &= ~(1 << TOIE1);
     f28:	8f e6       	ldi	r24, 0x6F	; 111
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	2f e6       	ldi	r18, 0x6F	; 111
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	f9 01       	movw	r30, r18
     f32:	20 81       	ld	r18, Z
     f34:	2e 7f       	andi	r18, 0xFE	; 254
     f36:	fc 01       	movw	r30, r24
     f38:	20 83       	st	Z, r18
                                }
                            }
                            break;
     f3a:	27 c0       	rjmp	.+78     	; 0xf8a <main+0x50a>
     f3c:	26 c0       	rjmp	.+76     	; 0xf8a <main+0x50a>
                        case reset:
                            if(authorised) {
     f3e:	80 91 3c 01 	lds	r24, 0x013C
     f42:	88 23       	and	r24, r24
     f44:	89 f0       	breq	.+34     	; 0xf68 <main+0x4e8>
                                // Unregister de node
                                udp_broadcast(unr, "Unregister", 10);
     f46:	4a e0       	ldi	r20, 0x0A	; 10
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	6c ee       	ldi	r22, 0xEC	; 236
     f4c:	72 e0       	ldi	r23, 0x02	; 2
     f4e:	84 e0       	ldi	r24, 0x04	; 4
     f50:	0e 94 75 0c 	call	0x18ea	; 0x18ea <udp_broadcast>
                                
                                // Reset de node, instellingen worden hersteld
                                WDTCSR |= (1 << WDE);
     f54:	80 e6       	ldi	r24, 0x60	; 96
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	20 e6       	ldi	r18, 0x60	; 96
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	f9 01       	movw	r30, r18
     f5e:	20 81       	ld	r18, Z
     f60:	28 60       	ori	r18, 0x08	; 8
     f62:	fc 01       	movw	r30, r24
     f64:	20 83       	st	Z, r18
                            }
                            break;
     f66:	11 c0       	rjmp	.+34     	; 0xf8a <main+0x50a>
     f68:	10 c0       	rjmp	.+32     	; 0xf8a <main+0x50a>
                        case ping:
                            if(authorised) {
     f6a:	80 91 3c 01 	lds	r24, 0x013C
     f6e:	88 23       	and	r24, r24
     f70:	11 f0       	breq	.+4      	; 0xf76 <main+0x4f6>
                                uint8_t on = receiveddata[3];
     f72:	8d a5       	ldd	r24, Y+45	; 0x2d
     f74:	8c 87       	std	Y+12, r24	; 0x0c
                                    // ping
                                } else {
                                    // ??
                                }
                            }
                            break;
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <main+0x50a>
                            break;
                        case test:
                            // test flag, doet verder niet
                            break;
                        case receive:
                            if(authorised) {
     f78:	80 91 3c 01 	lds	r24, 0x013C
     f7c:	88 23       	and	r24, r24
     f7e:	19 f0       	breq	.+6      	; 0xf86 <main+0x506>
                                uint8_t flag = receiveddata[3];
     f80:	8d a5       	ldd	r24, Y+45	; 0x2d
     f82:	8d 87       	std	Y+13, r24	; 0x0d
                                // stuur status
                            }
                            break;
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <main+0x50a>
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <main+0x50a>
                            // doet verder niets
                            break;
                        case tcpnak:
                            // bericht door monitor niet goed ontvangen
                            // doet verder niets
                            break;
     f88:	00 00       	nop
                else {
                    // Stuur hallo monitor
                    // tcp_to_monitor(test, "Hallo Monitor", 13);
                }
                
                break;
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <main+0x51a>
            
            // TCP sluit request
            case SOCK_CLOSE_WAIT:
#if DEBUG
                printf("TCP close request ontvangen\n");
     f8c:	87 ef       	ldi	r24, 0xF7	; 247
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	0e 94 8a 11 	call	0x2314	; 0x2314 <puts>
                
                // Verhoogt de index voor een volgende wachtwoord
                // index  = (index * 50) % 10; 
                
                // Socket luistert naar nieuwe requests
                tcp_listen();
     f94:	0e 94 7f 09 	call	0x12fe	; 0x12fe <tcp_listen>
                
                break;
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <main+0x51c>
                else {
                    // Stuur hallo monitor
                    // tcp_to_monitor(test, "Hallo Monitor", 13);
                }
                
                break;
     f9a:	00 00       	nop
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	aa e7       	ldi	r26, 0x7A	; 122
     fa2:	b4 e4       	ldi	r27, 0x44	; 68
     fa4:	8c 8f       	std	Y+28, r24	; 0x1c
     fa6:	9d 8f       	std	Y+29, r25	; 0x1d
     fa8:	ae 8f       	std	Y+30, r26	; 0x1e
     faa:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	4a e7       	ldi	r20, 0x7A	; 122
     fb2:	55 e4       	ldi	r21, 0x45	; 69
     fb4:	6c 8d       	ldd	r22, Y+28	; 0x1c
     fb6:	7d 8d       	ldd	r23, Y+29	; 0x1d
     fb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fba:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fbc:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	88 a3       	std	Y+32, r24	; 0x20
     fc6:	99 a3       	std	Y+33, r25	; 0x21
     fc8:	aa a3       	std	Y+34, r26	; 0x22
     fca:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e8       	ldi	r20, 0x80	; 128
     fd2:	5f e3       	ldi	r21, 0x3F	; 63
     fd4:	68 a1       	ldd	r22, Y+32	; 0x20
     fd6:	79 a1       	ldd	r23, Y+33	; 0x21
     fd8:	8a a1       	ldd	r24, Y+34	; 0x22
     fda:	9b a1       	ldd	r25, Y+35	; 0x23
     fdc:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	2c f4       	brge	.+10     	; 0xfee <main+0x56e>
		__ticks = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9d a3       	std	Y+37, r25	; 0x25
     fea:	8c a3       	std	Y+36, r24	; 0x24
     fec:	3f c0       	rjmp	.+126    	; 0x106c <main+0x5ec>
	else if (__tmp > 65535)
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	3f ef       	ldi	r19, 0xFF	; 255
     ff2:	4f e7       	ldi	r20, 0x7F	; 127
     ff4:	57 e4       	ldi	r21, 0x47	; 71
     ff6:	68 a1       	ldd	r22, Y+32	; 0x20
     ff8:	79 a1       	ldd	r23, Y+33	; 0x21
     ffa:	8a a1       	ldd	r24, Y+34	; 0x22
     ffc:	9b a1       	ldd	r25, Y+35	; 0x23
     ffe:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
    1002:	18 16       	cp	r1, r24
    1004:	4c f5       	brge	.+82     	; 0x1058 <main+0x5d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e2       	ldi	r20, 0x20	; 32
    100c:	51 e4       	ldi	r21, 0x41	; 65
    100e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1010:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1012:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1014:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1016:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	9d a3       	std	Y+37, r25	; 0x25
    102c:	8c a3       	std	Y+36, r24	; 0x24
    102e:	0f c0       	rjmp	.+30     	; 0x104e <main+0x5ce>
    1030:	80 e9       	ldi	r24, 0x90	; 144
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	9f a3       	std	Y+39, r25	; 0x27
    1036:	8e a3       	std	Y+38, r24	; 0x26
    1038:	8e a1       	ldd	r24, Y+38	; 0x26
    103a:	9f a1       	ldd	r25, Y+39	; 0x27
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <main+0x5bc>
    1040:	9f a3       	std	Y+39, r25	; 0x27
    1042:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1044:	8c a1       	ldd	r24, Y+36	; 0x24
    1046:	9d a1       	ldd	r25, Y+37	; 0x25
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	9d a3       	std	Y+37, r25	; 0x25
    104c:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	8c a1       	ldd	r24, Y+36	; 0x24
    1050:	9d a1       	ldd	r25, Y+37	; 0x25
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	69 f7       	brne	.-38     	; 0x1030 <main+0x5b0>
                break;
        }
#if DEBUG
        _delay_ms(1000);
#endif
    }
    1056:	6e cd       	rjmp	.-1316   	; 0xb34 <main+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1058:	68 a1       	ldd	r22, Y+32	; 0x20
    105a:	79 a1       	ldd	r23, Y+33	; 0x21
    105c:	8a a1       	ldd	r24, Y+34	; 0x22
    105e:	9b a1       	ldd	r25, Y+35	; 0x23
    1060:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9d a3       	std	Y+37, r25	; 0x25
    106a:	8c a3       	std	Y+36, r24	; 0x24
    106c:	8c a1       	ldd	r24, Y+36	; 0x24
    106e:	9d a1       	ldd	r25, Y+37	; 0x25
    1070:	99 a7       	std	Y+41, r25	; 0x29
    1072:	88 a7       	std	Y+40, r24	; 0x28
    1074:	88 a5       	ldd	r24, Y+40	; 0x28
    1076:	99 a5       	ldd	r25, Y+41	; 0x29
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <main+0x5f8>
    107c:	99 a7       	std	Y+41, r25	; 0x29
    107e:	88 a7       	std	Y+40, r24	; 0x28
    1080:	59 cd       	rjmp	.-1358   	; 0xb34 <main+0xb4>

00001082 <__vector_13>:
    
	return 0;
}

// Timer interrupt, checkt of er op basis van de tiltsensor een alarm moet worden gegenereerd
ISR(TIMER1_OVF_vect) {
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	00 90 5f 00 	lds	r0, 0x005F
    108a:	0f 92       	push	r0
    108c:	11 24       	eor	r1, r1
    108e:	2f 93       	push	r18
    1090:	3f 93       	push	r19
    1092:	4f 93       	push	r20
    1094:	5f 93       	push	r21
    1096:	6f 93       	push	r22
    1098:	7f 93       	push	r23
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
        PORTD |= (1 << PORTD7);
        
        // Zet de buzzer aan
        PORTD |= (1 << PORTD6);
    } else {
        printf("BROADCAST\n");
    10ae:	83 e1       	ldi	r24, 0x13	; 19
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	0e 94 8a 11 	call	0x2314	; 0x2314 <puts>
        
        // Broadcast een alive
        udp_broadcast(alive, "Hallo Monitor", 13);
    10b6:	4d e0       	ldi	r20, 0x0D	; 13
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	6d e1       	ldi	r22, 0x1D	; 29
    10bc:	73 e0       	ldi	r23, 0x03	; 3
    10be:	85 e0       	ldi	r24, 0x05	; 5
    10c0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <udp_broadcast>
    }
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	00 92 5f 00 	sts	0x005F, r0
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <spi_init>:

#include <stdio.h>
#include "spi.h"

// Methode voor het opzetten van de SPI verbinding
void spi_init(void) {
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    // Zet de mosi, sck en ss lijnen op output voor het aansturen van de SPI verbinding
    DDR_SPI = ((1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_SS));
    10f4:	84 e2       	ldi	r24, 0x24	; 36
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	2c e2       	ldi	r18, 0x2C	; 44
    10fa:	fc 01       	movw	r30, r24
    10fc:	20 83       	st	Z, r18
    
    // Schrijft naar SPI control register
    // SPE bit voor SPI enable
    // MSTR bit voor het setten als master
    SPCR = ((1 << SPE) | (1 << MSTR));
    10fe:	8c e4       	ldi	r24, 0x4C	; 76
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	20 e5       	ldi	r18, 0x50	; 80
    1104:	fc 01       	movw	r30, r24
    1106:	20 83       	st	Z, r18
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <spi_transmit>:

// Methode om met behulp van SPI naar het ethernet shield te transmitten
void spi_transmit(uint16_t address, uint8_t data) {
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	00 d0       	rcall	.+0      	; 0x1114 <spi_transmit+0x6>
    1114:	1f 92       	push	r1
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6b 83       	std	Y+3, r22	; 0x03
    SPI_PORT &= ~(1 << SPI_CS);         // Activeert de slave en synchroniseerd
    1120:	85 e2       	ldi	r24, 0x25	; 37
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	25 e2       	ldi	r18, 0x25	; 37
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	f9 01       	movw	r30, r18
    112a:	20 81       	ld	r18, Z
    112c:	2b 7f       	andi	r18, 0xFB	; 251
    112e:	fc 01       	movw	r30, r24
    1130:	20 83       	st	Z, r18
    SPDR = 0xF0;                        // Verstuurt write commando voor transmitten
    1132:	8e e4       	ldi	r24, 0x4E	; 78
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	20 ef       	ldi	r18, 0xF0	; 240
    1138:	fc 01       	movw	r30, r24
    113a:	20 83       	st	Z, r18
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
    113c:	00 00       	nop
    113e:	8d e4       	ldi	r24, 0x4D	; 77
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	fc 01       	movw	r30, r24
    1144:	80 81       	ld	r24, Z
    1146:	88 23       	and	r24, r24
    1148:	d4 f7       	brge	.-12     	; 0x113e <spi_transmit+0x30>
    SPDR = address >> 8;                // Neemt de hoogste byte van het adres en stuurt deze
    114a:	8e e4       	ldi	r24, 0x4E	; 78
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	29 81       	ldd	r18, Y+1	; 0x01
    1150:	3a 81       	ldd	r19, Y+2	; 0x02
    1152:	23 2f       	mov	r18, r19
    1154:	33 27       	eor	r19, r19
    1156:	fc 01       	movw	r30, r24
    1158:	20 83       	st	Z, r18
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
    115a:	00 00       	nop
    115c:	8d e4       	ldi	r24, 0x4D	; 77
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	fc 01       	movw	r30, r24
    1162:	80 81       	ld	r24, Z
    1164:	88 23       	and	r24, r24
    1166:	d4 f7       	brge	.-12     	; 0x115c <spi_transmit+0x4e>
    SPDR = address;                     // Neemt de laagste byte van het adres en stuurt deze
    1168:	8e e4       	ldi	r24, 0x4E	; 78
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	29 81       	ldd	r18, Y+1	; 0x01
    116e:	fc 01       	movw	r30, r24
    1170:	20 83       	st	Z, r18
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
    1172:	00 00       	nop
    1174:	8d e4       	ldi	r24, 0x4D	; 77
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	fc 01       	movw	r30, r24
    117a:	80 81       	ld	r24, Z
    117c:	88 23       	and	r24, r24
    117e:	d4 f7       	brge	.-12     	; 0x1174 <spi_transmit+0x66>
    SPDR = data;                        // Verstuurt de data naar het adres
    1180:	8e e4       	ldi	r24, 0x4E	; 78
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	2b 81       	ldd	r18, Y+3	; 0x03
    1186:	fc 01       	movw	r30, r24
    1188:	20 83       	st	Z, r18
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
    118a:	00 00       	nop
    118c:	8d e4       	ldi	r24, 0x4D	; 77
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	fc 01       	movw	r30, r24
    1192:	80 81       	ld	r24, Z
    1194:	88 23       	and	r24, r24
    1196:	d4 f7       	brge	.-12     	; 0x118c <spi_transmit+0x7e>
    SPI_PORT |= (1<<SPI_CS);            // Deactiveerd de slave
    1198:	85 e2       	ldi	r24, 0x25	; 37
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	25 e2       	ldi	r18, 0x25	; 37
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	f9 01       	movw	r30, r18
    11a2:	20 81       	ld	r18, Z
    11a4:	24 60       	ori	r18, 0x04	; 4
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <spi_receive>:

// Methode om met behulp van SPI data van het ethernet shield te ontvangen
unsigned char spi_receive(uint16_t address) {
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <spi_receive+0x6>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
    SPI_PORT &= ~(1<<SPI_CS);           // Activeert de slave en synchroniseerd
    11c4:	85 e2       	ldi	r24, 0x25	; 37
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	25 e2       	ldi	r18, 0x25	; 37
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	f9 01       	movw	r30, r18
    11ce:	20 81       	ld	r18, Z
    11d0:	2b 7f       	andi	r18, 0xFB	; 251
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 83       	st	Z, r18
    SPDR = 0x0F;                        // Verstuurt read commando voor receiven
    11d6:	8e e4       	ldi	r24, 0x4E	; 78
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	2f e0       	ldi	r18, 0x0F	; 15
    11dc:	fc 01       	movw	r30, r24
    11de:	20 83       	st	Z, r18
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
    11e0:	00 00       	nop
    11e2:	8d e4       	ldi	r24, 0x4D	; 77
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	fc 01       	movw	r30, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	88 23       	and	r24, r24
    11ec:	d4 f7       	brge	.-12     	; 0x11e2 <spi_receive+0x2c>
    SPDR = address >> 8;                // Neemt de hoogste byte van het adres en stuurt deze
    11ee:	8e e4       	ldi	r24, 0x4E	; 78
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	29 81       	ldd	r18, Y+1	; 0x01
    11f4:	3a 81       	ldd	r19, Y+2	; 0x02
    11f6:	23 2f       	mov	r18, r19
    11f8:	33 27       	eor	r19, r19
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
    11fe:	00 00       	nop
    1200:	8d e4       	ldi	r24, 0x4D	; 77
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	fc 01       	movw	r30, r24
    1206:	80 81       	ld	r24, Z
    1208:	88 23       	and	r24, r24
    120a:	d4 f7       	brge	.-12     	; 0x1200 <spi_receive+0x4a>
    SPDR = address;                     // Neemt de laagste byte van het adres en stuurt deze
    120c:	8e e4       	ldi	r24, 0x4E	; 78
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	29 81       	ldd	r18, Y+1	; 0x01
    1212:	fc 01       	movw	r30, r24
    1214:	20 83       	st	Z, r18
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
    1216:	00 00       	nop
    1218:	8d e4       	ldi	r24, 0x4D	; 77
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	fc 01       	movw	r30, r24
    121e:	80 81       	ld	r24, Z
    1220:	88 23       	and	r24, r24
    1222:	d4 f7       	brge	.-12     	; 0x1218 <spi_receive+0x62>
    SPDR = 0x00;                        // Dummy data
    1224:	8e e4       	ldi	r24, 0x4E	; 78
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	fc 01       	movw	r30, r24
    122a:	10 82       	st	Z, r1
    while(!(SPSR & (1 << SPIF)));       // Checkt op SPI interrupt flag zolang data wordt verstuurd
    122c:	00 00       	nop
    122e:	8d e4       	ldi	r24, 0x4D	; 77
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	fc 01       	movw	r30, r24
    1234:	80 81       	ld	r24, Z
    1236:	88 23       	and	r24, r24
    1238:	d4 f7       	brge	.-12     	; 0x122e <spi_receive+0x78>
    SPI_PORT |= (1<<SPI_CS);            // Deactiveerd de slave
    123a:	85 e2       	ldi	r24, 0x25	; 37
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	25 e2       	ldi	r18, 0x25	; 37
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	f9 01       	movw	r30, r18
    1244:	20 81       	ld	r18, Z
    1246:	24 60       	ori	r18, 0x04	; 4
    1248:	fc 01       	movw	r30, r24
    124a:	20 83       	st	Z, r18
    
    return SPDR;                        // Returnt de verstuurde data uit het SPI data register
    124c:	8e e4       	ldi	r24, 0x4E	; 78
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	fc 01       	movw	r30, r24
    1252:	80 81       	ld	r24, Z
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <tcp_create_socket>:

// Counter voor het bijhouden van het messagenummer
static int message_number = 0;

// Methode om een TCP socket mee te creeren
void tcp_create_socket(void) {
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	00 d0       	rcall	.+0      	; 0x1264 <tcp_create_socket+0x6>
    1264:	1f 92       	push	r1
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    spi_transmit(S1MR, (1 << P0));              // Maakt van socket 1 een TCP socket
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	95 e0       	ldi	r25, 0x05	; 5
    1270:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    uint16_t port = 30000;                      // Luistert naar data op poort 3000
    1274:	80 e3       	ldi	r24, 0x30	; 48
    1276:	95 e7       	ldi	r25, 0x75	; 117
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    spi_transmit(S1PORTH, port >> 8);           // Zet hoogste byte
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	89 2f       	mov	r24, r25
    1282:	99 27       	eor	r25, r25
    1284:	68 2f       	mov	r22, r24
    1286:	84 e0       	ldi	r24, 0x04	; 4
    1288:	95 e0       	ldi	r25, 0x05	; 5
    128a:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S1PORTL, port);                // Zet laagste byte
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	68 2f       	mov	r22, r24
    1292:	85 e0       	ldi	r24, 0x05	; 5
    1294:	95 e0       	ldi	r25, 0x05	; 5
    1296:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    spi_transmit(S1CR, OPEN);                   // Initialiseert de socket met de instellingen
    129a:	61 e0       	ldi	r22, 0x01	; 1
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	95 e0       	ldi	r25, 0x05	; 5
    12a0:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    uint8_t status = spi_receive(S1SR);         // Haalt de status op
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	95 e0       	ldi	r25, 0x05	; 5
    12a8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    
    if(status != SOCK_INIT) {                   // Check of de status (SOCK_INIT) klopt met de instellingen
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	83 31       	cpi	r24, 0x13	; 19
    12b2:	39 f0       	breq	.+14     	; 0x12c2 <tcp_create_socket+0x64>
        spi_transmit(S1CR, CLOSE);              // Anders sluit de verbinding
    12b4:	60 e1       	ldi	r22, 0x10	; 16
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	95 e0       	ldi	r25, 0x05	; 5
    12ba:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
        tcp_create_socket();                    // Probeer opnieuw
    12be:	0e 94 2f 09 	call	0x125e	; 0x125e <tcp_create_socket>
    }
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <tcp_disconnect>:

// Methode om een disconnect request te versturen
void tcp_disconnect(void) {
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    spi_transmit(S1CR, DISCON);
    12d6:	68 e0       	ldi	r22, 0x08	; 8
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	95 e0       	ldi	r25, 0x05	; 5
    12dc:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
}
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <tcp_close_socket>:

// Methode om de TCP socket mee te sluiten
void tcp_close_socket(void) {
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    spi_transmit(S1CR, CLOSE);                  // Sluit de verbinding
    12ee:	60 e1       	ldi	r22, 0x10	; 16
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	95 e0       	ldi	r25, 0x05	; 5
    12f4:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
}
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <tcp_listen>:

// Methode naar een TCP request te luisteren
void tcp_listen(void) {
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	1f 92       	push	r1
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    // Reset het message nummer voor een volgende verbinding
    message_number = 0;
    1308:	10 92 39 03 	sts	0x0339, r1
    130c:	10 92 38 03 	sts	0x0338, r1
    
    // Laat de socket naar luister naar requests
    spi_transmit(S1CR, LISTEN);
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	95 e0       	ldi	r25, 0x05	; 5
    1316:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
        
    // Haal de status op
    uint8_t status = spi_receive(S1SR);
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	95 e0       	ldi	r25, 0x05	; 5
    131e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1322:	89 83       	std	Y+1, r24	; 0x01
        
    // Check of de socket goed is ingesteld, verbind anders opnieuw
    if (status != SOCK_LISTEN) {
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	84 31       	cpi	r24, 0x14	; 20
    1328:	39 f0       	breq	.+14     	; 0x1338 <tcp_listen+0x3a>
        spi_transmit(S1CR, CLOSE);
    132a:	60 e1       	ldi	r22, 0x10	; 16
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	95 e0       	ldi	r25, 0x05	; 5
    1330:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
        tcp_listen();
    1334:	0e 94 7f 09 	call	0x12fe	; 0x12fe <tcp_listen>
    }
}
    1338:	0f 90       	pop	r0
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <tcp_to_monitor>:

// Methode om data te sturen naar de monitor
void tcp_to_monitor(tcpflag flag, uint8_t data[], int length) {
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	6b 97       	sbiw	r28, 0x1b	; 27
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	8f 8b       	std	Y+23, r24	; 0x17
    1356:	79 8f       	std	Y+25, r23	; 0x19
    1358:	68 8f       	std	Y+24, r22	; 0x18
    135a:	5b 8f       	std	Y+27, r21	; 0x1b
    135c:	4a 8f       	std	Y+26, r20	; 0x1a
    
    // Verhoogt het messagenummer met 1
    ++message_number;
    135e:	80 91 38 03 	lds	r24, 0x0338
    1362:	90 91 39 03 	lds	r25, 0x0339
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	90 93 39 03 	sts	0x0339, r25
    136c:	80 93 38 03 	sts	0x0338, r24
    
    // Vraag de vrije ruimte op voor het versturen van pakket
    // Als deze niet groot genoeg wacht op beschikbare ruimte
    uint16_t size = 0;
    1370:	1e 82       	std	Y+6, r1	; 0x06
    1372:	1d 82       	std	Y+5, r1	; 0x05
    do {
        size = spi_receive(S1TXFSRH);
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	95 e0       	ldi	r25, 0x05	; 5
    1378:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
        size <<= 8;
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	98 2f       	mov	r25, r24
    138a:	88 27       	eor	r24, r24
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 83       	std	Y+5, r24	; 0x05
        size |= spi_receive(S1TXFSRL);
    1390:	81 e2       	ldi	r24, 0x21	; 33
    1392:	95 e0       	ldi	r25, 0x05	; 5
    1394:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	2d 81       	ldd	r18, Y+5	; 0x05
    139e:	3e 81       	ldd	r19, Y+6	; 0x06
    13a0:	82 2b       	or	r24, r18
    13a2:	93 2b       	or	r25, r19
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a0 e8       	ldi	r26, 0x80	; 128
    13ae:	bf e3       	ldi	r27, 0x3F	; 63
    13b0:	89 87       	std	Y+9, r24	; 0x09
    13b2:	9a 87       	std	Y+10, r25	; 0x0a
    13b4:	ab 87       	std	Y+11, r26	; 0x0b
    13b6:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a e7       	ldi	r20, 0x7A	; 122
    13be:	55 e4       	ldi	r21, 0x45	; 69
    13c0:	69 85       	ldd	r22, Y+9	; 0x09
    13c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    13c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    13c8:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	8d 87       	std	Y+13, r24	; 0x0d
    13d2:	9e 87       	std	Y+14, r25	; 0x0e
    13d4:	af 87       	std	Y+15, r26	; 0x0f
    13d6:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	6d 85       	ldd	r22, Y+13	; 0x0d
    13e2:	7e 85       	ldd	r23, Y+14	; 0x0e
    13e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e6:	98 89       	ldd	r25, Y+16	; 0x10
    13e8:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
    13ec:	88 23       	and	r24, r24
    13ee:	2c f4       	brge	.+10     	; 0x13fa <tcp_to_monitor+0xba>
		__ticks = 1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9a 8b       	std	Y+18, r25	; 0x12
    13f6:	89 8b       	std	Y+17, r24	; 0x11
    13f8:	3f c0       	rjmp	.+126    	; 0x1478 <tcp_to_monitor+0x138>
	else if (__tmp > 65535)
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	6d 85       	ldd	r22, Y+13	; 0x0d
    1404:	7e 85       	ldd	r23, Y+14	; 0x0e
    1406:	8f 85       	ldd	r24, Y+15	; 0x0f
    1408:	98 89       	ldd	r25, Y+16	; 0x10
    140a:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
    140e:	18 16       	cp	r1, r24
    1410:	4c f5       	brge	.+82     	; 0x1464 <tcp_to_monitor+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	69 85       	ldd	r22, Y+9	; 0x09
    141c:	7a 85       	ldd	r23, Y+10	; 0x0a
    141e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1420:	9c 85       	ldd	r25, Y+12	; 0x0c
    1422:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	9a 8b       	std	Y+18, r25	; 0x12
    1438:	89 8b       	std	Y+17, r24	; 0x11
    143a:	0f c0       	rjmp	.+30     	; 0x145a <tcp_to_monitor+0x11a>
    143c:	80 e9       	ldi	r24, 0x90	; 144
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	9c 8b       	std	Y+20, r25	; 0x14
    1442:	8b 8b       	std	Y+19, r24	; 0x13
    1444:	8b 89       	ldd	r24, Y+19	; 0x13
    1446:	9c 89       	ldd	r25, Y+20	; 0x14
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <tcp_to_monitor+0x108>
    144c:	9c 8b       	std	Y+20, r25	; 0x14
    144e:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1450:	89 89       	ldd	r24, Y+17	; 0x11
    1452:	9a 89       	ldd	r25, Y+18	; 0x12
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	9a 8b       	std	Y+18, r25	; 0x12
    1458:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145a:	89 89       	ldd	r24, Y+17	; 0x11
    145c:	9a 89       	ldd	r25, Y+18	; 0x12
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	69 f7       	brne	.-38     	; 0x143c <tcp_to_monitor+0xfc>
    1462:	14 c0       	rjmp	.+40     	; 0x148c <tcp_to_monitor+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1464:	6d 85       	ldd	r22, Y+13	; 0x0d
    1466:	7e 85       	ldd	r23, Y+14	; 0x0e
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	98 89       	ldd	r25, Y+16	; 0x10
    146c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9a 8b       	std	Y+18, r25	; 0x12
    1476:	89 8b       	std	Y+17, r24	; 0x11
    1478:	89 89       	ldd	r24, Y+17	; 0x11
    147a:	9a 89       	ldd	r25, Y+18	; 0x12
    147c:	9e 8b       	std	Y+22, r25	; 0x16
    147e:	8d 8b       	std	Y+21, r24	; 0x15
    1480:	8d 89       	ldd	r24, Y+21	; 0x15
    1482:	9e 89       	ldd	r25, Y+22	; 0x16
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <tcp_to_monitor+0x144>
    1488:	9e 8b       	std	Y+22, r25	; 0x16
    148a:	8d 8b       	std	Y+21, r24	; 0x15
        _delay_ms(1);
    }
    while(length > size);
    148c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    148e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	82 17       	cp	r24, r18
    1496:	93 07       	cpc	r25, r19
    1498:	08 f4       	brcc	.+2      	; 0x149c <tcp_to_monitor+0x15c>
    149a:	6c cf       	rjmp	.-296    	; 0x1374 <tcp_to_monitor+0x34>
    
    // Zet het ipadres in het socket geheugen
    spi_transmit(S1DIPR + 0, 10);
    149c:	6a e0       	ldi	r22, 0x0A	; 10
    149e:	8c e0       	ldi	r24, 0x0C	; 12
    14a0:	95 e0       	ldi	r25, 0x05	; 5
    14a2:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S1DIPR + 1, 0);
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	8d e0       	ldi	r24, 0x0D	; 13
    14aa:	95 e0       	ldi	r25, 0x05	; 5
    14ac:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S1DIPR + 2, 4);
    14b0:	64 e0       	ldi	r22, 0x04	; 4
    14b2:	8e e0       	ldi	r24, 0x0E	; 14
    14b4:	95 e0       	ldi	r25, 0x05	; 5
    14b6:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S1DIPR + 3, 0);
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	8f e0       	ldi	r24, 0x0F	; 15
    14be:	95 e0       	ldi	r25, 0x05	; 5
    14c0:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Zet de destination poort
    spi_transmit(S1DPORTH, 30000 >> 8);
    14c4:	65 e7       	ldi	r22, 0x75	; 117
    14c6:	80 e1       	ldi	r24, 0x10	; 16
    14c8:	95 e0       	ldi	r25, 0x05	; 5
    14ca:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S1DPORTL, 30000 & 0xFF);
    14ce:	60 e3       	ldi	r22, 0x30	; 48
    14d0:	81 e1       	ldi	r24, 0x11	; 17
    14d2:	95 e0       	ldi	r25, 0x05	; 5
    14d4:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S1TXWRH) << 8;
    14d8:	84 e2       	ldi	r24, 0x24	; 36
    14da:	95 e0       	ldi	r25, 0x05	; 5
    14dc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	98 2f       	mov	r25, r24
    14e6:	88 27       	eor	r24, r24
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01
    pointer |= spi_receive(S1TXWRL);
    14ec:	85 e2       	ldi	r24, 0x25	; 37
    14ee:	95 e0       	ldi	r25, 0x05	; 5
    14f0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	29 81       	ldd	r18, Y+1	; 0x01
    14fa:	3a 81       	ldd	r19, Y+2	; 0x02
    14fc:	82 2b       	or	r24, r18
    14fe:	93 2b       	or	r25, r19
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
    
    // Bereken het start adres
    uint16_t address = S1TXBASE + (pointer & 0x07FF);
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	97 70       	andi	r25, 0x07	; 7
    150a:	98 5b       	subi	r25, 0xB8	; 184
    150c:	98 87       	std	Y+8, r25	; 0x08
    150e:	8f 83       	std	Y+7, r24	; 0x07
    
    // Schrijft de flag weg in het socketgeheugen
    spi_transmit(address, flag);
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	6f 89       	ldd	r22, Y+23	; 0x17
    1516:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    ++pointer;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	89 83       	std	Y+1, r24	; 0x01
    
    // Schrijf de high byte van het message nummer weg
    address = S1TXBASE + (pointer & 0x07FF);
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	9a 81       	ldd	r25, Y+2	; 0x02
    1528:	97 70       	andi	r25, 0x07	; 7
    152a:	98 5b       	subi	r25, 0xB8	; 184
    152c:	98 87       	std	Y+8, r25	; 0x08
    152e:	8f 83       	std	Y+7, r24	; 0x07
    spi_transmit(address, message_number >> 8);
    1530:	80 91 38 03 	lds	r24, 0x0338
    1534:	90 91 39 03 	lds	r25, 0x0339
    1538:	89 2f       	mov	r24, r25
    153a:	99 0f       	add	r25, r25
    153c:	99 0b       	sbc	r25, r25
    153e:	28 2f       	mov	r18, r24
    1540:	8f 81       	ldd	r24, Y+7	; 0x07
    1542:	98 85       	ldd	r25, Y+8	; 0x08
    1544:	62 2f       	mov	r22, r18
    1546:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    ++pointer;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
    
    // Schrijf de low byte van het message nummer weg
    address = S1TXBASE + (pointer & 0x07FF);
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	97 70       	andi	r25, 0x07	; 7
    155a:	98 5b       	subi	r25, 0xB8	; 184
    155c:	98 87       	std	Y+8, r25	; 0x08
    155e:	8f 83       	std	Y+7, r24	; 0x07
    spi_transmit(address, message_number);
    1560:	80 91 38 03 	lds	r24, 0x0338
    1564:	90 91 39 03 	lds	r25, 0x0339
    1568:	28 2f       	mov	r18, r24
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	98 85       	ldd	r25, Y+8	; 0x08
    156e:	62 2f       	mov	r22, r18
    1570:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    ++pointer;
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
    
    // Schrijft de data weg in het geheugen
    for (int i = 0; i < length; ++i) {
    157e:	1c 82       	std	Y+4, r1	; 0x04
    1580:	1b 82       	std	Y+3, r1	; 0x03
    1582:	1d c0       	rjmp	.+58     	; 0x15be <tcp_to_monitor+0x27e>
        address = S1TXBASE + ((pointer++) & 0x07FF);
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	9c 01       	movw	r18, r24
    158a:	2f 5f       	subi	r18, 0xFF	; 255
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	3a 83       	std	Y+2, r19	; 0x02
    1590:	29 83       	std	Y+1, r18	; 0x01
    1592:	97 70       	andi	r25, 0x07	; 7
    1594:	98 5b       	subi	r25, 0xB8	; 184
    1596:	98 87       	std	Y+8, r25	; 0x08
    1598:	8f 83       	std	Y+7, r24	; 0x07
        spi_transmit(address, data[i]);
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	28 8d       	ldd	r18, Y+24	; 0x18
    15a0:	39 8d       	ldd	r19, Y+25	; 0x19
    15a2:	82 0f       	add	r24, r18
    15a4:	93 1f       	adc	r25, r19
    15a6:	fc 01       	movw	r30, r24
    15a8:	20 81       	ld	r18, Z
    15aa:	8f 81       	ldd	r24, Y+7	; 0x07
    15ac:	98 85       	ldd	r25, Y+8	; 0x08
    15ae:	62 2f       	mov	r22, r18
    15b0:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    address = S1TXBASE + (pointer & 0x07FF);
    spi_transmit(address, message_number);
    ++pointer;
    
    // Schrijft de data weg in het geheugen
    for (int i = 0; i < length; ++i) {
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	2b 81       	ldd	r18, Y+3	; 0x03
    15c0:	3c 81       	ldd	r19, Y+4	; 0x04
    15c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15c6:	28 17       	cp	r18, r24
    15c8:	39 07       	cpc	r19, r25
    15ca:	e4 f2       	brlt	.-72     	; 0x1584 <tcp_to_monitor+0x244>
        address = S1TXBASE + ((pointer++) & 0x07FF);
        spi_transmit(address, data[i]);
    }
    
    // Berg de pointer weer op
    spi_transmit(S1TXWRH, pointer >> 8);
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	89 2f       	mov	r24, r25
    15d2:	99 27       	eor	r25, r25
    15d4:	68 2f       	mov	r22, r24
    15d6:	84 e2       	ldi	r24, 0x24	; 36
    15d8:	95 e0       	ldi	r25, 0x05	; 5
    15da:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S1TXWRL, pointer);
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	68 2f       	mov	r22, r24
    15e2:	85 e2       	ldi	r24, 0x25	; 37
    15e4:	95 e0       	ldi	r25, 0x05	; 5
    15e6:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Verstuurt het pakket
    spi_transmit(S1CR, SEND);
    15ea:	60 e2       	ldi	r22, 0x20	; 32
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	95 e0       	ldi	r25, 0x05	; 5
    15f0:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Wacht op het versturen (0x00 = verstuurd)
    while(spi_receive(S1CR));
    15f4:	00 00       	nop
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	95 e0       	ldi	r25, 0x05	; 5
    15fa:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    15fe:	88 23       	and	r24, r24
    1600:	d1 f7       	brne	.-12     	; 0x15f6 <tcp_to_monitor+0x2b6>
}
    1602:	6b 96       	adiw	r28, 0x1b	; 27
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <tcp_from_monitor>:

// Methode om data mee te ontvangen
void tcp_from_monitor(uint8_t buffer[]) {
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	2a 97       	sbiw	r28, 0x0a	; 10
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	9a 87       	std	Y+10, r25	; 0x0a
    162e:	89 87       	std	Y+9, r24	; 0x09
    // Vraag de grootte van de binnenkomende data op
    uint16_t size = spi_receive(S1RXRSRH) << 8;
    1630:	86 e2       	ldi	r24, 0x26	; 38
    1632:	95 e0       	ldi	r25, 0x05	; 5
    1634:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	98 2f       	mov	r25, r24
    163e:	88 27       	eor	r24, r24
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    size |= spi_receive(S1RXRSRL);
    1644:	87 e2       	ldi	r24, 0x27	; 39
    1646:	95 e0       	ldi	r25, 0x05	; 5
    1648:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	2d 81       	ldd	r18, Y+5	; 0x05
    1652:	3e 81       	ldd	r19, Y+6	; 0x06
    1654:	82 2b       	or	r24, r18
    1656:	93 2b       	or	r25, r19
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S1RXRRH) << 8;
    165c:	88 e2       	ldi	r24, 0x28	; 40
    165e:	95 e0       	ldi	r25, 0x05	; 5
    1660:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	98 2f       	mov	r25, r24
    166a:	88 27       	eor	r24, r24
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
    pointer |= spi_receive(S1RXRRL);
    1670:	89 e2       	ldi	r24, 0x29	; 41
    1672:	95 e0       	ldi	r25, 0x05	; 5
    1674:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	29 81       	ldd	r18, Y+1	; 0x01
    167e:	3a 81       	ldd	r19, Y+2	; 0x02
    1680:	82 2b       	or	r24, r18
    1682:	93 2b       	or	r25, r19
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
    
    // Berekent het adres met de pointer en mask
    // Haalt de data op uit het geheugen minus de eerste 8 header bytes
    uint16_t address;
    for (int i = 0; i < size; ++i) {
    1688:	1c 82       	std	Y+4, r1	; 0x04
    168a:	1b 82       	std	Y+3, r1	; 0x03
    168c:	1d c0       	rjmp	.+58     	; 0x16c8 <tcp_from_monitor+0xb4>
        address = S1RXBASE + ((pointer++) & 0x07FF);
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	9c 01       	movw	r18, r24
    1694:	2f 5f       	subi	r18, 0xFF	; 255
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	3a 83       	std	Y+2, r19	; 0x02
    169a:	29 83       	std	Y+1, r18	; 0x01
    169c:	97 70       	andi	r25, 0x07	; 7
    169e:	98 59       	subi	r25, 0x98	; 152
    16a0:	98 87       	std	Y+8, r25	; 0x08
    16a2:	8f 83       	std	Y+7, r24	; 0x07
        buffer[i] = spi_receive(address);
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	29 85       	ldd	r18, Y+9	; 0x09
    16aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ac:	89 01       	movw	r16, r18
    16ae:	08 0f       	add	r16, r24
    16b0:	19 1f       	adc	r17, r25
    16b2:	8f 81       	ldd	r24, Y+7	; 0x07
    16b4:	98 85       	ldd	r25, Y+8	; 0x08
    16b6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    16ba:	f8 01       	movw	r30, r16
    16bc:	80 83       	st	Z, r24
    pointer |= spi_receive(S1RXRRL);
    
    // Berekent het adres met de pointer en mask
    // Haalt de data op uit het geheugen minus de eerste 8 header bytes
    uint16_t address;
    for (int i = 0; i < size; ++i) {
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    16c8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ca:	3c 81       	ldd	r19, Y+4	; 0x04
    16cc:	8d 81       	ldd	r24, Y+5	; 0x05
    16ce:	9e 81       	ldd	r25, Y+6	; 0x06
    16d0:	28 17       	cp	r18, r24
    16d2:	39 07       	cpc	r19, r25
    16d4:	e0 f2       	brcs	.-72     	; 0x168e <tcp_from_monitor+0x7a>
        address = S1RXBASE + ((pointer++) & 0x07FF);
        buffer[i] = spi_receive(address);
    }
    
    // Harde nul voor string
    buffer[size] = '\0';
    16d6:	29 85       	ldd	r18, Y+9	; 0x09
    16d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
    16e2:	fc 01       	movw	r30, r24
    16e4:	10 82       	st	Z, r1
    
    // Berg de pointer weer op
    spi_transmit(S1RXRRH, pointer >> 8);
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	89 2f       	mov	r24, r25
    16ec:	99 27       	eor	r25, r25
    16ee:	68 2f       	mov	r22, r24
    16f0:	88 e2       	ldi	r24, 0x28	; 40
    16f2:	95 e0       	ldi	r25, 0x05	; 5
    16f4:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S1RXRRL, pointer);
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	68 2f       	mov	r22, r24
    16fc:	89 e2       	ldi	r24, 0x29	; 41
    16fe:	95 e0       	ldi	r25, 0x05	; 5
    1700:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Registreer dat het pakket is opgehaald
    spi_transmit(S1CR, RECV);
    1704:	60 e4       	ldi	r22, 0x40	; 64
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	95 e0       	ldi	r25, 0x05	; 5
    170a:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    170e:	2a 96       	adiw	r28, 0x0a	; 10
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	08 95       	ret

00001724 <usart_init>:

#include "uart.h"

// Methode voor het opzetten van de USART verbinding
// Zet de baudrate, rx/tx en het frame formaat
void usart_init(uint16_t baudRate) {
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	28 97       	sbiw	r28, 0x08	; 8
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t ubrr = ((F_CPU / 16) / baudRate) - 1;         // Berekent de baudrate voor de usart
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	9c 01       	movw	r18, r24
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	80 e4       	ldi	r24, 0x40	; 64
    1748:	92 e4       	ldi	r25, 0x42	; 66
    174a:	af e0       	ldi	r26, 0x0F	; 15
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__udivmodsi4>
    1756:	da 01       	movw	r26, r20
    1758:	c9 01       	movw	r24, r18
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
    UBRR0H = ubrr >> 8;                                    // Zet de hig byte in het usart baudrate register
    1760:	85 ec       	ldi	r24, 0xC5	; 197
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	29 81       	ldd	r18, Y+1	; 0x01
    1766:	3a 81       	ldd	r19, Y+2	; 0x02
    1768:	23 2f       	mov	r18, r19
    176a:	33 27       	eor	r19, r19
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
    UBRR0L = ubrr;                                         // Zet de low byte in het usart baudrate register
    1770:	84 ec       	ldi	r24, 0xC4	; 196
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	29 81       	ldd	r18, Y+1	; 0x01
    1776:	fc 01       	movw	r30, r24
    1778:	20 83       	st	Z, r18
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);                  // Zet zowel tx (transmit) als rx (receive) aan
    177a:	81 ec       	ldi	r24, 0xC1	; 193
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	28 e1       	ldi	r18, 0x18	; 24
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);                // Frame formaat(8N1), 8 bits, geen par, 1 stopb
    1784:	82 ec       	ldi	r24, 0xC2	; 194
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	26 e0       	ldi	r18, 0x06	; 6
    178a:	fc 01       	movw	r30, r24
    178c:	20 83       	st	Z, r18
}
    178e:	28 96       	adiw	r28, 0x08	; 8
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	08 95       	ret

000017a0 <usart_transmit>:

// Methode om met behulp van USART data te transmitten
// Wordt gebruikt door de stream om character mee te verzenden
int usart_transmit(char data, FILE *stream) {
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <usart_transmit+0x6>
    17a6:	1f 92       	push	r1
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	7b 83       	std	Y+3, r23	; 0x03
    17b0:	6a 83       	std	Y+2, r22	; 0x02
    // Als er een newline character binnenkomt wordt hier een carriage return aan toegevoegd
    if (data == '\n') usart_transmit('\r', stream);
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	8a 30       	cpi	r24, 0x0A	; 10
    17b6:	39 f4       	brne	.+14     	; 0x17c6 <usart_transmit+0x26>
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	9b 81       	ldd	r25, Y+3	; 0x03
    17bc:	bc 01       	movw	r22, r24
    17be:	8d e0       	ldi	r24, 0x0D	; 13
    17c0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <usart_transmit>
    
    // Wachten op een lege buffer door het checken op de empty flag
    while (!(UCSR0A & (1 << UDRE0)));
    17c4:	00 c0       	rjmp	.+0      	; 0x17c6 <usart_transmit+0x26>
    17c6:	00 00       	nop
    17c8:	80 ec       	ldi	r24, 0xC0	; 192
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	fc 01       	movw	r30, r24
    17ce:	80 81       	ld	r24, Z
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	80 72       	andi	r24, 0x20	; 32
    17d6:	99 27       	eor	r25, r25
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	b1 f3       	breq	.-20     	; 0x17c8 <usart_transmit+0x28>
    
    // Zet de data in het data register om te transmitten
    UDR0 = data;
    17dc:	86 ec       	ldi	r24, 0xC6	; 198
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	29 81       	ldd	r18, Y+1	; 0x01
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 83       	st	Z, r18
    
    // Geen errors
    return 0;
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <usart_receive>:

// Methode om met behulp USART data te ontvangen
// Wordt gebruikt door de stream om character mee te ontvangen
char usart_receive(FILE *stream) {
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <usart_receive+0x6>
    17fc:	1f 92       	push	r1
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	9b 83       	std	Y+3, r25	; 0x03
    1804:	8a 83       	std	Y+2, r24	; 0x02
    // Character om data op te slaan
    char data;
    
    // Wachten op binnenkomende data door te checken op de complete flag
    while (!(UCSR0A & (1 << RXC0)));
    1806:	00 00       	nop
    1808:	80 ec       	ldi	r24, 0xC0	; 192
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	fc 01       	movw	r30, r24
    180e:	80 81       	ld	r24, Z
    1810:	88 23       	and	r24, r24
    1812:	d4 f7       	brge	.-12     	; 0x1808 <usart_receive+0x12>
    
    // Haal de data op uit het register
    data = UDR0;
    1814:	86 ec       	ldi	r24, 0xC6	; 198
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	fc 01       	movw	r30, r24
    181a:	80 81       	ld	r24, Z
    181c:	89 83       	std	Y+1, r24	; 0x01
    
    // Echo input naar de seriele monitor
    usart_transmit(data, stream);
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
    1822:	bc 01       	movw	r22, r24
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <usart_transmit>
    
    // Return de data
    return data;
    182a:	89 81       	ldd	r24, Y+1	; 0x01
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	08 95       	ret

00001838 <usart_flush>:

// Methode om de buffer te flusen
void usart_flush(void) {
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	1f 92       	push	r1
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    unsigned char dummy;
    while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
    1842:	05 c0       	rjmp	.+10     	; 0x184e <usart_flush+0x16>
    1844:	86 ec       	ldi	r24, 0xC6	; 198
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	fc 01       	movw	r30, r24
    184a:	80 81       	ld	r24, Z
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	80 ec       	ldi	r24, 0xC0	; 192
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	fc 01       	movw	r30, r24
    1854:	80 81       	ld	r24, Z
    1856:	88 23       	and	r24, r24
    1858:	ac f3       	brlt	.-22     	; 0x1844 <usart_flush+0xc>
}
    185a:	0f 90       	pop	r0
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <udp_create_socket>:
#include "eth.h"
#include "udp.h"
#include "uart.h"

// Methode om een UDP socket mee te creeren
void udp_create_socket(void) {
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	00 d0       	rcall	.+0      	; 0x1868 <udp_create_socket+0x6>
    1868:	1f 92       	push	r1
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    spi_transmit(S0MR, (1 << P1));              // Maakt van socket 0 een UDP socket
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	94 e0       	ldi	r25, 0x04	; 4
    1874:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    uint16_t port = 30000;                      // Luistert naar data op poort 3000
    1878:	80 e3       	ldi	r24, 0x30	; 48
    187a:	95 e7       	ldi	r25, 0x75	; 117
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
    spi_transmit(S0PORTH, port >> 8);           // Zet hoogste byte
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	9a 81       	ldd	r25, Y+2	; 0x02
    1884:	89 2f       	mov	r24, r25
    1886:	99 27       	eor	r25, r25
    1888:	68 2f       	mov	r22, r24
    188a:	84 e0       	ldi	r24, 0x04	; 4
    188c:	94 e0       	ldi	r25, 0x04	; 4
    188e:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0PORTL, port);                // Zet laagste byte
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	68 2f       	mov	r22, r24
    1896:	85 e0       	ldi	r24, 0x05	; 5
    1898:	94 e0       	ldi	r25, 0x04	; 4
    189a:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    spi_transmit(S0CR, OPEN);                   // Initialiseert de socket met de instellingen
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	94 e0       	ldi	r25, 0x04	; 4
    18a4:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    uint8_t status = spi_receive(S0SR);         // Haalt de status op
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	94 e0       	ldi	r25, 0x04	; 4
    18ac:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    18b0:	8b 83       	std	Y+3, r24	; 0x03
    
    if(status != SOCK_UDP) {                    // Check of de status (SOCK_UDP) klopt met de instellingen
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	82 32       	cpi	r24, 0x22	; 34
    18b6:	39 f0       	breq	.+14     	; 0x18c6 <udp_create_socket+0x64>
        spi_transmit(S0CR, CLOSE);              // Anders sluit de verbinding
    18b8:	60 e1       	ldi	r22, 0x10	; 16
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	94 e0       	ldi	r25, 0x04	; 4
    18be:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
        udp_create_socket();                    // Probeer opnieuw
    18c2:	0e 94 31 0c 	call	0x1862	; 0x1862 <udp_create_socket>
    }
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	08 95       	ret

000018d2 <udp_close_socket>:

// Methode om de UDP socket mee te sluiten
void udp_close_socket(void) {
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    spi_transmit(S0CR, CLOSE);                  // Sluit de verbinding
    18da:	60 e1       	ldi	r22, 0x10	; 16
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	94 e0       	ldi	r25, 0x04	; 4
    18e0:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <udp_broadcast>:

// Methode om mee te broadcasten
void udp_broadcast(udpflag flag, uint8_t data[], int length) {
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	a5 97       	sbiw	r28, 0x25	; 37
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	89 a3       	std	Y+33, r24	; 0x21
    1900:	7b a3       	std	Y+35, r23	; 0x23
    1902:	6a a3       	std	Y+34, r22	; 0x22
    1904:	5d a3       	std	Y+37, r21	; 0x25
    1906:	4c a3       	std	Y+36, r20	; 0x24
    
    // Vraag de vrije ruimte op voor het versturen van pakket
    // Als deze niet groot genoeg wacht op beschikbare ruimte
    uint16_t size = 0;
    1908:	18 86       	std	Y+8, r1	; 0x08
    190a:	1f 82       	std	Y+7, r1	; 0x07
    do {
        size = spi_receive(S0TXFSRH);
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	94 e0       	ldi	r25, 0x04	; 4
    1910:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	98 87       	std	Y+8, r25	; 0x08
    191a:	8f 83       	std	Y+7, r24	; 0x07
        size <<= 8;
    191c:	8f 81       	ldd	r24, Y+7	; 0x07
    191e:	98 85       	ldd	r25, Y+8	; 0x08
    1920:	98 2f       	mov	r25, r24
    1922:	88 27       	eor	r24, r24
    1924:	98 87       	std	Y+8, r25	; 0x08
    1926:	8f 83       	std	Y+7, r24	; 0x07
        size |= spi_receive(S0TXFSRL);
    1928:	81 e2       	ldi	r24, 0x21	; 33
    192a:	94 e0       	ldi	r25, 0x04	; 4
    192c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	2f 81       	ldd	r18, Y+7	; 0x07
    1936:	38 85       	ldd	r19, Y+8	; 0x08
    1938:	82 2b       	or	r24, r18
    193a:	93 2b       	or	r25, r19
    193c:	98 87       	std	Y+8, r25	; 0x08
    193e:	8f 83       	std	Y+7, r24	; 0x07
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e8       	ldi	r26, 0x80	; 128
    1946:	bf e3       	ldi	r27, 0x3F	; 63
    1948:	8b 87       	std	Y+11, r24	; 0x0b
    194a:	9c 87       	std	Y+12, r25	; 0x0c
    194c:	ad 87       	std	Y+13, r26	; 0x0d
    194e:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a e7       	ldi	r20, 0x7A	; 122
    1956:	55 e4       	ldi	r21, 0x45	; 69
    1958:	6b 85       	ldd	r22, Y+11	; 0x0b
    195a:	7c 85       	ldd	r23, Y+12	; 0x0c
    195c:	8d 85       	ldd	r24, Y+13	; 0x0d
    195e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1960:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8f 87       	std	Y+15, r24	; 0x0f
    196a:	98 8b       	std	Y+16, r25	; 0x10
    196c:	a9 8b       	std	Y+17, r26	; 0x11
    196e:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	5f e3       	ldi	r21, 0x3F	; 63
    1978:	6f 85       	ldd	r22, Y+15	; 0x0f
    197a:	78 89       	ldd	r23, Y+16	; 0x10
    197c:	89 89       	ldd	r24, Y+17	; 0x11
    197e:	9a 89       	ldd	r25, Y+18	; 0x12
    1980:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <udp_broadcast+0xa8>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 8b       	std	Y+20, r25	; 0x14
    198e:	8b 8b       	std	Y+19, r24	; 0x13
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <udp_broadcast+0x126>
	else if (__tmp > 65535)
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	3f ef       	ldi	r19, 0xFF	; 255
    1996:	4f e7       	ldi	r20, 0x7F	; 127
    1998:	57 e4       	ldi	r21, 0x47	; 71
    199a:	6f 85       	ldd	r22, Y+15	; 0x0f
    199c:	78 89       	ldd	r23, Y+16	; 0x10
    199e:	89 89       	ldd	r24, Y+17	; 0x11
    19a0:	9a 89       	ldd	r25, Y+18	; 0x12
    19a2:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <udp_broadcast+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ba:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <udp_broadcast+0x108>
    19d4:	80 e9       	ldi	r24, 0x90	; 144
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	9e 8b       	std	Y+22, r25	; 0x16
    19da:	8d 8b       	std	Y+21, r24	; 0x15
    19dc:	8d 89       	ldd	r24, Y+21	; 0x15
    19de:	9e 89       	ldd	r25, Y+22	; 0x16
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <udp_broadcast+0xf6>
    19e4:	9e 8b       	std	Y+22, r25	; 0x16
    19e6:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ea:	9c 89       	ldd	r25, Y+20	; 0x14
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <udp_broadcast+0xea>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <udp_broadcast+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    19fe:	78 89       	ldd	r23, Y+16	; 0x10
    1a00:	89 89       	ldd	r24, Y+17	; 0x11
    1a02:	9a 89       	ldd	r25, Y+18	; 0x12
    1a04:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
    1a10:	8b 89       	ldd	r24, Y+19	; 0x13
    1a12:	9c 89       	ldd	r25, Y+20	; 0x14
    1a14:	98 8f       	std	Y+24, r25	; 0x18
    1a16:	8f 8b       	std	Y+23, r24	; 0x17
    1a18:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <udp_broadcast+0x132>
    1a20:	98 8f       	std	Y+24, r25	; 0x18
    1a22:	8f 8b       	std	Y+23, r24	; 0x17
        _delay_ms(1);
    }
    while(length > size);
    1a24:	2c a1       	ldd	r18, Y+36	; 0x24
    1a26:	3d a1       	ldd	r19, Y+37	; 0x25
    1a28:	8f 81       	ldd	r24, Y+7	; 0x07
    1a2a:	98 85       	ldd	r25, Y+8	; 0x08
    1a2c:	82 17       	cp	r24, r18
    1a2e:	93 07       	cpc	r25, r19
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <udp_broadcast+0x14a>
    1a32:	6c cf       	rjmp	.-296    	; 0x190c <udp_broadcast+0x22>
    
    // Zet het ipadres op broadcast
    spi_transmit(S0DIPR + 0, 255);
    1a34:	6f ef       	ldi	r22, 0xFF	; 255
    1a36:	8c e0       	ldi	r24, 0x0C	; 12
    1a38:	94 e0       	ldi	r25, 0x04	; 4
    1a3a:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0DIPR + 1, 255);
    1a3e:	6f ef       	ldi	r22, 0xFF	; 255
    1a40:	8d e0       	ldi	r24, 0x0D	; 13
    1a42:	94 e0       	ldi	r25, 0x04	; 4
    1a44:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0DIPR + 2, 255);
    1a48:	6f ef       	ldi	r22, 0xFF	; 255
    1a4a:	8e e0       	ldi	r24, 0x0E	; 14
    1a4c:	94 e0       	ldi	r25, 0x04	; 4
    1a4e:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0DIPR + 3, 255);
    1a52:	6f ef       	ldi	r22, 0xFF	; 255
    1a54:	8f e0       	ldi	r24, 0x0F	; 15
    1a56:	94 e0       	ldi	r25, 0x04	; 4
    1a58:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Zet de destination poort
    spi_transmit(S0DPORTH, 30000 >> 8);
    1a5c:	65 e7       	ldi	r22, 0x75	; 117
    1a5e:	80 e1       	ldi	r24, 0x10	; 16
    1a60:	94 e0       	ldi	r25, 0x04	; 4
    1a62:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0DPORTL, 30000 & 0xFF);
    1a66:	60 e3       	ldi	r22, 0x30	; 48
    1a68:	81 e1       	ldi	r24, 0x11	; 17
    1a6a:	94 e0       	ldi	r25, 0x04	; 4
    1a6c:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S0TXWRH) << 8;
    1a70:	84 e2       	ldi	r24, 0x24	; 36
    1a72:	94 e0       	ldi	r25, 0x04	; 4
    1a74:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1a78:	88 2f       	mov	r24, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	98 2f       	mov	r25, r24
    1a7e:	88 27       	eor	r24, r24
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
    pointer |= spi_receive(S0TXWRL);
    1a84:	85 e2       	ldi	r24, 0x25	; 37
    1a86:	94 e0       	ldi	r25, 0x04	; 4
    1a88:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	29 81       	ldd	r18, Y+1	; 0x01
    1a92:	3a 81       	ldd	r19, Y+2	; 0x02
    1a94:	82 2b       	or	r24, r18
    1a96:	93 2b       	or	r25, r19
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    
    // Berekent het adres met de pointer en mask
    uint16_t address = S0TXBASE + (pointer & 0x07FF);
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	97 70       	andi	r25, 0x07	; 7
    1aa2:	90 5c       	subi	r25, 0xC0	; 192
    1aa4:	9a 87       	std	Y+10, r25	; 0x0a
    1aa6:	89 87       	std	Y+9, r24	; 0x09
    
    // Schrijft de flag weg in het socketgeheugen
    spi_transmit(address, flag);
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	69 a1       	ldd	r22, Y+33	; 0x21
    1aae:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    ++pointer;
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
    
    // Schrijft het ipadres weg in het socketgeheugen
    int ip_addr[]  = {10, 0, 4, 1};
    1abc:	88 e0       	ldi	r24, 0x08	; 8
    1abe:	eb e2       	ldi	r30, 0x2B	; 43
    1ac0:	f3 e0       	ldi	r31, 0x03	; 3
    1ac2:	de 01       	movw	r26, r28
    1ac4:	59 96       	adiw	r26, 0x19	; 25
    1ac6:	01 90       	ld	r0, Z+
    1ac8:	0d 92       	st	X+, r0
    1aca:	8a 95       	dec	r24
    1acc:	e1 f7       	brne	.-8      	; 0x1ac6 <udp_broadcast+0x1dc>
    for (int i = 0; i < 4; ++i) {
    1ace:	1c 82       	std	Y+4, r1	; 0x04
    1ad0:	1b 82       	std	Y+3, r1	; 0x03
    1ad2:	23 c0       	rjmp	.+70     	; 0x1b1a <udp_broadcast+0x230>
        address = S0TXBASE + (pointer++ & 0x07FF);
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	9c 01       	movw	r18, r24
    1ada:	2f 5f       	subi	r18, 0xFF	; 255
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	3a 83       	std	Y+2, r19	; 0x02
    1ae0:	29 83       	std	Y+1, r18	; 0x01
    1ae2:	97 70       	andi	r25, 0x07	; 7
    1ae4:	90 5c       	subi	r25, 0xC0	; 192
    1ae6:	9a 87       	std	Y+10, r25	; 0x0a
    1ae8:	89 87       	std	Y+9, r24	; 0x09
        spi_transmit(address, ip_addr[i]);
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	9e 01       	movw	r18, r28
    1af4:	2f 5f       	subi	r18, 0xFF	; 255
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
    1af8:	82 0f       	add	r24, r18
    1afa:	93 1f       	adc	r25, r19
    1afc:	48 96       	adiw	r24, 0x18	; 24
    1afe:	fc 01       	movw	r30, r24
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	28 2f       	mov	r18, r24
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	62 2f       	mov	r22, r18
    1b0c:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(address, flag);
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    int ip_addr[]  = {10, 0, 4, 1};
    for (int i = 0; i < 4; ++i) {
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	91 05       	cpc	r25, r1
    1b22:	c4 f2       	brlt	.-80     	; 0x1ad4 <udp_broadcast+0x1ea>
        address = S0TXBASE + (pointer++ & 0x07FF);
        spi_transmit(address, ip_addr[i]);
    }
    
    // Schrijft de buffer weg in het socketgeheugen
    for (int i = 0; i < length; ++i) {
    1b24:	1e 82       	std	Y+6, r1	; 0x06
    1b26:	1d 82       	std	Y+5, r1	; 0x05
    1b28:	1d c0       	rjmp	.+58     	; 0x1b64 <udp_broadcast+0x27a>
        address = S0TXBASE + (pointer++ & 0x07FF);
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	9c 01       	movw	r18, r24
    1b30:	2f 5f       	subi	r18, 0xFF	; 255
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	3a 83       	std	Y+2, r19	; 0x02
    1b36:	29 83       	std	Y+1, r18	; 0x01
    1b38:	97 70       	andi	r25, 0x07	; 7
    1b3a:	90 5c       	subi	r25, 0xC0	; 192
    1b3c:	9a 87       	std	Y+10, r25	; 0x0a
    1b3e:	89 87       	std	Y+9, r24	; 0x09
        spi_transmit(address, data[i]);
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	2a a1       	ldd	r18, Y+34	; 0x22
    1b46:	3b a1       	ldd	r19, Y+35	; 0x23
    1b48:	82 0f       	add	r24, r18
    1b4a:	93 1f       	adc	r25, r19
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	20 81       	ld	r18, Z
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	62 2f       	mov	r22, r18
    1b56:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
        address = S0TXBASE + (pointer++ & 0x07FF);
        spi_transmit(address, ip_addr[i]);
    }
    
    // Schrijft de buffer weg in het socketgeheugen
    for (int i = 0; i < length; ++i) {
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	2d 81       	ldd	r18, Y+5	; 0x05
    1b66:	3e 81       	ldd	r19, Y+6	; 0x06
    1b68:	8c a1       	ldd	r24, Y+36	; 0x24
    1b6a:	9d a1       	ldd	r25, Y+37	; 0x25
    1b6c:	28 17       	cp	r18, r24
    1b6e:	39 07       	cpc	r19, r25
    1b70:	e4 f2       	brlt	.-72     	; 0x1b2a <udp_broadcast+0x240>
        address = S0TXBASE + (pointer++ & 0x07FF);
        spi_transmit(address, data[i]);
    }
    
    // Berg de pointer weer op
    spi_transmit(S0TXWRH, pointer >> 8);
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	89 2f       	mov	r24, r25
    1b78:	99 27       	eor	r25, r25
    1b7a:	68 2f       	mov	r22, r24
    1b7c:	84 e2       	ldi	r24, 0x24	; 36
    1b7e:	94 e0       	ldi	r25, 0x04	; 4
    1b80:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0TXWRL, pointer);
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	68 2f       	mov	r22, r24
    1b88:	85 e2       	ldi	r24, 0x25	; 37
    1b8a:	94 e0       	ldi	r25, 0x04	; 4
    1b8c:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Verstuurt het pakket
    spi_transmit(S0CR, SEND);
    1b90:	60 e2       	ldi	r22, 0x20	; 32
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	94 e0       	ldi	r25, 0x04	; 4
    1b96:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Wacht op het versturen (0x00 = verstuurd)
    while(spi_receive(S0CR));
    1b9a:	00 00       	nop
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	94 e0       	ldi	r25, 0x04	; 4
    1ba0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1ba4:	88 23       	and	r24, r24
    1ba6:	d1 f7       	brne	.-12     	; 0x1b9c <udp_broadcast+0x2b2>
    
    // Sluit de verbinding
    // SPI_Transmit(S0CR, CLOSE);
}
    1ba8:	a5 96       	adiw	r28, 0x25	; 37
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <udp_to_monitor>:

// Methode om data te sturen naar de monitor
void udp_to_monitor(udpflag flag, uint8_t data[], int length) {
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	a1 97       	sbiw	r28, 0x21	; 33
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	8d 8f       	std	Y+29, r24	; 0x1d
    1bd0:	7f 8f       	std	Y+31, r23	; 0x1f
    1bd2:	6e 8f       	std	Y+30, r22	; 0x1e
    1bd4:	59 a3       	std	Y+33, r21	; 0x21
    1bd6:	48 a3       	std	Y+32, r20	; 0x20
    
    // Vraag de vrije ruimte op voor het versturen van pakket
    // Als deze niet groot genoeg wacht op beschikbare ruimte
    uint16_t size = 0;
    1bd8:	18 86       	std	Y+8, r1	; 0x08
    1bda:	1f 82       	std	Y+7, r1	; 0x07
    do {
        size = spi_receive(S0TXFSRH);
    1bdc:	80 e2       	ldi	r24, 0x20	; 32
    1bde:	94 e0       	ldi	r25, 0x04	; 4
    1be0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	98 87       	std	Y+8, r25	; 0x08
    1bea:	8f 83       	std	Y+7, r24	; 0x07
        size <<= 8;
    1bec:	8f 81       	ldd	r24, Y+7	; 0x07
    1bee:	98 85       	ldd	r25, Y+8	; 0x08
    1bf0:	98 2f       	mov	r25, r24
    1bf2:	88 27       	eor	r24, r24
    1bf4:	98 87       	std	Y+8, r25	; 0x08
    1bf6:	8f 83       	std	Y+7, r24	; 0x07
        size |= spi_receive(S0TXFSRL);
    1bf8:	81 e2       	ldi	r24, 0x21	; 33
    1bfa:	94 e0       	ldi	r25, 0x04	; 4
    1bfc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	2f 81       	ldd	r18, Y+7	; 0x07
    1c06:	38 85       	ldd	r19, Y+8	; 0x08
    1c08:	82 2b       	or	r24, r18
    1c0a:	93 2b       	or	r25, r19
    1c0c:	98 87       	std	Y+8, r25	; 0x08
    1c0e:	8f 83       	std	Y+7, r24	; 0x07
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	bf e3       	ldi	r27, 0x3F	; 63
    1c18:	8b 87       	std	Y+11, r24	; 0x0b
    1c1a:	9c 87       	std	Y+12, r25	; 0x0c
    1c1c:	ad 87       	std	Y+13, r26	; 0x0d
    1c1e:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a e7       	ldi	r20, 0x7A	; 122
    1c26:	55 e4       	ldi	r21, 0x45	; 69
    1c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c30:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8f 87       	std	Y+15, r24	; 0x0f
    1c3a:	98 8b       	std	Y+16, r25	; 0x10
    1c3c:	a9 8b       	std	Y+17, r26	; 0x11
    1c3e:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c4a:	78 89       	ldd	r23, Y+16	; 0x10
    1c4c:	89 89       	ldd	r24, Y+17	; 0x11
    1c4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c50:	0e 94 02 10 	call	0x2004	; 0x2004 <__cmpsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <udp_to_monitor+0xa8>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <udp_to_monitor+0x126>
	else if (__tmp > 65535)
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c6c:	78 89       	ldd	r23, Y+16	; 0x10
    1c6e:	89 89       	ldd	r24, Y+17	; 0x11
    1c70:	9a 89       	ldd	r25, Y+18	; 0x12
    1c72:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <udp_to_monitor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e2       	ldi	r20, 0x20	; 32
    1c80:	51 e4       	ldi	r21, 0x41	; 65
    1c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8a:	0e 94 13 11 	call	0x2226	; 0x2226 <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ca0:	8b 8b       	std	Y+19, r24	; 0x13
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <udp_to_monitor+0x108>
    1ca4:	80 e9       	ldi	r24, 0x90	; 144
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	9e 8b       	std	Y+22, r25	; 0x16
    1caa:	8d 8b       	std	Y+21, r24	; 0x15
    1cac:	8d 89       	ldd	r24, Y+21	; 0x15
    1cae:	9e 89       	ldd	r25, Y+22	; 0x16
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <udp_to_monitor+0xf6>
    1cb4:	9e 8b       	std	Y+22, r25	; 0x16
    1cb6:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cba:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <udp_to_monitor+0xea>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <udp_to_monitor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cce:	78 89       	ldd	r23, Y+16	; 0x10
    1cd0:	89 89       	ldd	r24, Y+17	; 0x11
    1cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce4:	98 8f       	std	Y+24, r25	; 0x18
    1ce6:	8f 8b       	std	Y+23, r24	; 0x17
    1ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cea:	98 8d       	ldd	r25, Y+24	; 0x18
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <udp_to_monitor+0x132>
    1cf0:	98 8f       	std	Y+24, r25	; 0x18
    1cf2:	8f 8b       	std	Y+23, r24	; 0x17
        _delay_ms(1);
    }
    while(length > size);
    1cf4:	28 a1       	ldd	r18, Y+32	; 0x20
    1cf6:	39 a1       	ldd	r19, Y+33	; 0x21
    1cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfa:	98 85       	ldd	r25, Y+8	; 0x08
    1cfc:	82 17       	cp	r24, r18
    1cfe:	93 07       	cpc	r25, r19
    1d00:	08 f4       	brcc	.+2      	; 0x1d04 <udp_to_monitor+0x14a>
    1d02:	6c cf       	rjmp	.-296    	; 0x1bdc <udp_to_monitor+0x22>
    spi_transmit(S0DIPR + 1, 0);
    spi_transmit(S0DIPR + 2, 4);
    spi_transmit(S0DIPR + 3, 0);

#else
    spi_transmit(S0DIPR + 0, 192);
    1d04:	60 ec       	ldi	r22, 0xC0	; 192
    1d06:	8c e0       	ldi	r24, 0x0C	; 12
    1d08:	94 e0       	ldi	r25, 0x04	; 4
    1d0a:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0DIPR + 1, 168);
    1d0e:	68 ea       	ldi	r22, 0xA8	; 168
    1d10:	8d e0       	ldi	r24, 0x0D	; 13
    1d12:	94 e0       	ldi	r25, 0x04	; 4
    1d14:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0DIPR + 2, 178);
    1d18:	62 eb       	ldi	r22, 0xB2	; 178
    1d1a:	8e e0       	ldi	r24, 0x0E	; 14
    1d1c:	94 e0       	ldi	r25, 0x04	; 4
    1d1e:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0DIPR + 3, 12);
    1d22:	6c e0       	ldi	r22, 0x0C	; 12
    1d24:	8f e0       	ldi	r24, 0x0F	; 15
    1d26:	94 e0       	ldi	r25, 0x04	; 4
    1d28:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
#endif
    
    // Zet de destination poort
    spi_transmit(S0DPORTH, 30000 >> 8);
    1d2c:	65 e7       	ldi	r22, 0x75	; 117
    1d2e:	80 e1       	ldi	r24, 0x10	; 16
    1d30:	94 e0       	ldi	r25, 0x04	; 4
    1d32:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0DPORTL, 30000 & 0xFF);
    1d36:	60 e3       	ldi	r22, 0x30	; 48
    1d38:	81 e1       	ldi	r24, 0x11	; 17
    1d3a:	94 e0       	ldi	r25, 0x04	; 4
    1d3c:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S0TXWRH) << 8;
    1d40:	84 e2       	ldi	r24, 0x24	; 36
    1d42:	94 e0       	ldi	r25, 0x04	; 4
    1d44:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	88 27       	eor	r24, r24
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
    pointer |= spi_receive(S0TXWRL);
    1d54:	85 e2       	ldi	r24, 0x25	; 37
    1d56:	94 e0       	ldi	r25, 0x04	; 4
    1d58:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	29 81       	ldd	r18, Y+1	; 0x01
    1d62:	3a 81       	ldd	r19, Y+2	; 0x02
    1d64:	82 2b       	or	r24, r18
    1d66:	93 2b       	or	r25, r19
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    
    // Berekent het adres met de pointer en mask
    uint16_t address = S0TXBASE + (pointer & 0x07FF);
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	97 70       	andi	r25, 0x07	; 7
    1d72:	90 5c       	subi	r25, 0xC0	; 192
    1d74:	9a 87       	std	Y+10, r25	; 0x0a
    1d76:	89 87       	std	Y+9, r24	; 0x09
    
    // Schrijft de flag weg in het socketgeheugen
    spi_transmit(address, flag);
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d7e:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    ++pointer;
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    
    // Schrijft het ipadres weg in het socketgeheugen
    char ip_addr[]  = {'1','0','4','1'};
    1d8c:	81 e3       	ldi	r24, 0x31	; 49
    1d8e:	89 8f       	std	Y+25, r24	; 0x19
    1d90:	80 e3       	ldi	r24, 0x30	; 48
    1d92:	8a 8f       	std	Y+26, r24	; 0x1a
    1d94:	84 e3       	ldi	r24, 0x34	; 52
    1d96:	8b 8f       	std	Y+27, r24	; 0x1b
    1d98:	81 e3       	ldi	r24, 0x31	; 49
    1d9a:	8c 8f       	std	Y+28, r24	; 0x1c
    for (int i = 0; i < 4; ++i) {
    1d9c:	1c 82       	std	Y+4, r1	; 0x04
    1d9e:	1b 82       	std	Y+3, r1	; 0x03
    1da0:	1e c0       	rjmp	.+60     	; 0x1dde <udp_to_monitor+0x224>
        address = S0TXBASE + (pointer++ & 0x07FF);
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	9c 01       	movw	r18, r24
    1da8:	2f 5f       	subi	r18, 0xFF	; 255
    1daa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dac:	3a 83       	std	Y+2, r19	; 0x02
    1dae:	29 83       	std	Y+1, r18	; 0x01
    1db0:	97 70       	andi	r25, 0x07	; 7
    1db2:	90 5c       	subi	r25, 0xC0	; 192
    1db4:	9a 87       	std	Y+10, r25	; 0x0a
    1db6:	89 87       	std	Y+9, r24	; 0x09
        spi_transmit(address, ip_addr[i]);
    1db8:	9e 01       	movw	r18, r28
    1dba:	27 5e       	subi	r18, 0xE7	; 231
    1dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	82 0f       	add	r24, r18
    1dc4:	93 1f       	adc	r25, r19
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	20 81       	ld	r18, Z
    1dca:	89 85       	ldd	r24, Y+9	; 0x09
    1dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dce:	62 2f       	mov	r22, r18
    1dd0:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(address, flag);
    ++pointer;
    
    // Schrijft het ipadres weg in het socketgeheugen
    char ip_addr[]  = {'1','0','4','1'};
    for (int i = 0; i < 4; ++i) {
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	9c 83       	std	Y+4, r25	; 0x04
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	84 30       	cpi	r24, 0x04	; 4
    1de4:	91 05       	cpc	r25, r1
    1de6:	ec f2       	brlt	.-70     	; 0x1da2 <udp_to_monitor+0x1e8>
        address = S0TXBASE + (pointer++ & 0x07FF);
        spi_transmit(address, ip_addr[i]);
    }
    
    // Schrijft de buffer weg in het socketgeheugen
    for (int i = 0; i < length; ++i) {
    1de8:	1e 82       	std	Y+6, r1	; 0x06
    1dea:	1d 82       	std	Y+5, r1	; 0x05
    1dec:	1d c0       	rjmp	.+58     	; 0x1e28 <udp_to_monitor+0x26e>
        address = S0TXBASE + ((pointer++) & 0x07FF);
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	9c 01       	movw	r18, r24
    1df4:	2f 5f       	subi	r18, 0xFF	; 255
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	3a 83       	std	Y+2, r19	; 0x02
    1dfa:	29 83       	std	Y+1, r18	; 0x01
    1dfc:	97 70       	andi	r25, 0x07	; 7
    1dfe:	90 5c       	subi	r25, 0xC0	; 192
    1e00:	9a 87       	std	Y+10, r25	; 0x0a
    1e02:	89 87       	std	Y+9, r24	; 0x09
        spi_transmit(address, data[i]);
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1e0a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1e0c:	82 0f       	add	r24, r18
    1e0e:	93 1f       	adc	r25, r19
    1e10:	fc 01       	movw	r30, r24
    1e12:	20 81       	ld	r18, Z
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	62 2f       	mov	r22, r18
    1e1a:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
        address = S0TXBASE + (pointer++ & 0x07FF);
        spi_transmit(address, ip_addr[i]);
    }
    
    // Schrijft de buffer weg in het socketgeheugen
    for (int i = 0; i < length; ++i) {
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	2d 81       	ldd	r18, Y+5	; 0x05
    1e2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e2c:	88 a1       	ldd	r24, Y+32	; 0x20
    1e2e:	99 a1       	ldd	r25, Y+33	; 0x21
    1e30:	28 17       	cp	r18, r24
    1e32:	39 07       	cpc	r19, r25
    1e34:	e4 f2       	brlt	.-72     	; 0x1dee <udp_to_monitor+0x234>
        address = S0TXBASE + ((pointer++) & 0x07FF);
        spi_transmit(address, data[i]);
    }
    
    // Berg de pointer weer op
    spi_transmit(S0TXWRH, pointer >> 8);
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	89 2f       	mov	r24, r25
    1e3c:	99 27       	eor	r25, r25
    1e3e:	68 2f       	mov	r22, r24
    1e40:	84 e2       	ldi	r24, 0x24	; 36
    1e42:	94 e0       	ldi	r25, 0x04	; 4
    1e44:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0TXWRL, pointer);
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	68 2f       	mov	r22, r24
    1e4c:	85 e2       	ldi	r24, 0x25	; 37
    1e4e:	94 e0       	ldi	r25, 0x04	; 4
    1e50:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Verstuurt het pakket
    spi_transmit(S0CR, SEND);
    1e54:	60 e2       	ldi	r22, 0x20	; 32
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	94 e0       	ldi	r25, 0x04	; 4
    1e5a:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Wacht op het versturen (0x00 = verstuurd)
    while(spi_receive(S0CR));
    1e5e:	00 00       	nop
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	94 e0       	ldi	r25, 0x04	; 4
    1e64:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1e68:	88 23       	and	r24, r24
    1e6a:	d1 f7       	brne	.-12     	; 0x1e60 <udp_to_monitor+0x2a6>
}
    1e6c:	a1 96       	adiw	r28, 0x21	; 33
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	08 95       	ret

00001e7e <udp_from_monitor>:

// Methode om data mee te ontvangen
void udp_from_monitor(uint8_t buffer[]) {
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	2a 97       	sbiw	r28, 0x0a	; 10
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	9a 87       	std	Y+10, r25	; 0x0a
    1e98:	89 87       	std	Y+9, r24	; 0x09
    // Vraag de grootte van de binnenkomende data op
    uint16_t size = spi_receive(S0RXRSRH) << 8;
    1e9a:	86 e2       	ldi	r24, 0x26	; 38
    1e9c:	94 e0       	ldi	r25, 0x04	; 4
    1e9e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	88 27       	eor	r24, r24
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    size |= spi_receive(S0RXRSRL);
    1eae:	87 e2       	ldi	r24, 0x27	; 39
    1eb0:	94 e0       	ldi	r25, 0x04	; 4
    1eb2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	2d 81       	ldd	r18, Y+5	; 0x05
    1ebc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ebe:	82 2b       	or	r24, r18
    1ec0:	93 2b       	or	r25, r19
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    
    // Haalt de header van de groote af
    size -= 8;
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	08 97       	sbiw	r24, 0x08	; 8
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
    
    // Vraagt de pointer naar het socket geheugen
    uint16_t pointer = spi_receive(S0RXRRH) << 8;
    1ed0:	88 e2       	ldi	r24, 0x28	; 40
    1ed2:	94 e0       	ldi	r25, 0x04	; 4
    1ed4:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	98 2f       	mov	r25, r24
    1ede:	88 27       	eor	r24, r24
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    pointer |= spi_receive(S0RXRRL);
    1ee4:	89 e2       	ldi	r24, 0x29	; 41
    1ee6:	94 e0       	ldi	r25, 0x04	; 4
    1ee8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	29 81       	ldd	r18, Y+1	; 0x01
    1ef2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef4:	82 2b       	or	r24, r18
    1ef6:	93 2b       	or	r25, r19
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
    
    // Voegt 8 toe voor de header
    pointer += 8;
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	08 96       	adiw	r24, 0x08	; 8
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
    
    // Berekent het adres met de pointer en mask
    // Haalt de data op uit het geheugen minus de eerste 8 header bytes
    uint16_t address;
    for (int i = 0; i < (size ); ++i) {
    1f06:	1c 82       	std	Y+4, r1	; 0x04
    1f08:	1b 82       	std	Y+3, r1	; 0x03
    1f0a:	1d c0       	rjmp	.+58     	; 0x1f46 <udp_from_monitor+0xc8>
        address = S0RXBASE + ((pointer++) & 0x07FF);
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	9c 01       	movw	r18, r24
    1f12:	2f 5f       	subi	r18, 0xFF	; 255
    1f14:	3f 4f       	sbci	r19, 0xFF	; 255
    1f16:	3a 83       	std	Y+2, r19	; 0x02
    1f18:	29 83       	std	Y+1, r18	; 0x01
    1f1a:	97 70       	andi	r25, 0x07	; 7
    1f1c:	90 5a       	subi	r25, 0xA0	; 160
    1f1e:	98 87       	std	Y+8, r25	; 0x08
    1f20:	8f 83       	std	Y+7, r24	; 0x07
        buffer[i] = spi_receive(address);
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	29 85       	ldd	r18, Y+9	; 0x09
    1f28:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f2a:	89 01       	movw	r16, r18
    1f2c:	08 0f       	add	r16, r24
    1f2e:	19 1f       	adc	r17, r25
    1f30:	8f 81       	ldd	r24, Y+7	; 0x07
    1f32:	98 85       	ldd	r25, Y+8	; 0x08
    1f34:	0e 94 db 08 	call	0x11b6	; 0x11b6 <spi_receive>
    1f38:	f8 01       	movw	r30, r16
    1f3a:	80 83       	st	Z, r24
    pointer += 8;
    
    // Berekent het adres met de pointer en mask
    // Haalt de data op uit het geheugen minus de eerste 8 header bytes
    uint16_t address;
    for (int i = 0; i < (size ); ++i) {
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	9c 83       	std	Y+4, r25	; 0x04
    1f44:	8b 83       	std	Y+3, r24	; 0x03
    1f46:	2b 81       	ldd	r18, Y+3	; 0x03
    1f48:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	28 17       	cp	r18, r24
    1f50:	39 07       	cpc	r19, r25
    1f52:	e0 f2       	brcs	.-72     	; 0x1f0c <udp_from_monitor+0x8e>
        address = S0RXBASE + ((pointer++) & 0x07FF);
        buffer[i] = spi_receive(address);
    }
    
    // Harde nul voor string
    buffer[size] = '\0';
    1f54:	29 85       	ldd	r18, Y+9	; 0x09
    1f56:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	82 0f       	add	r24, r18
    1f5e:	93 1f       	adc	r25, r19
    1f60:	fc 01       	movw	r30, r24
    1f62:	10 82       	st	Z, r1

    // Berg de pointer weer op
    spi_transmit(S0RXRRH, pointer >> 8);
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	89 2f       	mov	r24, r25
    1f6a:	99 27       	eor	r25, r25
    1f6c:	68 2f       	mov	r22, r24
    1f6e:	88 e2       	ldi	r24, 0x28	; 40
    1f70:	94 e0       	ldi	r25, 0x04	; 4
    1f72:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    spi_transmit(S0RXRRL, pointer);
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	68 2f       	mov	r22, r24
    1f7a:	89 e2       	ldi	r24, 0x29	; 41
    1f7c:	94 e0       	ldi	r25, 0x04	; 4
    1f7e:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Registreer dat het pakket is opgehaald
    spi_transmit(S0CR, RECV);
    1f82:	60 e4       	ldi	r22, 0x40	; 64
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	94 e0       	ldi	r25, 0x04	; 4
    1f88:	0e 94 87 08 	call	0x110e	; 0x110e <spi_transmit>
    
    // Stuur een acknowledge
    udp_to_monitor(udpack, buffer, size);
    1f8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f8e:	3e 81       	ldd	r19, Y+6	; 0x06
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	a9 01       	movw	r20, r18
    1f96:	bc 01       	movw	r22, r24
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <udp_to_monitor>
    1f9e:	2a 96       	adiw	r28, 0x0a	; 10
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	08 95       	ret

00001fb4 <__udivmodsi4>:
    1fb4:	a1 e2       	ldi	r26, 0x21	; 33
    1fb6:	1a 2e       	mov	r1, r26
    1fb8:	aa 1b       	sub	r26, r26
    1fba:	bb 1b       	sub	r27, r27
    1fbc:	fd 01       	movw	r30, r26
    1fbe:	0d c0       	rjmp	.+26     	; 0x1fda <__udivmodsi4_ep>

00001fc0 <__udivmodsi4_loop>:
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	ee 1f       	adc	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	a2 17       	cp	r26, r18
    1fca:	b3 07       	cpc	r27, r19
    1fcc:	e4 07       	cpc	r30, r20
    1fce:	f5 07       	cpc	r31, r21
    1fd0:	20 f0       	brcs	.+8      	; 0x1fda <__udivmodsi4_ep>
    1fd2:	a2 1b       	sub	r26, r18
    1fd4:	b3 0b       	sbc	r27, r19
    1fd6:	e4 0b       	sbc	r30, r20
    1fd8:	f5 0b       	sbc	r31, r21

00001fda <__udivmodsi4_ep>:
    1fda:	66 1f       	adc	r22, r22
    1fdc:	77 1f       	adc	r23, r23
    1fde:	88 1f       	adc	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	1a 94       	dec	r1
    1fe4:	69 f7       	brne	.-38     	; 0x1fc0 <__udivmodsi4_loop>
    1fe6:	60 95       	com	r22
    1fe8:	70 95       	com	r23
    1fea:	80 95       	com	r24
    1fec:	90 95       	com	r25
    1fee:	9b 01       	movw	r18, r22
    1ff0:	ac 01       	movw	r20, r24
    1ff2:	bd 01       	movw	r22, r26
    1ff4:	cf 01       	movw	r24, r30
    1ff6:	08 95       	ret

00001ff8 <__tablejump2__>:
    1ff8:	ee 0f       	add	r30, r30
    1ffa:	ff 1f       	adc	r31, r31

00001ffc <__tablejump__>:
    1ffc:	05 90       	lpm	r0, Z+
    1ffe:	f4 91       	lpm	r31, Z
    2000:	e0 2d       	mov	r30, r0
    2002:	09 94       	ijmp

00002004 <__cmpsf2>:
    2004:	97 d0       	rcall	.+302    	; 0x2134 <__fp_cmp>
    2006:	08 f4       	brcc	.+2      	; 0x200a <__cmpsf2+0x6>
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	08 95       	ret

0000200c <__divsf3>:
    200c:	0c d0       	rcall	.+24     	; 0x2026 <__divsf3x>
    200e:	cd c0       	rjmp	.+410    	; 0x21aa <__fp_round>
    2010:	c5 d0       	rcall	.+394    	; 0x219c <__fp_pscB>
    2012:	40 f0       	brcs	.+16     	; 0x2024 <__divsf3+0x18>
    2014:	bc d0       	rcall	.+376    	; 0x218e <__fp_pscA>
    2016:	30 f0       	brcs	.+12     	; 0x2024 <__divsf3+0x18>
    2018:	21 f4       	brne	.+8      	; 0x2022 <__divsf3+0x16>
    201a:	5f 3f       	cpi	r21, 0xFF	; 255
    201c:	19 f0       	breq	.+6      	; 0x2024 <__divsf3+0x18>
    201e:	ae c0       	rjmp	.+348    	; 0x217c <__fp_inf>
    2020:	51 11       	cpse	r21, r1
    2022:	f7 c0       	rjmp	.+494    	; 0x2212 <__fp_szero>
    2024:	b1 c0       	rjmp	.+354    	; 0x2188 <__fp_nan>

00002026 <__divsf3x>:
    2026:	d2 d0       	rcall	.+420    	; 0x21cc <__fp_split3>
    2028:	98 f3       	brcs	.-26     	; 0x2010 <__divsf3+0x4>

0000202a <__divsf3_pse>:
    202a:	99 23       	and	r25, r25
    202c:	c9 f3       	breq	.-14     	; 0x2020 <__divsf3+0x14>
    202e:	55 23       	and	r21, r21
    2030:	b1 f3       	breq	.-20     	; 0x201e <__divsf3+0x12>
    2032:	95 1b       	sub	r25, r21
    2034:	55 0b       	sbc	r21, r21
    2036:	bb 27       	eor	r27, r27
    2038:	aa 27       	eor	r26, r26
    203a:	62 17       	cp	r22, r18
    203c:	73 07       	cpc	r23, r19
    203e:	84 07       	cpc	r24, r20
    2040:	38 f0       	brcs	.+14     	; 0x2050 <__divsf3_pse+0x26>
    2042:	9f 5f       	subi	r25, 0xFF	; 255
    2044:	5f 4f       	sbci	r21, 0xFF	; 255
    2046:	22 0f       	add	r18, r18
    2048:	33 1f       	adc	r19, r19
    204a:	44 1f       	adc	r20, r20
    204c:	aa 1f       	adc	r26, r26
    204e:	a9 f3       	breq	.-22     	; 0x203a <__divsf3_pse+0x10>
    2050:	33 d0       	rcall	.+102    	; 0x20b8 <__divsf3_pse+0x8e>
    2052:	0e 2e       	mov	r0, r30
    2054:	3a f0       	brmi	.+14     	; 0x2064 <__divsf3_pse+0x3a>
    2056:	e0 e8       	ldi	r30, 0x80	; 128
    2058:	30 d0       	rcall	.+96     	; 0x20ba <__divsf3_pse+0x90>
    205a:	91 50       	subi	r25, 0x01	; 1
    205c:	50 40       	sbci	r21, 0x00	; 0
    205e:	e6 95       	lsr	r30
    2060:	00 1c       	adc	r0, r0
    2062:	ca f7       	brpl	.-14     	; 0x2056 <__divsf3_pse+0x2c>
    2064:	29 d0       	rcall	.+82     	; 0x20b8 <__divsf3_pse+0x8e>
    2066:	fe 2f       	mov	r31, r30
    2068:	27 d0       	rcall	.+78     	; 0x20b8 <__divsf3_pse+0x8e>
    206a:	66 0f       	add	r22, r22
    206c:	77 1f       	adc	r23, r23
    206e:	88 1f       	adc	r24, r24
    2070:	bb 1f       	adc	r27, r27
    2072:	26 17       	cp	r18, r22
    2074:	37 07       	cpc	r19, r23
    2076:	48 07       	cpc	r20, r24
    2078:	ab 07       	cpc	r26, r27
    207a:	b0 e8       	ldi	r27, 0x80	; 128
    207c:	09 f0       	breq	.+2      	; 0x2080 <__divsf3_pse+0x56>
    207e:	bb 0b       	sbc	r27, r27
    2080:	80 2d       	mov	r24, r0
    2082:	bf 01       	movw	r22, r30
    2084:	ff 27       	eor	r31, r31
    2086:	93 58       	subi	r25, 0x83	; 131
    2088:	5f 4f       	sbci	r21, 0xFF	; 255
    208a:	2a f0       	brmi	.+10     	; 0x2096 <__divsf3_pse+0x6c>
    208c:	9e 3f       	cpi	r25, 0xFE	; 254
    208e:	51 05       	cpc	r21, r1
    2090:	68 f0       	brcs	.+26     	; 0x20ac <__divsf3_pse+0x82>
    2092:	74 c0       	rjmp	.+232    	; 0x217c <__fp_inf>
    2094:	be c0       	rjmp	.+380    	; 0x2212 <__fp_szero>
    2096:	5f 3f       	cpi	r21, 0xFF	; 255
    2098:	ec f3       	brlt	.-6      	; 0x2094 <__divsf3_pse+0x6a>
    209a:	98 3e       	cpi	r25, 0xE8	; 232
    209c:	dc f3       	brlt	.-10     	; 0x2094 <__divsf3_pse+0x6a>
    209e:	86 95       	lsr	r24
    20a0:	77 95       	ror	r23
    20a2:	67 95       	ror	r22
    20a4:	b7 95       	ror	r27
    20a6:	f7 95       	ror	r31
    20a8:	9f 5f       	subi	r25, 0xFF	; 255
    20aa:	c9 f7       	brne	.-14     	; 0x209e <__divsf3_pse+0x74>
    20ac:	88 0f       	add	r24, r24
    20ae:	91 1d       	adc	r25, r1
    20b0:	96 95       	lsr	r25
    20b2:	87 95       	ror	r24
    20b4:	97 f9       	bld	r25, 7
    20b6:	08 95       	ret
    20b8:	e1 e0       	ldi	r30, 0x01	; 1
    20ba:	66 0f       	add	r22, r22
    20bc:	77 1f       	adc	r23, r23
    20be:	88 1f       	adc	r24, r24
    20c0:	bb 1f       	adc	r27, r27
    20c2:	62 17       	cp	r22, r18
    20c4:	73 07       	cpc	r23, r19
    20c6:	84 07       	cpc	r24, r20
    20c8:	ba 07       	cpc	r27, r26
    20ca:	20 f0       	brcs	.+8      	; 0x20d4 <__divsf3_pse+0xaa>
    20cc:	62 1b       	sub	r22, r18
    20ce:	73 0b       	sbc	r23, r19
    20d0:	84 0b       	sbc	r24, r20
    20d2:	ba 0b       	sbc	r27, r26
    20d4:	ee 1f       	adc	r30, r30
    20d6:	88 f7       	brcc	.-30     	; 0x20ba <__divsf3_pse+0x90>
    20d8:	e0 95       	com	r30
    20da:	08 95       	ret

000020dc <__fixunssfsi>:
    20dc:	7f d0       	rcall	.+254    	; 0x21dc <__fp_splitA>
    20de:	88 f0       	brcs	.+34     	; 0x2102 <__fixunssfsi+0x26>
    20e0:	9f 57       	subi	r25, 0x7F	; 127
    20e2:	90 f0       	brcs	.+36     	; 0x2108 <__fixunssfsi+0x2c>
    20e4:	b9 2f       	mov	r27, r25
    20e6:	99 27       	eor	r25, r25
    20e8:	b7 51       	subi	r27, 0x17	; 23
    20ea:	a0 f0       	brcs	.+40     	; 0x2114 <__fixunssfsi+0x38>
    20ec:	d1 f0       	breq	.+52     	; 0x2122 <__fixunssfsi+0x46>
    20ee:	66 0f       	add	r22, r22
    20f0:	77 1f       	adc	r23, r23
    20f2:	88 1f       	adc	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	1a f0       	brmi	.+6      	; 0x20fe <__fixunssfsi+0x22>
    20f8:	ba 95       	dec	r27
    20fa:	c9 f7       	brne	.-14     	; 0x20ee <__fixunssfsi+0x12>
    20fc:	12 c0       	rjmp	.+36     	; 0x2122 <__fixunssfsi+0x46>
    20fe:	b1 30       	cpi	r27, 0x01	; 1
    2100:	81 f0       	breq	.+32     	; 0x2122 <__fixunssfsi+0x46>
    2102:	86 d0       	rcall	.+268    	; 0x2210 <__fp_zero>
    2104:	b1 e0       	ldi	r27, 0x01	; 1
    2106:	08 95       	ret
    2108:	83 c0       	rjmp	.+262    	; 0x2210 <__fp_zero>
    210a:	67 2f       	mov	r22, r23
    210c:	78 2f       	mov	r23, r24
    210e:	88 27       	eor	r24, r24
    2110:	b8 5f       	subi	r27, 0xF8	; 248
    2112:	39 f0       	breq	.+14     	; 0x2122 <__fixunssfsi+0x46>
    2114:	b9 3f       	cpi	r27, 0xF9	; 249
    2116:	cc f3       	brlt	.-14     	; 0x210a <__fixunssfsi+0x2e>
    2118:	86 95       	lsr	r24
    211a:	77 95       	ror	r23
    211c:	67 95       	ror	r22
    211e:	b3 95       	inc	r27
    2120:	d9 f7       	brne	.-10     	; 0x2118 <__fixunssfsi+0x3c>
    2122:	3e f4       	brtc	.+14     	; 0x2132 <__fixunssfsi+0x56>
    2124:	90 95       	com	r25
    2126:	80 95       	com	r24
    2128:	70 95       	com	r23
    212a:	61 95       	neg	r22
    212c:	7f 4f       	sbci	r23, 0xFF	; 255
    212e:	8f 4f       	sbci	r24, 0xFF	; 255
    2130:	9f 4f       	sbci	r25, 0xFF	; 255
    2132:	08 95       	ret

00002134 <__fp_cmp>:
    2134:	99 0f       	add	r25, r25
    2136:	00 08       	sbc	r0, r0
    2138:	55 0f       	add	r21, r21
    213a:	aa 0b       	sbc	r26, r26
    213c:	e0 e8       	ldi	r30, 0x80	; 128
    213e:	fe ef       	ldi	r31, 0xFE	; 254
    2140:	16 16       	cp	r1, r22
    2142:	17 06       	cpc	r1, r23
    2144:	e8 07       	cpc	r30, r24
    2146:	f9 07       	cpc	r31, r25
    2148:	c0 f0       	brcs	.+48     	; 0x217a <__fp_cmp+0x46>
    214a:	12 16       	cp	r1, r18
    214c:	13 06       	cpc	r1, r19
    214e:	e4 07       	cpc	r30, r20
    2150:	f5 07       	cpc	r31, r21
    2152:	98 f0       	brcs	.+38     	; 0x217a <__fp_cmp+0x46>
    2154:	62 1b       	sub	r22, r18
    2156:	73 0b       	sbc	r23, r19
    2158:	84 0b       	sbc	r24, r20
    215a:	95 0b       	sbc	r25, r21
    215c:	39 f4       	brne	.+14     	; 0x216c <__fp_cmp+0x38>
    215e:	0a 26       	eor	r0, r26
    2160:	61 f0       	breq	.+24     	; 0x217a <__fp_cmp+0x46>
    2162:	23 2b       	or	r18, r19
    2164:	24 2b       	or	r18, r20
    2166:	25 2b       	or	r18, r21
    2168:	21 f4       	brne	.+8      	; 0x2172 <__fp_cmp+0x3e>
    216a:	08 95       	ret
    216c:	0a 26       	eor	r0, r26
    216e:	09 f4       	brne	.+2      	; 0x2172 <__fp_cmp+0x3e>
    2170:	a1 40       	sbci	r26, 0x01	; 1
    2172:	a6 95       	lsr	r26
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	81 1d       	adc	r24, r1
    2178:	81 1d       	adc	r24, r1
    217a:	08 95       	ret

0000217c <__fp_inf>:
    217c:	97 f9       	bld	r25, 7
    217e:	9f 67       	ori	r25, 0x7F	; 127
    2180:	80 e8       	ldi	r24, 0x80	; 128
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	08 95       	ret

00002188 <__fp_nan>:
    2188:	9f ef       	ldi	r25, 0xFF	; 255
    218a:	80 ec       	ldi	r24, 0xC0	; 192
    218c:	08 95       	ret

0000218e <__fp_pscA>:
    218e:	00 24       	eor	r0, r0
    2190:	0a 94       	dec	r0
    2192:	16 16       	cp	r1, r22
    2194:	17 06       	cpc	r1, r23
    2196:	18 06       	cpc	r1, r24
    2198:	09 06       	cpc	r0, r25
    219a:	08 95       	ret

0000219c <__fp_pscB>:
    219c:	00 24       	eor	r0, r0
    219e:	0a 94       	dec	r0
    21a0:	12 16       	cp	r1, r18
    21a2:	13 06       	cpc	r1, r19
    21a4:	14 06       	cpc	r1, r20
    21a6:	05 06       	cpc	r0, r21
    21a8:	08 95       	ret

000021aa <__fp_round>:
    21aa:	09 2e       	mov	r0, r25
    21ac:	03 94       	inc	r0
    21ae:	00 0c       	add	r0, r0
    21b0:	11 f4       	brne	.+4      	; 0x21b6 <__fp_round+0xc>
    21b2:	88 23       	and	r24, r24
    21b4:	52 f0       	brmi	.+20     	; 0x21ca <__fp_round+0x20>
    21b6:	bb 0f       	add	r27, r27
    21b8:	40 f4       	brcc	.+16     	; 0x21ca <__fp_round+0x20>
    21ba:	bf 2b       	or	r27, r31
    21bc:	11 f4       	brne	.+4      	; 0x21c2 <__fp_round+0x18>
    21be:	60 ff       	sbrs	r22, 0
    21c0:	04 c0       	rjmp	.+8      	; 0x21ca <__fp_round+0x20>
    21c2:	6f 5f       	subi	r22, 0xFF	; 255
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	8f 4f       	sbci	r24, 0xFF	; 255
    21c8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ca:	08 95       	ret

000021cc <__fp_split3>:
    21cc:	57 fd       	sbrc	r21, 7
    21ce:	90 58       	subi	r25, 0x80	; 128
    21d0:	44 0f       	add	r20, r20
    21d2:	55 1f       	adc	r21, r21
    21d4:	59 f0       	breq	.+22     	; 0x21ec <__fp_splitA+0x10>
    21d6:	5f 3f       	cpi	r21, 0xFF	; 255
    21d8:	71 f0       	breq	.+28     	; 0x21f6 <__fp_splitA+0x1a>
    21da:	47 95       	ror	r20

000021dc <__fp_splitA>:
    21dc:	88 0f       	add	r24, r24
    21de:	97 fb       	bst	r25, 7
    21e0:	99 1f       	adc	r25, r25
    21e2:	61 f0       	breq	.+24     	; 0x21fc <__fp_splitA+0x20>
    21e4:	9f 3f       	cpi	r25, 0xFF	; 255
    21e6:	79 f0       	breq	.+30     	; 0x2206 <__fp_splitA+0x2a>
    21e8:	87 95       	ror	r24
    21ea:	08 95       	ret
    21ec:	12 16       	cp	r1, r18
    21ee:	13 06       	cpc	r1, r19
    21f0:	14 06       	cpc	r1, r20
    21f2:	55 1f       	adc	r21, r21
    21f4:	f2 cf       	rjmp	.-28     	; 0x21da <__fp_split3+0xe>
    21f6:	46 95       	lsr	r20
    21f8:	f1 df       	rcall	.-30     	; 0x21dc <__fp_splitA>
    21fa:	08 c0       	rjmp	.+16     	; 0x220c <__fp_splitA+0x30>
    21fc:	16 16       	cp	r1, r22
    21fe:	17 06       	cpc	r1, r23
    2200:	18 06       	cpc	r1, r24
    2202:	99 1f       	adc	r25, r25
    2204:	f1 cf       	rjmp	.-30     	; 0x21e8 <__fp_splitA+0xc>
    2206:	86 95       	lsr	r24
    2208:	71 05       	cpc	r23, r1
    220a:	61 05       	cpc	r22, r1
    220c:	08 94       	sec
    220e:	08 95       	ret

00002210 <__fp_zero>:
    2210:	e8 94       	clt

00002212 <__fp_szero>:
    2212:	bb 27       	eor	r27, r27
    2214:	66 27       	eor	r22, r22
    2216:	77 27       	eor	r23, r23
    2218:	cb 01       	movw	r24, r22
    221a:	97 f9       	bld	r25, 7
    221c:	08 95       	ret

0000221e <__gesf2>:
    221e:	8a df       	rcall	.-236    	; 0x2134 <__fp_cmp>
    2220:	08 f4       	brcc	.+2      	; 0x2224 <__gesf2+0x6>
    2222:	8f ef       	ldi	r24, 0xFF	; 255
    2224:	08 95       	ret

00002226 <__mulsf3>:
    2226:	0b d0       	rcall	.+22     	; 0x223e <__mulsf3x>
    2228:	c0 cf       	rjmp	.-128    	; 0x21aa <__fp_round>
    222a:	b1 df       	rcall	.-158    	; 0x218e <__fp_pscA>
    222c:	28 f0       	brcs	.+10     	; 0x2238 <__mulsf3+0x12>
    222e:	b6 df       	rcall	.-148    	; 0x219c <__fp_pscB>
    2230:	18 f0       	brcs	.+6      	; 0x2238 <__mulsf3+0x12>
    2232:	95 23       	and	r25, r21
    2234:	09 f0       	breq	.+2      	; 0x2238 <__mulsf3+0x12>
    2236:	a2 cf       	rjmp	.-188    	; 0x217c <__fp_inf>
    2238:	a7 cf       	rjmp	.-178    	; 0x2188 <__fp_nan>
    223a:	11 24       	eor	r1, r1
    223c:	ea cf       	rjmp	.-44     	; 0x2212 <__fp_szero>

0000223e <__mulsf3x>:
    223e:	c6 df       	rcall	.-116    	; 0x21cc <__fp_split3>
    2240:	a0 f3       	brcs	.-24     	; 0x222a <__mulsf3+0x4>

00002242 <__mulsf3_pse>:
    2242:	95 9f       	mul	r25, r21
    2244:	d1 f3       	breq	.-12     	; 0x223a <__mulsf3+0x14>
    2246:	95 0f       	add	r25, r21
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	55 1f       	adc	r21, r21
    224c:	62 9f       	mul	r22, r18
    224e:	f0 01       	movw	r30, r0
    2250:	72 9f       	mul	r23, r18
    2252:	bb 27       	eor	r27, r27
    2254:	f0 0d       	add	r31, r0
    2256:	b1 1d       	adc	r27, r1
    2258:	63 9f       	mul	r22, r19
    225a:	aa 27       	eor	r26, r26
    225c:	f0 0d       	add	r31, r0
    225e:	b1 1d       	adc	r27, r1
    2260:	aa 1f       	adc	r26, r26
    2262:	64 9f       	mul	r22, r20
    2264:	66 27       	eor	r22, r22
    2266:	b0 0d       	add	r27, r0
    2268:	a1 1d       	adc	r26, r1
    226a:	66 1f       	adc	r22, r22
    226c:	82 9f       	mul	r24, r18
    226e:	22 27       	eor	r18, r18
    2270:	b0 0d       	add	r27, r0
    2272:	a1 1d       	adc	r26, r1
    2274:	62 1f       	adc	r22, r18
    2276:	73 9f       	mul	r23, r19
    2278:	b0 0d       	add	r27, r0
    227a:	a1 1d       	adc	r26, r1
    227c:	62 1f       	adc	r22, r18
    227e:	83 9f       	mul	r24, r19
    2280:	a0 0d       	add	r26, r0
    2282:	61 1d       	adc	r22, r1
    2284:	22 1f       	adc	r18, r18
    2286:	74 9f       	mul	r23, r20
    2288:	33 27       	eor	r19, r19
    228a:	a0 0d       	add	r26, r0
    228c:	61 1d       	adc	r22, r1
    228e:	23 1f       	adc	r18, r19
    2290:	84 9f       	mul	r24, r20
    2292:	60 0d       	add	r22, r0
    2294:	21 1d       	adc	r18, r1
    2296:	82 2f       	mov	r24, r18
    2298:	76 2f       	mov	r23, r22
    229a:	6a 2f       	mov	r22, r26
    229c:	11 24       	eor	r1, r1
    229e:	9f 57       	subi	r25, 0x7F	; 127
    22a0:	50 40       	sbci	r21, 0x00	; 0
    22a2:	8a f0       	brmi	.+34     	; 0x22c6 <__mulsf3_pse+0x84>
    22a4:	e1 f0       	breq	.+56     	; 0x22de <__mulsf3_pse+0x9c>
    22a6:	88 23       	and	r24, r24
    22a8:	4a f0       	brmi	.+18     	; 0x22bc <__mulsf3_pse+0x7a>
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	bb 1f       	adc	r27, r27
    22b0:	66 1f       	adc	r22, r22
    22b2:	77 1f       	adc	r23, r23
    22b4:	88 1f       	adc	r24, r24
    22b6:	91 50       	subi	r25, 0x01	; 1
    22b8:	50 40       	sbci	r21, 0x00	; 0
    22ba:	a9 f7       	brne	.-22     	; 0x22a6 <__mulsf3_pse+0x64>
    22bc:	9e 3f       	cpi	r25, 0xFE	; 254
    22be:	51 05       	cpc	r21, r1
    22c0:	70 f0       	brcs	.+28     	; 0x22de <__mulsf3_pse+0x9c>
    22c2:	5c cf       	rjmp	.-328    	; 0x217c <__fp_inf>
    22c4:	a6 cf       	rjmp	.-180    	; 0x2212 <__fp_szero>
    22c6:	5f 3f       	cpi	r21, 0xFF	; 255
    22c8:	ec f3       	brlt	.-6      	; 0x22c4 <__mulsf3_pse+0x82>
    22ca:	98 3e       	cpi	r25, 0xE8	; 232
    22cc:	dc f3       	brlt	.-10     	; 0x22c4 <__mulsf3_pse+0x82>
    22ce:	86 95       	lsr	r24
    22d0:	77 95       	ror	r23
    22d2:	67 95       	ror	r22
    22d4:	b7 95       	ror	r27
    22d6:	f7 95       	ror	r31
    22d8:	e7 95       	ror	r30
    22da:	9f 5f       	subi	r25, 0xFF	; 255
    22dc:	c1 f7       	brne	.-16     	; 0x22ce <__mulsf3_pse+0x8c>
    22de:	fe 2b       	or	r31, r30
    22e0:	88 0f       	add	r24, r24
    22e2:	91 1d       	adc	r25, r1
    22e4:	96 95       	lsr	r25
    22e6:	87 95       	ror	r24
    22e8:	97 f9       	bld	r25, 7
    22ea:	08 95       	ret

000022ec <printf>:
    22ec:	a0 e0       	ldi	r26, 0x00	; 0
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	ec e7       	ldi	r30, 0x7C	; 124
    22f2:	f1 e1       	ldi	r31, 0x11	; 17
    22f4:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__prologue_saves__+0x20>
    22f8:	fe 01       	movw	r30, r28
    22fa:	35 96       	adiw	r30, 0x05	; 5
    22fc:	61 91       	ld	r22, Z+
    22fe:	71 91       	ld	r23, Z+
    2300:	af 01       	movw	r20, r30
    2302:	80 91 44 03 	lds	r24, 0x0344
    2306:	90 91 45 03 	lds	r25, 0x0345
    230a:	0e 94 b7 11 	call	0x236e	; 0x236e <vfprintf>
    230e:	e2 e0       	ldi	r30, 0x02	; 2
    2310:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__epilogue_restores__+0x20>

00002314 <puts>:
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	e0 91 44 03 	lds	r30, 0x0344
    2320:	f0 91 45 03 	lds	r31, 0x0345
    2324:	23 81       	ldd	r18, Z+3	; 0x03
    2326:	21 ff       	sbrs	r18, 1
    2328:	1b c0       	rjmp	.+54     	; 0x2360 <puts+0x4c>
    232a:	ec 01       	movw	r28, r24
    232c:	00 e0       	ldi	r16, 0x00	; 0
    232e:	10 e0       	ldi	r17, 0x00	; 0
    2330:	89 91       	ld	r24, Y+
    2332:	60 91 44 03 	lds	r22, 0x0344
    2336:	70 91 45 03 	lds	r23, 0x0345
    233a:	db 01       	movw	r26, r22
    233c:	18 96       	adiw	r26, 0x08	; 8
    233e:	ed 91       	ld	r30, X+
    2340:	fc 91       	ld	r31, X
    2342:	19 97       	sbiw	r26, 0x09	; 9
    2344:	88 23       	and	r24, r24
    2346:	31 f0       	breq	.+12     	; 0x2354 <puts+0x40>
    2348:	09 95       	icall
    234a:	89 2b       	or	r24, r25
    234c:	89 f3       	breq	.-30     	; 0x2330 <puts+0x1c>
    234e:	0f ef       	ldi	r16, 0xFF	; 255
    2350:	1f ef       	ldi	r17, 0xFF	; 255
    2352:	ee cf       	rjmp	.-36     	; 0x2330 <puts+0x1c>
    2354:	8a e0       	ldi	r24, 0x0A	; 10
    2356:	09 95       	icall
    2358:	89 2b       	or	r24, r25
    235a:	11 f4       	brne	.+4      	; 0x2360 <puts+0x4c>
    235c:	c8 01       	movw	r24, r16
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <puts+0x50>
    2360:	8f ef       	ldi	r24, 0xFF	; 255
    2362:	9f ef       	ldi	r25, 0xFF	; 255
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	08 95       	ret

0000236e <vfprintf>:
    236e:	ac e0       	ldi	r26, 0x0C	; 12
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ed eb       	ldi	r30, 0xBD	; 189
    2374:	f1 e1       	ldi	r31, 0x11	; 17
    2376:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__prologue_saves__>
    237a:	7c 01       	movw	r14, r24
    237c:	6b 01       	movw	r12, r22
    237e:	8a 01       	movw	r16, r20
    2380:	fc 01       	movw	r30, r24
    2382:	17 82       	std	Z+7, r1	; 0x07
    2384:	16 82       	std	Z+6, r1	; 0x06
    2386:	83 81       	ldd	r24, Z+3	; 0x03
    2388:	81 ff       	sbrs	r24, 1
    238a:	bd c1       	rjmp	.+890    	; 0x2706 <vfprintf+0x398>
    238c:	ce 01       	movw	r24, r28
    238e:	01 96       	adiw	r24, 0x01	; 1
    2390:	4c 01       	movw	r8, r24
    2392:	f7 01       	movw	r30, r14
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	f6 01       	movw	r30, r12
    2398:	93 fd       	sbrc	r25, 3
    239a:	85 91       	lpm	r24, Z+
    239c:	93 ff       	sbrs	r25, 3
    239e:	81 91       	ld	r24, Z+
    23a0:	6f 01       	movw	r12, r30
    23a2:	88 23       	and	r24, r24
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <vfprintf+0x3a>
    23a6:	ab c1       	rjmp	.+854    	; 0x26fe <vfprintf+0x390>
    23a8:	85 32       	cpi	r24, 0x25	; 37
    23aa:	39 f4       	brne	.+14     	; 0x23ba <vfprintf+0x4c>
    23ac:	93 fd       	sbrc	r25, 3
    23ae:	85 91       	lpm	r24, Z+
    23b0:	93 ff       	sbrs	r25, 3
    23b2:	81 91       	ld	r24, Z+
    23b4:	6f 01       	movw	r12, r30
    23b6:	85 32       	cpi	r24, 0x25	; 37
    23b8:	29 f4       	brne	.+10     	; 0x23c4 <vfprintf+0x56>
    23ba:	b7 01       	movw	r22, r14
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    23c2:	e7 cf       	rjmp	.-50     	; 0x2392 <vfprintf+0x24>
    23c4:	51 2c       	mov	r5, r1
    23c6:	31 2c       	mov	r3, r1
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	20 32       	cpi	r18, 0x20	; 32
    23cc:	a0 f4       	brcc	.+40     	; 0x23f6 <vfprintf+0x88>
    23ce:	8b 32       	cpi	r24, 0x2B	; 43
    23d0:	69 f0       	breq	.+26     	; 0x23ec <vfprintf+0x7e>
    23d2:	30 f4       	brcc	.+12     	; 0x23e0 <vfprintf+0x72>
    23d4:	80 32       	cpi	r24, 0x20	; 32
    23d6:	59 f0       	breq	.+22     	; 0x23ee <vfprintf+0x80>
    23d8:	83 32       	cpi	r24, 0x23	; 35
    23da:	69 f4       	brne	.+26     	; 0x23f6 <vfprintf+0x88>
    23dc:	20 61       	ori	r18, 0x10	; 16
    23de:	2c c0       	rjmp	.+88     	; 0x2438 <vfprintf+0xca>
    23e0:	8d 32       	cpi	r24, 0x2D	; 45
    23e2:	39 f0       	breq	.+14     	; 0x23f2 <vfprintf+0x84>
    23e4:	80 33       	cpi	r24, 0x30	; 48
    23e6:	39 f4       	brne	.+14     	; 0x23f6 <vfprintf+0x88>
    23e8:	21 60       	ori	r18, 0x01	; 1
    23ea:	26 c0       	rjmp	.+76     	; 0x2438 <vfprintf+0xca>
    23ec:	22 60       	ori	r18, 0x02	; 2
    23ee:	24 60       	ori	r18, 0x04	; 4
    23f0:	23 c0       	rjmp	.+70     	; 0x2438 <vfprintf+0xca>
    23f2:	28 60       	ori	r18, 0x08	; 8
    23f4:	21 c0       	rjmp	.+66     	; 0x2438 <vfprintf+0xca>
    23f6:	27 fd       	sbrc	r18, 7
    23f8:	27 c0       	rjmp	.+78     	; 0x2448 <vfprintf+0xda>
    23fa:	30 ed       	ldi	r19, 0xD0	; 208
    23fc:	38 0f       	add	r19, r24
    23fe:	3a 30       	cpi	r19, 0x0A	; 10
    2400:	78 f4       	brcc	.+30     	; 0x2420 <vfprintf+0xb2>
    2402:	26 ff       	sbrs	r18, 6
    2404:	06 c0       	rjmp	.+12     	; 0x2412 <vfprintf+0xa4>
    2406:	fa e0       	ldi	r31, 0x0A	; 10
    2408:	5f 9e       	mul	r5, r31
    240a:	30 0d       	add	r19, r0
    240c:	11 24       	eor	r1, r1
    240e:	53 2e       	mov	r5, r19
    2410:	13 c0       	rjmp	.+38     	; 0x2438 <vfprintf+0xca>
    2412:	8a e0       	ldi	r24, 0x0A	; 10
    2414:	38 9e       	mul	r3, r24
    2416:	30 0d       	add	r19, r0
    2418:	11 24       	eor	r1, r1
    241a:	33 2e       	mov	r3, r19
    241c:	20 62       	ori	r18, 0x20	; 32
    241e:	0c c0       	rjmp	.+24     	; 0x2438 <vfprintf+0xca>
    2420:	8e 32       	cpi	r24, 0x2E	; 46
    2422:	21 f4       	brne	.+8      	; 0x242c <vfprintf+0xbe>
    2424:	26 fd       	sbrc	r18, 6
    2426:	6b c1       	rjmp	.+726    	; 0x26fe <vfprintf+0x390>
    2428:	20 64       	ori	r18, 0x40	; 64
    242a:	06 c0       	rjmp	.+12     	; 0x2438 <vfprintf+0xca>
    242c:	8c 36       	cpi	r24, 0x6C	; 108
    242e:	11 f4       	brne	.+4      	; 0x2434 <vfprintf+0xc6>
    2430:	20 68       	ori	r18, 0x80	; 128
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <vfprintf+0xca>
    2434:	88 36       	cpi	r24, 0x68	; 104
    2436:	41 f4       	brne	.+16     	; 0x2448 <vfprintf+0xda>
    2438:	f6 01       	movw	r30, r12
    243a:	93 fd       	sbrc	r25, 3
    243c:	85 91       	lpm	r24, Z+
    243e:	93 ff       	sbrs	r25, 3
    2440:	81 91       	ld	r24, Z+
    2442:	6f 01       	movw	r12, r30
    2444:	81 11       	cpse	r24, r1
    2446:	c1 cf       	rjmp	.-126    	; 0x23ca <vfprintf+0x5c>
    2448:	98 2f       	mov	r25, r24
    244a:	9f 7d       	andi	r25, 0xDF	; 223
    244c:	95 54       	subi	r25, 0x45	; 69
    244e:	93 30       	cpi	r25, 0x03	; 3
    2450:	28 f4       	brcc	.+10     	; 0x245c <vfprintf+0xee>
    2452:	0c 5f       	subi	r16, 0xFC	; 252
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	ff e3       	ldi	r31, 0x3F	; 63
    2458:	f9 83       	std	Y+1, r31	; 0x01
    245a:	0d c0       	rjmp	.+26     	; 0x2476 <vfprintf+0x108>
    245c:	83 36       	cpi	r24, 0x63	; 99
    245e:	31 f0       	breq	.+12     	; 0x246c <vfprintf+0xfe>
    2460:	83 37       	cpi	r24, 0x73	; 115
    2462:	71 f0       	breq	.+28     	; 0x2480 <vfprintf+0x112>
    2464:	83 35       	cpi	r24, 0x53	; 83
    2466:	09 f0       	breq	.+2      	; 0x246a <vfprintf+0xfc>
    2468:	5b c0       	rjmp	.+182    	; 0x2520 <vfprintf+0x1b2>
    246a:	22 c0       	rjmp	.+68     	; 0x24b0 <vfprintf+0x142>
    246c:	f8 01       	movw	r30, r16
    246e:	80 81       	ld	r24, Z
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	0e 5f       	subi	r16, 0xFE	; 254
    2474:	1f 4f       	sbci	r17, 0xFF	; 255
    2476:	44 24       	eor	r4, r4
    2478:	43 94       	inc	r4
    247a:	51 2c       	mov	r5, r1
    247c:	54 01       	movw	r10, r8
    247e:	15 c0       	rjmp	.+42     	; 0x24aa <vfprintf+0x13c>
    2480:	38 01       	movw	r6, r16
    2482:	f2 e0       	ldi	r31, 0x02	; 2
    2484:	6f 0e       	add	r6, r31
    2486:	71 1c       	adc	r7, r1
    2488:	f8 01       	movw	r30, r16
    248a:	a0 80       	ld	r10, Z
    248c:	b1 80       	ldd	r11, Z+1	; 0x01
    248e:	26 ff       	sbrs	r18, 6
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <vfprintf+0x12a>
    2492:	65 2d       	mov	r22, r5
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	02 c0       	rjmp	.+4      	; 0x249c <vfprintf+0x12e>
    2498:	6f ef       	ldi	r22, 0xFF	; 255
    249a:	7f ef       	ldi	r23, 0xFF	; 255
    249c:	c5 01       	movw	r24, r10
    249e:	2c 87       	std	Y+12, r18	; 0x0c
    24a0:	0e 94 94 13 	call	0x2728	; 0x2728 <strnlen>
    24a4:	2c 01       	movw	r4, r24
    24a6:	83 01       	movw	r16, r6
    24a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    24aa:	2f 77       	andi	r18, 0x7F	; 127
    24ac:	22 2e       	mov	r2, r18
    24ae:	17 c0       	rjmp	.+46     	; 0x24de <vfprintf+0x170>
    24b0:	38 01       	movw	r6, r16
    24b2:	f2 e0       	ldi	r31, 0x02	; 2
    24b4:	6f 0e       	add	r6, r31
    24b6:	71 1c       	adc	r7, r1
    24b8:	f8 01       	movw	r30, r16
    24ba:	a0 80       	ld	r10, Z
    24bc:	b1 80       	ldd	r11, Z+1	; 0x01
    24be:	26 ff       	sbrs	r18, 6
    24c0:	03 c0       	rjmp	.+6      	; 0x24c8 <vfprintf+0x15a>
    24c2:	65 2d       	mov	r22, r5
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <vfprintf+0x15e>
    24c8:	6f ef       	ldi	r22, 0xFF	; 255
    24ca:	7f ef       	ldi	r23, 0xFF	; 255
    24cc:	c5 01       	movw	r24, r10
    24ce:	2c 87       	std	Y+12, r18	; 0x0c
    24d0:	0e 94 89 13 	call	0x2712	; 0x2712 <strnlen_P>
    24d4:	2c 01       	movw	r4, r24
    24d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    24d8:	20 68       	ori	r18, 0x80	; 128
    24da:	22 2e       	mov	r2, r18
    24dc:	83 01       	movw	r16, r6
    24de:	23 fc       	sbrc	r2, 3
    24e0:	1b c0       	rjmp	.+54     	; 0x2518 <vfprintf+0x1aa>
    24e2:	83 2d       	mov	r24, r3
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	48 16       	cp	r4, r24
    24e8:	59 06       	cpc	r5, r25
    24ea:	b0 f4       	brcc	.+44     	; 0x2518 <vfprintf+0x1aa>
    24ec:	b7 01       	movw	r22, r14
    24ee:	80 e2       	ldi	r24, 0x20	; 32
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    24f6:	3a 94       	dec	r3
    24f8:	f4 cf       	rjmp	.-24     	; 0x24e2 <vfprintf+0x174>
    24fa:	f5 01       	movw	r30, r10
    24fc:	27 fc       	sbrc	r2, 7
    24fe:	85 91       	lpm	r24, Z+
    2500:	27 fe       	sbrs	r2, 7
    2502:	81 91       	ld	r24, Z+
    2504:	5f 01       	movw	r10, r30
    2506:	b7 01       	movw	r22, r14
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    250e:	31 10       	cpse	r3, r1
    2510:	3a 94       	dec	r3
    2512:	f1 e0       	ldi	r31, 0x01	; 1
    2514:	4f 1a       	sub	r4, r31
    2516:	51 08       	sbc	r5, r1
    2518:	41 14       	cp	r4, r1
    251a:	51 04       	cpc	r5, r1
    251c:	71 f7       	brne	.-36     	; 0x24fa <vfprintf+0x18c>
    251e:	e5 c0       	rjmp	.+458    	; 0x26ea <vfprintf+0x37c>
    2520:	84 36       	cpi	r24, 0x64	; 100
    2522:	11 f0       	breq	.+4      	; 0x2528 <vfprintf+0x1ba>
    2524:	89 36       	cpi	r24, 0x69	; 105
    2526:	39 f5       	brne	.+78     	; 0x2576 <vfprintf+0x208>
    2528:	f8 01       	movw	r30, r16
    252a:	27 ff       	sbrs	r18, 7
    252c:	07 c0       	rjmp	.+14     	; 0x253c <vfprintf+0x1ce>
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	0c 5f       	subi	r16, 0xFC	; 252
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	08 c0       	rjmp	.+16     	; 0x254c <vfprintf+0x1de>
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	88 27       	eor	r24, r24
    2542:	77 fd       	sbrc	r23, 7
    2544:	80 95       	com	r24
    2546:	98 2f       	mov	r25, r24
    2548:	0e 5f       	subi	r16, 0xFE	; 254
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	2f 76       	andi	r18, 0x6F	; 111
    254e:	b2 2e       	mov	r11, r18
    2550:	97 ff       	sbrs	r25, 7
    2552:	09 c0       	rjmp	.+18     	; 0x2566 <vfprintf+0x1f8>
    2554:	90 95       	com	r25
    2556:	80 95       	com	r24
    2558:	70 95       	com	r23
    255a:	61 95       	neg	r22
    255c:	7f 4f       	sbci	r23, 0xFF	; 255
    255e:	8f 4f       	sbci	r24, 0xFF	; 255
    2560:	9f 4f       	sbci	r25, 0xFF	; 255
    2562:	20 68       	ori	r18, 0x80	; 128
    2564:	b2 2e       	mov	r11, r18
    2566:	2a e0       	ldi	r18, 0x0A	; 10
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	a4 01       	movw	r20, r8
    256c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__ultoa_invert>
    2570:	a8 2e       	mov	r10, r24
    2572:	a8 18       	sub	r10, r8
    2574:	44 c0       	rjmp	.+136    	; 0x25fe <vfprintf+0x290>
    2576:	85 37       	cpi	r24, 0x75	; 117
    2578:	29 f4       	brne	.+10     	; 0x2584 <vfprintf+0x216>
    257a:	2f 7e       	andi	r18, 0xEF	; 239
    257c:	b2 2e       	mov	r11, r18
    257e:	2a e0       	ldi	r18, 0x0A	; 10
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	25 c0       	rjmp	.+74     	; 0x25ce <vfprintf+0x260>
    2584:	f2 2f       	mov	r31, r18
    2586:	f9 7f       	andi	r31, 0xF9	; 249
    2588:	bf 2e       	mov	r11, r31
    258a:	8f 36       	cpi	r24, 0x6F	; 111
    258c:	c1 f0       	breq	.+48     	; 0x25be <vfprintf+0x250>
    258e:	18 f4       	brcc	.+6      	; 0x2596 <vfprintf+0x228>
    2590:	88 35       	cpi	r24, 0x58	; 88
    2592:	79 f0       	breq	.+30     	; 0x25b2 <vfprintf+0x244>
    2594:	b4 c0       	rjmp	.+360    	; 0x26fe <vfprintf+0x390>
    2596:	80 37       	cpi	r24, 0x70	; 112
    2598:	19 f0       	breq	.+6      	; 0x25a0 <vfprintf+0x232>
    259a:	88 37       	cpi	r24, 0x78	; 120
    259c:	21 f0       	breq	.+8      	; 0x25a6 <vfprintf+0x238>
    259e:	af c0       	rjmp	.+350    	; 0x26fe <vfprintf+0x390>
    25a0:	2f 2f       	mov	r18, r31
    25a2:	20 61       	ori	r18, 0x10	; 16
    25a4:	b2 2e       	mov	r11, r18
    25a6:	b4 fe       	sbrs	r11, 4
    25a8:	0d c0       	rjmp	.+26     	; 0x25c4 <vfprintf+0x256>
    25aa:	8b 2d       	mov	r24, r11
    25ac:	84 60       	ori	r24, 0x04	; 4
    25ae:	b8 2e       	mov	r11, r24
    25b0:	09 c0       	rjmp	.+18     	; 0x25c4 <vfprintf+0x256>
    25b2:	24 ff       	sbrs	r18, 4
    25b4:	0a c0       	rjmp	.+20     	; 0x25ca <vfprintf+0x25c>
    25b6:	9f 2f       	mov	r25, r31
    25b8:	96 60       	ori	r25, 0x06	; 6
    25ba:	b9 2e       	mov	r11, r25
    25bc:	06 c0       	rjmp	.+12     	; 0x25ca <vfprintf+0x25c>
    25be:	28 e0       	ldi	r18, 0x08	; 8
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	05 c0       	rjmp	.+10     	; 0x25ce <vfprintf+0x260>
    25c4:	20 e1       	ldi	r18, 0x10	; 16
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <vfprintf+0x260>
    25ca:	20 e1       	ldi	r18, 0x10	; 16
    25cc:	32 e0       	ldi	r19, 0x02	; 2
    25ce:	f8 01       	movw	r30, r16
    25d0:	b7 fe       	sbrs	r11, 7
    25d2:	07 c0       	rjmp	.+14     	; 0x25e2 <vfprintf+0x274>
    25d4:	60 81       	ld	r22, Z
    25d6:	71 81       	ldd	r23, Z+1	; 0x01
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	0c 5f       	subi	r16, 0xFC	; 252
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	06 c0       	rjmp	.+12     	; 0x25ee <vfprintf+0x280>
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 5f       	subi	r16, 0xFE	; 254
    25ec:	1f 4f       	sbci	r17, 0xFF	; 255
    25ee:	a4 01       	movw	r20, r8
    25f0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__ultoa_invert>
    25f4:	a8 2e       	mov	r10, r24
    25f6:	a8 18       	sub	r10, r8
    25f8:	fb 2d       	mov	r31, r11
    25fa:	ff 77       	andi	r31, 0x7F	; 127
    25fc:	bf 2e       	mov	r11, r31
    25fe:	b6 fe       	sbrs	r11, 6
    2600:	0b c0       	rjmp	.+22     	; 0x2618 <vfprintf+0x2aa>
    2602:	2b 2d       	mov	r18, r11
    2604:	2e 7f       	andi	r18, 0xFE	; 254
    2606:	a5 14       	cp	r10, r5
    2608:	50 f4       	brcc	.+20     	; 0x261e <vfprintf+0x2b0>
    260a:	b4 fe       	sbrs	r11, 4
    260c:	0a c0       	rjmp	.+20     	; 0x2622 <vfprintf+0x2b4>
    260e:	b2 fc       	sbrc	r11, 2
    2610:	08 c0       	rjmp	.+16     	; 0x2622 <vfprintf+0x2b4>
    2612:	2b 2d       	mov	r18, r11
    2614:	2e 7e       	andi	r18, 0xEE	; 238
    2616:	05 c0       	rjmp	.+10     	; 0x2622 <vfprintf+0x2b4>
    2618:	7a 2c       	mov	r7, r10
    261a:	2b 2d       	mov	r18, r11
    261c:	03 c0       	rjmp	.+6      	; 0x2624 <vfprintf+0x2b6>
    261e:	7a 2c       	mov	r7, r10
    2620:	01 c0       	rjmp	.+2      	; 0x2624 <vfprintf+0x2b6>
    2622:	75 2c       	mov	r7, r5
    2624:	24 ff       	sbrs	r18, 4
    2626:	0d c0       	rjmp	.+26     	; 0x2642 <vfprintf+0x2d4>
    2628:	fe 01       	movw	r30, r28
    262a:	ea 0d       	add	r30, r10
    262c:	f1 1d       	adc	r31, r1
    262e:	80 81       	ld	r24, Z
    2630:	80 33       	cpi	r24, 0x30	; 48
    2632:	11 f4       	brne	.+4      	; 0x2638 <vfprintf+0x2ca>
    2634:	29 7e       	andi	r18, 0xE9	; 233
    2636:	09 c0       	rjmp	.+18     	; 0x264a <vfprintf+0x2dc>
    2638:	22 ff       	sbrs	r18, 2
    263a:	06 c0       	rjmp	.+12     	; 0x2648 <vfprintf+0x2da>
    263c:	73 94       	inc	r7
    263e:	73 94       	inc	r7
    2640:	04 c0       	rjmp	.+8      	; 0x264a <vfprintf+0x2dc>
    2642:	82 2f       	mov	r24, r18
    2644:	86 78       	andi	r24, 0x86	; 134
    2646:	09 f0       	breq	.+2      	; 0x264a <vfprintf+0x2dc>
    2648:	73 94       	inc	r7
    264a:	23 fd       	sbrc	r18, 3
    264c:	13 c0       	rjmp	.+38     	; 0x2674 <vfprintf+0x306>
    264e:	20 ff       	sbrs	r18, 0
    2650:	06 c0       	rjmp	.+12     	; 0x265e <vfprintf+0x2f0>
    2652:	5a 2c       	mov	r5, r10
    2654:	73 14       	cp	r7, r3
    2656:	18 f4       	brcc	.+6      	; 0x265e <vfprintf+0x2f0>
    2658:	53 0c       	add	r5, r3
    265a:	57 18       	sub	r5, r7
    265c:	73 2c       	mov	r7, r3
    265e:	73 14       	cp	r7, r3
    2660:	68 f4       	brcc	.+26     	; 0x267c <vfprintf+0x30e>
    2662:	b7 01       	movw	r22, r14
    2664:	80 e2       	ldi	r24, 0x20	; 32
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	2c 87       	std	Y+12, r18	; 0x0c
    266a:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    266e:	73 94       	inc	r7
    2670:	2c 85       	ldd	r18, Y+12	; 0x0c
    2672:	f5 cf       	rjmp	.-22     	; 0x265e <vfprintf+0x2f0>
    2674:	73 14       	cp	r7, r3
    2676:	10 f4       	brcc	.+4      	; 0x267c <vfprintf+0x30e>
    2678:	37 18       	sub	r3, r7
    267a:	01 c0       	rjmp	.+2      	; 0x267e <vfprintf+0x310>
    267c:	31 2c       	mov	r3, r1
    267e:	24 ff       	sbrs	r18, 4
    2680:	12 c0       	rjmp	.+36     	; 0x26a6 <vfprintf+0x338>
    2682:	b7 01       	movw	r22, r14
    2684:	80 e3       	ldi	r24, 0x30	; 48
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	2c 87       	std	Y+12, r18	; 0x0c
    268a:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    268e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2690:	22 ff       	sbrs	r18, 2
    2692:	17 c0       	rjmp	.+46     	; 0x26c2 <vfprintf+0x354>
    2694:	21 ff       	sbrs	r18, 1
    2696:	03 c0       	rjmp	.+6      	; 0x269e <vfprintf+0x330>
    2698:	88 e5       	ldi	r24, 0x58	; 88
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <vfprintf+0x334>
    269e:	88 e7       	ldi	r24, 0x78	; 120
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	b7 01       	movw	r22, r14
    26a4:	0c c0       	rjmp	.+24     	; 0x26be <vfprintf+0x350>
    26a6:	82 2f       	mov	r24, r18
    26a8:	86 78       	andi	r24, 0x86	; 134
    26aa:	59 f0       	breq	.+22     	; 0x26c2 <vfprintf+0x354>
    26ac:	21 fd       	sbrc	r18, 1
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <vfprintf+0x346>
    26b0:	80 e2       	ldi	r24, 0x20	; 32
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <vfprintf+0x348>
    26b4:	8b e2       	ldi	r24, 0x2B	; 43
    26b6:	27 fd       	sbrc	r18, 7
    26b8:	8d e2       	ldi	r24, 0x2D	; 45
    26ba:	b7 01       	movw	r22, r14
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    26c2:	a5 14       	cp	r10, r5
    26c4:	38 f4       	brcc	.+14     	; 0x26d4 <vfprintf+0x366>
    26c6:	b7 01       	movw	r22, r14
    26c8:	80 e3       	ldi	r24, 0x30	; 48
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    26d0:	5a 94       	dec	r5
    26d2:	f7 cf       	rjmp	.-18     	; 0x26c2 <vfprintf+0x354>
    26d4:	aa 94       	dec	r10
    26d6:	f4 01       	movw	r30, r8
    26d8:	ea 0d       	add	r30, r10
    26da:	f1 1d       	adc	r31, r1
    26dc:	80 81       	ld	r24, Z
    26de:	b7 01       	movw	r22, r14
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    26e6:	a1 10       	cpse	r10, r1
    26e8:	f5 cf       	rjmp	.-22     	; 0x26d4 <vfprintf+0x366>
    26ea:	33 20       	and	r3, r3
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <vfprintf+0x382>
    26ee:	51 ce       	rjmp	.-862    	; 0x2392 <vfprintf+0x24>
    26f0:	b7 01       	movw	r22, r14
    26f2:	80 e2       	ldi	r24, 0x20	; 32
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    26fa:	3a 94       	dec	r3
    26fc:	f6 cf       	rjmp	.-20     	; 0x26ea <vfprintf+0x37c>
    26fe:	f7 01       	movw	r30, r14
    2700:	86 81       	ldd	r24, Z+6	; 0x06
    2702:	97 81       	ldd	r25, Z+7	; 0x07
    2704:	02 c0       	rjmp	.+4      	; 0x270a <vfprintf+0x39c>
    2706:	8f ef       	ldi	r24, 0xFF	; 255
    2708:	9f ef       	ldi	r25, 0xFF	; 255
    270a:	2c 96       	adiw	r28, 0x0c	; 12
    270c:	e2 e1       	ldi	r30, 0x12	; 18
    270e:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__epilogue_restores__>

00002712 <strnlen_P>:
    2712:	fc 01       	movw	r30, r24
    2714:	05 90       	lpm	r0, Z+
    2716:	61 50       	subi	r22, 0x01	; 1
    2718:	70 40       	sbci	r23, 0x00	; 0
    271a:	01 10       	cpse	r0, r1
    271c:	d8 f7       	brcc	.-10     	; 0x2714 <strnlen_P+0x2>
    271e:	80 95       	com	r24
    2720:	90 95       	com	r25
    2722:	8e 0f       	add	r24, r30
    2724:	9f 1f       	adc	r25, r31
    2726:	08 95       	ret

00002728 <strnlen>:
    2728:	fc 01       	movw	r30, r24
    272a:	61 50       	subi	r22, 0x01	; 1
    272c:	70 40       	sbci	r23, 0x00	; 0
    272e:	01 90       	ld	r0, Z+
    2730:	01 10       	cpse	r0, r1
    2732:	d8 f7       	brcc	.-10     	; 0x272a <strnlen+0x2>
    2734:	80 95       	com	r24
    2736:	90 95       	com	r25
    2738:	8e 0f       	add	r24, r30
    273a:	9f 1f       	adc	r25, r31
    273c:	08 95       	ret

0000273e <fputc>:
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	18 2f       	mov	r17, r24
    2748:	09 2f       	mov	r16, r25
    274a:	eb 01       	movw	r28, r22
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	81 fd       	sbrc	r24, 1
    2750:	03 c0       	rjmp	.+6      	; 0x2758 <fputc+0x1a>
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	9f ef       	ldi	r25, 0xFF	; 255
    2756:	20 c0       	rjmp	.+64     	; 0x2798 <fputc+0x5a>
    2758:	82 ff       	sbrs	r24, 2
    275a:	10 c0       	rjmp	.+32     	; 0x277c <fputc+0x3e>
    275c:	4e 81       	ldd	r20, Y+6	; 0x06
    275e:	5f 81       	ldd	r21, Y+7	; 0x07
    2760:	2c 81       	ldd	r18, Y+4	; 0x04
    2762:	3d 81       	ldd	r19, Y+5	; 0x05
    2764:	42 17       	cp	r20, r18
    2766:	53 07       	cpc	r21, r19
    2768:	7c f4       	brge	.+30     	; 0x2788 <fputc+0x4a>
    276a:	e8 81       	ld	r30, Y
    276c:	f9 81       	ldd	r31, Y+1	; 0x01
    276e:	9f 01       	movw	r18, r30
    2770:	2f 5f       	subi	r18, 0xFF	; 255
    2772:	3f 4f       	sbci	r19, 0xFF	; 255
    2774:	39 83       	std	Y+1, r19	; 0x01
    2776:	28 83       	st	Y, r18
    2778:	10 83       	st	Z, r17
    277a:	06 c0       	rjmp	.+12     	; 0x2788 <fputc+0x4a>
    277c:	e8 85       	ldd	r30, Y+8	; 0x08
    277e:	f9 85       	ldd	r31, Y+9	; 0x09
    2780:	81 2f       	mov	r24, r17
    2782:	09 95       	icall
    2784:	89 2b       	or	r24, r25
    2786:	29 f7       	brne	.-54     	; 0x2752 <fputc+0x14>
    2788:	2e 81       	ldd	r18, Y+6	; 0x06
    278a:	3f 81       	ldd	r19, Y+7	; 0x07
    278c:	2f 5f       	subi	r18, 0xFF	; 255
    278e:	3f 4f       	sbci	r19, 0xFF	; 255
    2790:	3f 83       	std	Y+7, r19	; 0x07
    2792:	2e 83       	std	Y+6, r18	; 0x06
    2794:	81 2f       	mov	r24, r17
    2796:	90 2f       	mov	r25, r16
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	08 95       	ret

000027a2 <__ultoa_invert>:
    27a2:	fa 01       	movw	r30, r20
    27a4:	aa 27       	eor	r26, r26
    27a6:	28 30       	cpi	r18, 0x08	; 8
    27a8:	51 f1       	breq	.+84     	; 0x27fe <__ultoa_invert+0x5c>
    27aa:	20 31       	cpi	r18, 0x10	; 16
    27ac:	81 f1       	breq	.+96     	; 0x280e <__ultoa_invert+0x6c>
    27ae:	e8 94       	clt
    27b0:	6f 93       	push	r22
    27b2:	6e 7f       	andi	r22, 0xFE	; 254
    27b4:	6e 5f       	subi	r22, 0xFE	; 254
    27b6:	7f 4f       	sbci	r23, 0xFF	; 255
    27b8:	8f 4f       	sbci	r24, 0xFF	; 255
    27ba:	9f 4f       	sbci	r25, 0xFF	; 255
    27bc:	af 4f       	sbci	r26, 0xFF	; 255
    27be:	b1 e0       	ldi	r27, 0x01	; 1
    27c0:	3e d0       	rcall	.+124    	; 0x283e <__ultoa_invert+0x9c>
    27c2:	b4 e0       	ldi	r27, 0x04	; 4
    27c4:	3c d0       	rcall	.+120    	; 0x283e <__ultoa_invert+0x9c>
    27c6:	67 0f       	add	r22, r23
    27c8:	78 1f       	adc	r23, r24
    27ca:	89 1f       	adc	r24, r25
    27cc:	9a 1f       	adc	r25, r26
    27ce:	a1 1d       	adc	r26, r1
    27d0:	68 0f       	add	r22, r24
    27d2:	79 1f       	adc	r23, r25
    27d4:	8a 1f       	adc	r24, r26
    27d6:	91 1d       	adc	r25, r1
    27d8:	a1 1d       	adc	r26, r1
    27da:	6a 0f       	add	r22, r26
    27dc:	71 1d       	adc	r23, r1
    27de:	81 1d       	adc	r24, r1
    27e0:	91 1d       	adc	r25, r1
    27e2:	a1 1d       	adc	r26, r1
    27e4:	20 d0       	rcall	.+64     	; 0x2826 <__ultoa_invert+0x84>
    27e6:	09 f4       	brne	.+2      	; 0x27ea <__ultoa_invert+0x48>
    27e8:	68 94       	set
    27ea:	3f 91       	pop	r19
    27ec:	2a e0       	ldi	r18, 0x0A	; 10
    27ee:	26 9f       	mul	r18, r22
    27f0:	11 24       	eor	r1, r1
    27f2:	30 19       	sub	r19, r0
    27f4:	30 5d       	subi	r19, 0xD0	; 208
    27f6:	31 93       	st	Z+, r19
    27f8:	de f6       	brtc	.-74     	; 0x27b0 <__ultoa_invert+0xe>
    27fa:	cf 01       	movw	r24, r30
    27fc:	08 95       	ret
    27fe:	46 2f       	mov	r20, r22
    2800:	47 70       	andi	r20, 0x07	; 7
    2802:	40 5d       	subi	r20, 0xD0	; 208
    2804:	41 93       	st	Z+, r20
    2806:	b3 e0       	ldi	r27, 0x03	; 3
    2808:	0f d0       	rcall	.+30     	; 0x2828 <__ultoa_invert+0x86>
    280a:	c9 f7       	brne	.-14     	; 0x27fe <__ultoa_invert+0x5c>
    280c:	f6 cf       	rjmp	.-20     	; 0x27fa <__ultoa_invert+0x58>
    280e:	46 2f       	mov	r20, r22
    2810:	4f 70       	andi	r20, 0x0F	; 15
    2812:	40 5d       	subi	r20, 0xD0	; 208
    2814:	4a 33       	cpi	r20, 0x3A	; 58
    2816:	18 f0       	brcs	.+6      	; 0x281e <__ultoa_invert+0x7c>
    2818:	49 5d       	subi	r20, 0xD9	; 217
    281a:	31 fd       	sbrc	r19, 1
    281c:	40 52       	subi	r20, 0x20	; 32
    281e:	41 93       	st	Z+, r20
    2820:	02 d0       	rcall	.+4      	; 0x2826 <__ultoa_invert+0x84>
    2822:	a9 f7       	brne	.-22     	; 0x280e <__ultoa_invert+0x6c>
    2824:	ea cf       	rjmp	.-44     	; 0x27fa <__ultoa_invert+0x58>
    2826:	b4 e0       	ldi	r27, 0x04	; 4
    2828:	a6 95       	lsr	r26
    282a:	97 95       	ror	r25
    282c:	87 95       	ror	r24
    282e:	77 95       	ror	r23
    2830:	67 95       	ror	r22
    2832:	ba 95       	dec	r27
    2834:	c9 f7       	brne	.-14     	; 0x2828 <__ultoa_invert+0x86>
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	61 05       	cpc	r22, r1
    283a:	71 05       	cpc	r23, r1
    283c:	08 95       	ret
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	0a 2e       	mov	r0, r26
    2844:	06 94       	lsr	r0
    2846:	57 95       	ror	r21
    2848:	47 95       	ror	r20
    284a:	37 95       	ror	r19
    284c:	27 95       	ror	r18
    284e:	ba 95       	dec	r27
    2850:	c9 f7       	brne	.-14     	; 0x2844 <__ultoa_invert+0xa2>
    2852:	62 0f       	add	r22, r18
    2854:	73 1f       	adc	r23, r19
    2856:	84 1f       	adc	r24, r20
    2858:	95 1f       	adc	r25, r21
    285a:	a0 1d       	adc	r26, r0
    285c:	08 95       	ret

0000285e <__prologue_saves__>:
    285e:	2f 92       	push	r2
    2860:	3f 92       	push	r3
    2862:	4f 92       	push	r4
    2864:	5f 92       	push	r5
    2866:	6f 92       	push	r6
    2868:	7f 92       	push	r7
    286a:	8f 92       	push	r8
    286c:	9f 92       	push	r9
    286e:	af 92       	push	r10
    2870:	bf 92       	push	r11
    2872:	cf 92       	push	r12
    2874:	df 92       	push	r13
    2876:	ef 92       	push	r14
    2878:	ff 92       	push	r15
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	ca 1b       	sub	r28, r26
    2888:	db 0b       	sbc	r29, r27
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	09 94       	ijmp

00002896 <__epilogue_restores__>:
    2896:	2a 88       	ldd	r2, Y+18	; 0x12
    2898:	39 88       	ldd	r3, Y+17	; 0x11
    289a:	48 88       	ldd	r4, Y+16	; 0x10
    289c:	5f 84       	ldd	r5, Y+15	; 0x0f
    289e:	6e 84       	ldd	r6, Y+14	; 0x0e
    28a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    28a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    28a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    28a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    28a8:	b9 84       	ldd	r11, Y+9	; 0x09
    28aa:	c8 84       	ldd	r12, Y+8	; 0x08
    28ac:	df 80       	ldd	r13, Y+7	; 0x07
    28ae:	ee 80       	ldd	r14, Y+6	; 0x06
    28b0:	fd 80       	ldd	r15, Y+5	; 0x05
    28b2:	0c 81       	ldd	r16, Y+4	; 0x04
    28b4:	1b 81       	ldd	r17, Y+3	; 0x03
    28b6:	aa 81       	ldd	r26, Y+2	; 0x02
    28b8:	b9 81       	ldd	r27, Y+1	; 0x01
    28ba:	ce 0f       	add	r28, r30
    28bc:	d1 1d       	adc	r29, r1
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	ed 01       	movw	r28, r26
    28ca:	08 95       	ret

000028cc <_exit>:
    28cc:	f8 94       	cli

000028ce <__stop_program>:
    28ce:	ff cf       	rjmp	.-2      	; 0x28ce <__stop_program>
